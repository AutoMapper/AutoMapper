<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NLog</name>
    </assembly>
    <members>
        <member name="T:NLog.Conditions.ConditionAndExpression">
            <summary>
            Condition <b>and</b> expression.
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionExpression">
            <summary>
            Base class for representing nodes in condition expression trees.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.Evaluate(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this expression to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="F:NLog.Conditions.ConditionAndExpression.Left">
            <summary>
            The left hand side of the AND expression.
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionAndExpression.Right">
            <summary>
            The right hand side of the AND expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Conditions.ConditionAndExpression"/> and assigns
            its Left and Right properties;
            </summary>
            <param name="left">Left hand side of the AND expression.</param>
            <param name="right">Right hand side of the AND expression.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.Evaluate(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression by evaluating <see cref="F:NLog.Conditions.ConditionAndExpression.Left"/> and <see cref="F:NLog.Conditions.ConditionAndExpression.Right"/> recursively.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The value of the conjunction operator.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>(Left) or (Right) string</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this expression to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="T:NLog.Conditions.ConditionExpressionCollection">
            <summary>
            A collection of elements of type ConditionExpression
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionExpressionCollection.#ctor">
            <summary>
            Initializes a new empty instance of the ConditionExpressionCollection class.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionExpressionCollection.#ctor(NLog.Conditions.ConditionExpression[])">
            <summary>
            Initializes a new instance of the ConditionExpressionCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new ConditionExpressionCollection.
            </param>
        </member>
        <member name="M:NLog.Conditions.ConditionExpressionCollection.#ctor(NLog.Conditions.ConditionExpressionCollection)">
            <summary>
            Initializes a new instance of the ConditionExpressionCollection class, containing elements
            copied from another instance of ConditionExpressionCollection
            </summary>
            <param name="items">
            The ConditionExpressionCollection whose elements are to be added to the new ConditionExpressionCollection.
            </param>
        </member>
        <member name="M:NLog.Conditions.ConditionExpressionCollection.AddRange(NLog.Conditions.ConditionExpression[])">
            <summary>
            Adds the elements of an array to the end of this ConditionExpressionCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this ConditionExpressionCollection.
            </param>
        </member>
        <member name="M:NLog.Conditions.ConditionExpressionCollection.AddRange(NLog.Conditions.ConditionExpressionCollection)">
            <summary>
            Adds the elements of another ConditionExpressionCollection to the end of this ConditionExpressionCollection.
            </summary>
            <param name="items">
            The ConditionExpressionCollection whose elements are to be added to the end of this ConditionExpressionCollection.
            </param>
        </member>
        <member name="M:NLog.Conditions.ConditionExpressionCollection.Add(NLog.Conditions.ConditionExpression)">
            <summary>
            Adds an instance of type ConditionExpression to the end of this ConditionExpressionCollection.
            </summary>
            <param name="value">
            The ConditionExpression to be added to the end of this ConditionExpressionCollection.
            </param>
        </member>
        <member name="M:NLog.Conditions.ConditionExpressionCollection.Contains(NLog.Conditions.ConditionExpression)">
            <summary>
            Determines whether a specfic ConditionExpression value is in this ConditionExpressionCollection.
            </summary>
            <param name="value">
            The ConditionExpression value to locate in this ConditionExpressionCollection.
            </param>
            <returns>
            true if value is found in this ConditionExpressionCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpressionCollection.IndexOf(NLog.Conditions.ConditionExpression)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this ConditionExpressionCollection
            </summary>
            <param name="value">
            The ConditionExpression value to locate in the ConditionExpressionCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpressionCollection.Insert(System.Int32,NLog.Conditions.ConditionExpression)">
            <summary>
            Inserts an element into the ConditionExpressionCollection at the specified index
            </summary>
            <param name="index">
            The index at which the ConditionExpression is to be inserted.
            </param>
            <param name="value">
            The ConditionExpression to insert.
            </param>
        </member>
        <member name="M:NLog.Conditions.ConditionExpressionCollection.Remove(NLog.Conditions.ConditionExpression)">
            <summary>
            Removes the first occurrence of a specific ConditionExpression from this ConditionExpressionCollection.
            </summary>
            <param name="value">
            The ConditionExpression value to remove from this ConditionExpressionCollection.
            </param>
        </member>
        <member name="M:NLog.Conditions.ConditionExpressionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this ConditionExpressionCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.Conditions.ConditionExpressionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ConditionExpression at the given index in this ConditionExpressionCollection.
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionExpressionCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by ConditionExpressionCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionExpressionCollection.Enumerator.#ctor(NLog.Conditions.ConditionExpressionCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.Conditions.ConditionExpressionCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpressionCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Conditions.ConditionExpressionCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Conditions.ConditionExpressionCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionLayoutExpression">
            <summary>
            Condition layout expression (represented by a string literal
            with embedded ${})
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Conditions.ConditionLayoutExpression"/>
            and initializes the layout.
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.Evaluate(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression by calculating the value
            of the layout in the specified evaluation context.
            </summary>
            <param name="context">Evaluation context</param>
            <returns>The value of the layout.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>String literal in single quotes.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this expression to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="T:NLog.Conditions.ConditionLevelExpression">
            <summary>
            Condition level expression (represented by the <b>level</b> keyword).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLevelExpression.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Conditions.ConditionLevelExpression"/>.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLevelExpression.Evaluate(NLog.LogEventInfo)">
            <summary>
            Evaluates to the current log level.
            </summary>
            <param name="context">Evaluation context. Ignored.</param>
            <returns>The <see cref="T:NLog.LogLevel"/> object representing current log level.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLevelExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns><b>level</b> string.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionLiteralExpression">
            <summary>
            Condition literal expression (numeric, <b>LogLevel.XXX</b>, <b>true</b> or <b>false</b>)
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLiteralExpression.#ctor(System.Object)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Conditions.ConditionLiteralExpression"/>
            and initializes it with the specified value.
            </summary>
            <param name="literal"></param>
        </member>
        <member name="M:NLog.Conditions.ConditionLiteralExpression.Evaluate(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The literal value as passed in the constructor.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLiteralExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>The literal value.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionLoggerNameExpression">
            <summary>
            Condition logger name expression (represented by the <b>logger</b> keyword).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLoggerNameExpression.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Conditions.ConditionLoggerNameExpression"/>.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLoggerNameExpression.Evaluate(NLog.LogEventInfo)">
            <summary>
            Evaluates to the logger name.
            </summary>
            <param name="context">evaluation context</param>
            <returns>The logger name</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLoggerNameExpression.ToString">
            <summary>
            Returns a string representation of this expression
            </summary>
            <returns>a <b>logger</b> string</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionMessageExpression">
            <summary>
            Condition message expression (represented by the <b>message</b> keyword).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMessageExpression.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Conditions.ConditionMessageExpression"/>.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMessageExpression.Evaluate(NLog.LogEventInfo)">
            <summary>
            Evaluates to the logger message.
            </summary>
            <param name="context">evaluation context</param>
            <returns>The logger message</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMessageExpression.ToString">
            <summary>
            Returns a string representation of this expression
            </summary>
            <returns>a <b>message</b> string</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionMethodExpression">
            <summary>
            Condition method invocation expression (represented by <b>method(p1,p2,p3)</b> syntax).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodExpression.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this expression to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="T:NLog.Conditions.ConditionMethods">
            <summary>
            A bunch of utility methods (mostly predicates) which can be used in
            condition expressions. Parially inspired by XPath 1.0.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Equals2(System.Object,System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="o1">The first object</param>
            <param name="o2">The second object</param>
            <returns><b>true</b> when two objects are equal, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Contains(System.String,System.String)">
            <summary>
            Determines whether the second string is a substring of the first one.
            </summary>
            <param name="s1">The first string</param>
            <param name="s2">The second string</param>
            <returns><b>true</b> when the second string is a substring of the first string, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.StartsWith(System.String,System.String)">
            <summary>
            Determines whether the second string is a prefix of the first one.
            </summary>
            <param name="s1">The first string</param>
            <param name="s2">The second string</param>
            <returns><b>true</b> when the second string is a prefix of the first string, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.EndsWith(System.String,System.String)">
            <summary>
            Determines whether the second string is a suffix of the first one.
            </summary>
            <param name="s1">The first string</param>
            <param name="s2">The second string</param>
            <returns><b>true</b> when the second string is a prefix of the first string, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Length(System.String)">
            <summary>
            Returns the length of a string.
            </summary>
            <param name="s">A string.</param>
            <returns>The length of a string.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionNotExpression">
            <summary>
            Condition <b>not</b> expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionNotExpression.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this expression to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="T:NLog.Conditions.ConditionOrExpression">
            <summary>
            Condition <b>or</b> expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Conditions.ConditionOrExpression"/> and assigns
            its Left and Right properties;
            </summary>
            <param name="left">Left hand side of the OR expression.</param>
            <param name="right">Right hand side of the OR expression.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.Evaluate(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression by evaluating <see cref="F:NLog.Conditions.ConditionOrExpression.Left"/> and <see cref="F:NLog.Conditions.ConditionOrExpression.Right"/> recursively.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The value of the alternative operator.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>(Left) or (Right) string</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this expression to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="T:NLog.Conditions.ConditionParseException">
            <summary>
            Exception during parsing of condition expression
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Conditions.ConditionParseException"/>.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Conditions.ConditionParseException"/>.
            </summary>
            <param name="desc">Error message</param>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Conditions.ConditionParseException"/>.
            </summary>
            <param name="desc">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Conditions.ConditionParseException"/>.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:NLog.Conditions.ConditionParser">
            <summary>
            Condition parser. Turns a string representation of condition expression
            into an expression tree.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.ParseExpression(System.String)">
            <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression"/> tree.
            </summary>
            <param name="expr">The expression to be parsed.</param>
            <returns>The root of the expression syntax tree which can be used to get the value of the condition in a specified context</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionRelationalExpression">
            <summary>
            Condition relational (<b>==</b>, <b>!=</b>, <b>&lt;</b>, <b>&lt;=</b>, 
            <b>&gt;</b> or <b>&gt;=</b>) expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this expression to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="T:NLog.Conditions.ConditionRelationalOperator">
            <summary>
            Relational operators used in conditions.
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.Equal">
            <summary>
            Equality (==)
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.NotEqual">
            <summary>
            Inequality (!=)
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.Less">
            <summary>
            Less than (&lt;)
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.Greater">
            <summary>
            Greater than (&gt;)
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.LessOrEqual">
            <summary>
            Less than or equal (&lt;=)
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.GreaterOrEqual">
            <summary>
            Greater than or equal (&gt;=)
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionTokenizer">
            <summary>
            Hand-written tokenizer for conditions.
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionTokenType">
            <summary>
            Token types for condition expressions.
            </summary>
        </member>
        <member name="T:NLog.Config.AcceptsConditionAttribute">
            <summary>
            Attribute used to mark string parameters that accept conditions.
            </summary>
        </member>
        <member name="M:NLog.Config.AcceptsConditionAttribute.#ctor">
            <summary>
            Creates a new instance of AcceptsLayoutAttribute
            </summary>
        </member>
        <member name="T:NLog.Config.AcceptsLayoutAttribute">
            <summary>
            Attribute used to mark string parameters that accept layouts.
            </summary>
        </member>
        <member name="M:NLog.Config.AcceptsLayoutAttribute.#ctor">
            <summary>
            Creates a new instance of AcceptsLayoutAttribute
            </summary>
        </member>
        <member name="T:NLog.Config.ArrayParameterAttribute">
            <summary>
            Used to mark configurable parameters which are arrays. 
            Specifies the mapping between XML elements and .NET types.
            </summary>
        </member>
        <member name="M:NLog.Config.ArrayParameterAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of ArrayParameterAttribute specifying the
            element type and configuration element name.
            </summary>
            <param name="itemType">The type of the array item</param>
            <param name="elementName">The XML element name that represents the item.</param>
        </member>
        <member name="P:NLog.Config.ArrayParameterAttribute.ItemType">
            <summary>
            The .NET type of the array item
            </summary>
        </member>
        <member name="P:NLog.Config.ArrayParameterAttribute.ElementName">
            <summary>
            The XML element name.
            </summary>
        </member>
        <member name="T:NLog.Config.ConfigSectionHandler">
            <summary>
            NLog configuration section handler class for configuring NLog from App.config
            </summary>
        </member>
        <member name="T:NLog.Config.DefaultParameterAttribute">
            <summary>
            Attribute used to mark the default parameters for layout renderers.
            </summary>
        </member>
        <member name="M:NLog.Config.DefaultParameterAttribute.#ctor">
            <summary>
            Creates a new DefaultParameterAttribute object.
            </summary>
        </member>
        <member name="T:NLog.Config.LoggingConfiguration">
            <summary>
            Keeps logging configuration and provides simple API
            to modify it.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.#ctor">
            <summary>
            Creates new instance of LoggingConfiguration object.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddTarget(System.String,NLog.Target)">
            <summary>
            Registers the specified target object under a given name.
            </summary>
            <param name="name">Name of the target.</param>
            <param name="target">The target object.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.RemoveTarget(System.String)">
            <summary>
            Removes the specified named target.
            </summary>
            <param name="name">Name of the target.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.FindTargetByName(System.String)">
            <summary>
            Finds the target with the specified name.
            </summary>
            <param name="name">The name of the target to be found.</param>
            <returns>Found target or <see langword="null" /> when the target is not found.</returns>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Reload">
            <summary>
            Called by LogManager when one of the log configuration files changes.
            </summary>
            <returns>A new instance of <see cref="T:NLog.Config.LoggingConfiguration"/> that represents the updated configuration.</returns>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.FlushAllTargets(System.TimeSpan)">
            <summary>
            Flushes any pending log messages on all appenders.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.GetConfiguredNamedTargets">
            <summary>
            Returns a collection of named targets specified in the configuration.
            </summary>
            <returns>A <see cref="T:NLog.TargetCollection"/> object that contains a list of named targets.</returns>
            <remarks>
            Unnamed targets (such as those wrapped by other targets) are not returned.
            </remarks>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Close">
            <summary>
            Closes all targets and releases any unmanaged resources.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.LoggingRules">
            <summary>
            The collection of logging rules
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.FileNamesToWatch">
            <summary>
            A collection of file names which should be watched for changes by NLog.
            </summary>
        </member>
        <member name="T:NLog.Config.LoggingRule">
            <summary>
            Represents a logging rule. An equivalent of &lt;logger /&gt; configuration element.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRule.ToString">
            <summary>
            Returns a string representation of <see cref="T:NLog.Config.LoggingRule"/>. Used for debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NLog.Config.LoggingRule"/>.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.LogLevel,NLog.Target)">
            <summary>
            Initializes a new instance of <see cref="T:NLog.Config.LoggingRule"/> by
            setting the logger name pattern, minimum logging level and 
            the target to be written to when logger name and log level match.
            </summary>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
            <param name="minLevel">Minimum log level needed to trigger this rule.</param>
            <param name="target">Target to be written to when the rule matches.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.Target)">
            <summary>
            Initializes a new instance of <see cref="T:NLog.Config.LoggingRule"/> by
            setting the logger name pattern and 
            the target to be written to when logger name matches.
            </summary>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
            <param name="target">Target to be written to when the rule matches.</param>
            <remarks>By default no logging levels are defined. You should call <see cref="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)"/> and <see cref="M:NLog.Config.LoggingRule.DisableLoggingForLevel(NLog.LogLevel)"/> to set them.</remarks>
        </member>
        <member name="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)">
            <summary>
            Enables logging for a particular level.
            </summary>
            <param name="level">Level to be enabled.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.DisableLoggingForLevel(NLog.LogLevel)">
            <summary>
            Disables logging for a particular level.
            </summary>
            <param name="level">Level to be disabled.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.IsLoggingEnabledForLevel(NLog.LogLevel)">
            <summary>
            Checks whether te particular log level is enabled for this rule.
            </summary>
            <param name="level">Level to be checked</param>
            <returns><see langword="true"/> when the log level is enabled, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:NLog.Config.LoggingRule.NameMatches(System.String)">
            <summary>
            Checks whether given name matches the logger name pattern.
            </summary>
            <param name="loggerName">String to be matched</param>
            <returns><see langword="true"/> when the name matches, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="P:NLog.Config.LoggingRule.Targets">
            <summary>
            A collection of targets that should be written to when this rule matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.ChildRules">
            <summary>
            A collection of child rules to be evaluated when this rule matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.Filters">
            <summary>
            A collection of filters to be checked before writing to targets.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.Final">
            <summary>
            Quit processing any further rule when this one matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.LoggerNamePattern">
            <summary>
            Logger name pattern.
            </summary>
            <remarks>
            Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends but not anywhere else.
            </remarks>
        </member>
        <member name="T:NLog.Config.LoggingRuleCollection">
            <summary>
            A collection of elements of type LoggingRule
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.#ctor">
            <summary>
            Initializes a new empty instance of the LoggingRuleCollection class.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.#ctor(NLog.Config.LoggingRule[])">
            <summary>
            Initializes a new instance of the LoggingRuleCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new LoggingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.#ctor(NLog.Config.LoggingRuleCollection)">
            <summary>
            Initializes a new instance of the LoggingRuleCollection class, containing elements
            copied from another instance of LoggingRuleCollection
            </summary>
            <param name="items">
            The LoggingRuleCollection whose elements are to be added to the new LoggingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.AddRange(NLog.Config.LoggingRule[])">
            <summary>
            Adds the elements of an array to the end of this LoggingRuleCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this LoggingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.AddRange(NLog.Config.LoggingRuleCollection)">
            <summary>
            Adds the elements of another LoggingRuleCollection to the end of this LoggingRuleCollection.
            </summary>
            <param name="items">
            The LoggingRuleCollection whose elements are to be added to the end of this LoggingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.Add(NLog.Config.LoggingRule)">
            <summary>
            Adds an instance of type LoggingRule to the end of this LoggingRuleCollection.
            </summary>
            <param name="value">
            The LoggingRule to be added to the end of this LoggingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.Contains(NLog.Config.LoggingRule)">
            <summary>
            Determines whether a specfic LoggingRule value is in this LoggingRuleCollection.
            </summary>
            <param name="value">
            The LoggingRule value to locate in this LoggingRuleCollection.
            </param>
            <returns>
            true if value is found in this LoggingRuleCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.IndexOf(NLog.Config.LoggingRule)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this LoggingRuleCollection
            </summary>
            <param name="value">
            The LoggingRule value to locate in the LoggingRuleCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.Insert(System.Int32,NLog.Config.LoggingRule)">
            <summary>
            Inserts an element into the LoggingRuleCollection at the specified index
            </summary>
            <param name="index">
            The index at which the LoggingRule is to be inserted.
            </param>
            <param name="value">
            The LoggingRule to insert.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.Remove(NLog.Config.LoggingRule)">
            <summary>
            Removes the first occurrence of a specific LoggingRule from this LoggingRuleCollection.
            </summary>
            <param name="value">
            The LoggingRule value to remove from this LoggingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this LoggingRuleCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.Config.LoggingRuleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the LoggingRule at the given index in this LoggingRuleCollection.
            </summary>
        </member>
        <member name="T:NLog.Config.LoggingRuleCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by LoggingRuleCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.Enumerator.#ctor(NLog.Config.LoggingRuleCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.Enumerator.MoveNext">
            <summary>
            Advances to the next object.
            </summary>
            <returns>A <see cref="M:NLog.Config.LoggingRuleCollection.Enumerator.MoveNext"/> result</returns>
        </member>
        <member name="M:NLog.Config.LoggingRuleCollection.Enumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRuleCollection.Enumerator.Current">
            <summary>
            Returns the current object.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRuleCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current object.
            </summary>
        </member>
        <member name="T:NLog.Config.NLogConfigurationException">
            <summary>
            Exception during configuration
            </summary>
        </member>
        <member name="M:NLog.Config.NLogConfigurationException.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Config.NLogConfigurationException"/>.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogConfigurationException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Config.NLogConfigurationException"/>.
            </summary>
            <param name="desc">Error message</param>
        </member>
        <member name="M:NLog.Config.NLogConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Config.NLogConfigurationException"/>.
            </summary>
            <param name="desc">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:NLog.Config.NLogConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Config.NLogConfigurationException"/>.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:NLog.Config.NotSupportedRuntimeAttribute">
            <summary>
            Marks classes and properties as NOT supporting particular runtime framework 
            and operating system.
            </summary>
        </member>
        <member name="T:NLog.Config.SupportedRuntimeAttributeBase">
            <summary>
            Marks classes and properties as supporting particular runtime framework 
            and operating system.
            </summary>
        </member>
        <member name="M:NLog.Config.SupportedRuntimeAttributeBase.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Config.SupportedRuntimeAttributeBase"/>.
            </summary>
        </member>
        <member name="P:NLog.Config.SupportedRuntimeAttributeBase.Framework">
            <summary>
            Supported runtime framework.
            </summary>
        </member>
        <member name="P:NLog.Config.SupportedRuntimeAttributeBase.OS">
            <summary>
            Supported operating system.
            </summary>
        </member>
        <member name="P:NLog.Config.SupportedRuntimeAttributeBase.MinRuntimeVersion">
            <summary>
            Minimum runtime version supported.
            </summary>
        </member>
        <member name="P:NLog.Config.SupportedRuntimeAttributeBase.MaxRuntimeVersion">
            <summary>
            Maximum runtime version supported.
            </summary>
        </member>
        <member name="P:NLog.Config.SupportedRuntimeAttributeBase.MinOSVersion">
            <summary>
            Minimum operating system version supported.
            </summary>
        </member>
        <member name="P:NLog.Config.SupportedRuntimeAttributeBase.MaxOSVersion">
            <summary>
            Maximum operating system version supported.
            </summary>
        </member>
        <member name="M:NLog.Config.NotSupportedRuntimeAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Config.SupportedRuntimeAttribute"/>.
            </summary>
        </member>
        <member name="T:NLog.Config.RequiredParameterAttribute">
            <summary>
            Attribute used to mark the required parameters for targets,
            layout targets and filters.
            </summary>
        </member>
        <member name="M:NLog.Config.RequiredParameterAttribute.#ctor">
            <summary>
            Creates a new RequiredParameterAttribute object.
            </summary>
        </member>
        <member name="T:NLog.Config.RuntimeFramework">
            <summary>
            Supported runtime frameworks.
            </summary>
            <remarks>
            If you add anything here, make sure to add the appropriate detection
            code to <see cref="T:NLog.Internal.PlatformDetector"/>
            </remarks>
        </member>
        <member name="F:NLog.Config.RuntimeFramework.Any">
            <summary>
            Any framework.
            </summary>
        </member>
        <member name="F:NLog.Config.RuntimeFramework.DotNetCompactFramework">
            <summary>
            .NET Compact Framework
            </summary>
        </member>
        <member name="F:NLog.Config.RuntimeFramework.DotNetFramework">
            <summary>
            .NET Framework
            </summary>
        </member>
        <member name="F:NLog.Config.RuntimeFramework.Mono">
            <summary>
            Mono Project
            </summary>
        </member>
        <member name="F:NLog.Config.RuntimeFramework.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:NLog.Config.RuntimeOS">
            <summary>
            Supported operating systems.
            </summary>
            <remarks>
            If you add anything here, make sure to add the appropriate detection
            code to <see cref="T:NLog.Internal.PlatformDetector"/>
            </remarks>
        </member>
        <member name="F:NLog.Config.RuntimeOS.Any">
            <summary>
            Any operating system.
            </summary>
        </member>
        <member name="F:NLog.Config.RuntimeOS.Unix">
            <summary>
            Unix/Linux operating systems
            </summary>
        </member>
        <member name="F:NLog.Config.RuntimeOS.WindowsCE">
            <summary>
            Windows CE
            </summary>
        </member>
        <member name="F:NLog.Config.RuntimeOS.Windows">
            <summary>
            Desktop versions of Windows (95,98,ME)
            </summary>
        </member>
        <member name="F:NLog.Config.RuntimeOS.WindowsNT">
            <summary>
            Windows NT, 2000, 2003 and future versions based on NT technology
            </summary>
        </member>
        <member name="F:NLog.Config.RuntimeOS.Unknown">
            <summary>
            Unknown operating system
            </summary>
        </member>
        <member name="T:NLog.Config.SimpleConfigurator">
            <summary>
            Provides simple programmatic configuration API used for trivial logging cases.
            </summary>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging">
            <summary>
            Configures NLog for console logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info"/> level are output to the console.
            </summary>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging(NLog.LogLevel)">
            <summary>
            Configures NLog for console logging so that all messages above and including
            the specified level are output to the console.
            </summary>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(NLog.Target)">
            <summary>
            Configures NLog for to log to the specified target so that all messages 
            above and including the <see cref="F:NLog.LogLevel.Info"/> level are output.
            </summary>
            <param name="target">The target to log all messages to.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(NLog.Target,NLog.LogLevel)">
            <summary>
            Configures NLog for to log to the specified target so that all messages 
            above and including the specified level are output.
            </summary>
            <param name="target">The target to log all messages to.</param>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String)">
            <summary>
            Configures NLog for file logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info"/> level are written to the specified file.
            </summary>
            <param name="fileName">Log file name.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String,NLog.LogLevel)">
            <summary>
            Configures NLog for file logging so that all messages above and including
            the specified level are written to the specified file.
            </summary>
            <param name="fileName">Log file name.</param>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="T:NLog.Config.SupportedRuntimeAttribute">
            <summary>
            Marks classes and properties as supporting particular runtime framework 
            and operating system.
            </summary>
        </member>
        <member name="M:NLog.Config.SupportedRuntimeAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Config.SupportedRuntimeAttribute"/>.
            </summary>
        </member>
        <member name="T:NLog.Config.XmlLoggingConfiguration">
            <summary>
            A class for configuring NLog through an XML configuration file 
            (App.config style or App.nlog style)
            </summary>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:NLog.Config.XmlLoggingConfiguration"/>
            class and reads the configuration from the specified config file.
            </summary>
            <param name="fileName">Configuration file to be read.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new instance of <see cref="T:NLog.Config.XmlLoggingConfiguration"/>
            class and reads the configuration from the specified config file.
            </summary>
            <param name="fileName">Configuration file to be read.</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Constructs a new instance of <see cref="T:NLog.Config.XmlLoggingConfiguration"/>
            class and reads the configuration from the specified XML element.
            </summary>
            <param name="configElement"><see cref="T:System.Xml.XmlElement"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of <see cref="T:NLog.Config.XmlLoggingConfiguration"/>
            class and reads the configuration from the specified XML element.
            </summary>
            <param name="configElement"><see cref="T:System.Xml.XmlElement"/> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.Reload">
            <summary>
            Re-reads the original configuration file and returns the new <see cref="T:NLog.Config.LoggingConfiguration"/> object.
            </summary>
            <returns>The new <see cref="T:NLog.Config.XmlLoggingConfiguration"/> object.</returns>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.AutoReload">
            <summary>
            Gets or sets the value indicating whether the configuration files
            should be watched for changes and reloaded automatically when changed.
            </summary>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.FileNamesToWatch">
            <summary>
            Gets the collection of file names which should be watched for changes by NLog.
            This is the list of configuration files processed.
            If the <c>autoReload</c> attribute is not set it returns null.
            </summary>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.AppConfig">
            <summary>
            Gets the default <see cref="T:NLog.Config.LoggingConfiguration"/> object by parsing 
            the application configuration file (<c>app.exe.config</c>).
            </summary>
        </member>
        <member name="T:NLog.Filters.ConditionBasedFilter">
            <summary>
            Matches when the specified condition is met.
            </summary>
            <remarks>
            Conditions are expressed using a simple language 
            described <a href="conditions.html">here</a>.
            </remarks>
        </member>
        <member name="T:NLog.Filter">
            <summary>
            An abstract filter class. Provides a way to eliminate log messages
            based on properties other than logger name and log level.
            </summary>
        </member>
        <member name="M:NLog.Filter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLog.Filter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.FilterResult.Log"/> - if the log event should be logged<br/>
            </returns>
        </member>
        <member name="M:NLog.Filter.NeedsStackTrace">
            <summary>
            Determines whether stack trace information should be gathered
            during log event processing. 
            </summary>
            <returns>0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace</returns>
        </member>
        <member name="P:NLog.Filter.Result">
            <summary>
            The <see cref="T:NLog.FilterResult"/> value that should be returned 
            when this filter matches.
            </summary>
        </member>
        <member name="P:NLog.Filter.Action">
            <summary>
            User-requested action to be taken when filter matches.
            </summary>
            <remarks>
            Allowed values are <c>log</c>, <c>ignore</c>, <c>neutral</c>.
            </remarks>
        </member>
        <member name="M:NLog.Filters.ConditionBasedFilter.#ctor">
            <summary>
            Initializes a new instance of the filter object.
            </summary>
        </member>
        <member name="M:NLog.Filters.ConditionBasedFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.FilterResult.Log"/> - if the log event should be logged<br/>
            </returns>
        </member>
        <member name="P:NLog.Filters.ConditionBasedFilter.Condition">
            <summary>
            The condition expression.
            </summary>
        </member>
        <member name="T:NLog.Filters.LayoutBasedFilter">
            <summary>
            A base class for filters that are based on comparing a value to a layout.
            </summary>
        </member>
        <member name="M:NLog.Filters.LayoutBasedFilter.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NLog.Filters.LayoutBasedFilter"/>.
            </summary>
        </member>
        <member name="M:NLog.Filters.LayoutBasedFilter.NeedsStackTrace">
            <summary>
            Determines whether stack trace information should be gathered
            during log event processing. By default it calls <see cref="M:NLog.Layout.NeedsStackTrace"/> on
            <see cref="P:NLog.TargetWithLayout.CompiledLayout"/>.
            </summary>
            <returns>0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace</returns>
        </member>
        <member name="P:NLog.Filters.LayoutBasedFilter.Layout">
            <summary>
            The layout text;
            </summary>
        </member>
        <member name="P:NLog.Filters.LayoutBasedFilter.CompiledLayout">
            <summary>
            Compiled layout.
            </summary>
        </member>
        <member name="T:NLog.Filters.WhenContainsFilter">
            <summary>
            Matches when the calculated layout contains the specified substring. 
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenContainsFilter.#ctor">
            <summary>
            Initializes a new instance of the filter object.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenContainsFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.FilterResult.Log"/> - if the log event should be logged<br/>
            </returns>
        </member>
        <member name="P:NLog.Filters.WhenContainsFilter.IgnoreCase">
            <summary>
            Ignore case when comparing strings.
            </summary>
        </member>
        <member name="P:NLog.Filters.WhenContainsFilter.Substring">
            <summary>
            Substring to be matched.
            </summary>
        </member>
        <member name="T:NLog.Filters.WhenEqualFilter">
            <summary>
            Matches when the calculated layout is equal to the specified substring.
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenEqualFilter.#ctor">
            <summary>
            Initializes a new instance of the filter object.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenEqualFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.FilterResult.Log"/> - if the log event should be logged<br/>
            </returns>
        </member>
        <member name="P:NLog.Filters.WhenEqualFilter.IgnoreCase">
            <summary>
            Ignore case when comparing strings.
            </summary>
        </member>
        <member name="P:NLog.Filters.WhenEqualFilter.CompareTo">
            <summary>
            String to compare the layout to.
            </summary>
        </member>
        <member name="T:NLog.Filters.WhenNotContainsFilter">
            <summary>
            Matches when the calculated layout does NOT contain the specified substring.
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotContainsFilter.#ctor">
            <summary>
            Initializes a new instance of the filter object.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotContainsFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.FilterResult.Log"/> - if the log event should be logged<br/>
            </returns>
        </member>
        <member name="P:NLog.Filters.WhenNotContainsFilter.Substring">
            <summary>
            Substring to be matched.
            </summary>
        </member>
        <member name="P:NLog.Filters.WhenNotContainsFilter.IgnoreCase">
            <summary>
            Ignore case when comparing strings.
            </summary>
        </member>
        <member name="T:NLog.Filters.WhenNotEqualFilter">
            <summary>
            Matches when the calculated layout is NOT equal to the specified substring.
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotEqualFilter.#ctor">
            <summary>
            Initializes a new instance of the filter object.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotEqualFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
            <see cref="F:NLog.FilterResult.Ignore"/> - if the log event should be ignored<br/>
            <see cref="F:NLog.FilterResult.Neutral"/> - if the filter doesn't want to decide<br/>
            <see cref="F:NLog.FilterResult.Log"/> - if the log event should be logged<br/>
            </returns>
        </member>
        <member name="P:NLog.Filters.WhenNotEqualFilter.CompareTo">
            <summary>
            String to compare the layout to.
            </summary>
        </member>
        <member name="P:NLog.Filters.WhenNotEqualFilter.IgnoreCase">
            <summary>
            Ignore case when comparing strings.
            </summary>
        </member>
        <member name="T:NLog.Internal.FileAppenders.ICreateFileParameters">
            <summary>
            Interface that provides parameters for create file function.
            </summary>
        </member>
        <member name="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender">
            <summary>
            Provides a multiprocess-safe atomic file appends while
            keeping the files open.
            </summary>
            <remarks>
            On Unix you can get all the appends to be atomic, even when multiple 
            processes are trying to write to the same file, because setting the file
            pointer to the end of the file and appending can be made one operation.
            On Win32 we need to maintain some synchronization between processes
            (global named mutex is used for this)
            </remarks>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.NetworkSender">
            <summary>
            A base class for all network senders. Supports one-way sending of messages
            over various protocols.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Internal.NetworkSenders.NetworkSender"/> and initializes
            it with the specified URL.
            </summary>
            <param name="url">URL.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Finalize">
            <summary>
            Disposes the <see cref="T:NLog.Internal.NetworkSenders.NetworkSender"/> object.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Create(System.String)">
            <summary>
            Creates a new instance of the network sender based on a network URL:
            </summary>
            <param name="url">URL that determines the network sender to be created.</param>
            <returns>A newly created network sender.</returns>
            <remarks>
            If the url starts with <c>tcp://</c> - a new <see cref="T:NLog.Internal.NetworkSenders.TcpNetworkSender"/> is created.<br/>
            If the url starts with <c>udp://</c> - a new <see cref="T:NLog.Internal.NetworkSenders.UdpNetworkSender"/> is created.<br/>
            </remarks>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Close">
            <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Flush">
            <summary>
            Flushes any buffers.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send the given text over the specified protocol.
            </summary>
            <param name="bytes">Bytes to be sent.</param>
            <param name="offset">Offset in buffer</param>
            <param name="length">Number of bytes to send</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoSend(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Actually sends the given text over the specified protocol.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer</param>
            <param name="length">Number of bytes to send</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Dispose">
            <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
        </member>
        <member name="P:NLog.Internal.NetworkSenders.NetworkSender.Address">
            <summary>
            The address of the network endpoint.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.TcpNetworkSender">
            <summary>
            Sends messages over a TCP network connection.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Internal.NetworkSenders.TcpNetworkSender"/> and initializes
            it with the specified URL. Connects to the server specified in the URL.
            </summary>
            <param name="url">URL. Must start with tcp://</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends the specified text over the connected socket.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer</param>
            <param name="length">Number of bytes to send</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.UdpNetworkSender">
            <summary>
            Sends messages over the network as UDP datagrams.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Internal.NetworkSenders.UdpNetworkSender"/> and initializes
            it with the specified URL.
            </summary>
            <param name="url">URL. Must start with udp://</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends the specified text as a UDP datagram.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer</param>
            <param name="length">Number of bytes to send</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="T:NLog.Internal.Win32.Win32FileAttributes">
            <summary>
            Win32 file attributes
            </summary>
            <remarks>
            For more information see <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp</a>.
            </remarks>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.Readonly">
            <summary>
            Read-only
            </summary>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.Hidden">
            <summary>
            Hidden
            </summary>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.System">
            <summary>
            System
            </summary>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.Archive">
            <summary>
            File should be archived.
            </summary>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.Device">
            <summary>
            Device
            </summary>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.Temporary">
            <summary>
            File is temporary (should be kept in cache and not 
            written to disk if possible)
            </summary>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.SparseFile">
            <summary>
            Sparse file.
            </summary>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.ReparsePoint">
            <summary>
            Reparse point.
            </summary>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.Compressed">
            <summary>
            Compress file contents.
            </summary>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.NotContentIndexed">
            <summary>
            File should not be indexed by the content indexing service. 
            </summary>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.Encrypted">
            <summary>
            Encrypt file.
            </summary>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.WriteThrough">
            <summary>
            The system writes through any intermediate cache and goes directly to disk. 
            </summary>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.NoBuffering">
            <summary>
            The system opens a file with no system caching
            </summary>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.DeleteOnClose">
            <summary>
            Delete file after it is closed.
            </summary>
        </member>
        <member name="F:NLog.Internal.Win32.Win32FileAttributes.PosixSemantics">
            <summary>
            A file is accessed according to POSIX rules.
            </summary>
        </member>
        <member name="T:NLog.ExtensionUtils">
            <summary>
            A class that loads and manages NLog extension assemblies.
            </summary>
        </member>
        <member name="M:NLog.ExtensionUtils.GetExtensionAssemblies">
            <summary>
            Gets the list of loaded NLog extension assemblies.
            </summary>
            <returns>An <see cref="T:System.Collections.ArrayList"/> containing all NLog extension assemblies that have been loaded.</returns>
        </member>
        <member name="T:NLog.Internal.FilterDictionary">
            <summary>
            A dictionary with keys of type string and values of type Filter
            </summary>
        </member>
        <member name="M:NLog.Internal.FilterDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the FilterDictionary class
            </summary>
        </member>
        <member name="M:NLog.Internal.FilterDictionary.Add(System.String,NLog.Filter)">
            <summary>
            Adds an element with the specified key and value to this FilterDictionary.
            </summary>
            <param name="key">
            The string key of the element to add.
            </param>
            <param name="value">
            The Filter value of the element to add.
            </param>
        </member>
        <member name="M:NLog.Internal.FilterDictionary.Contains(System.String)">
            <summary>
            Determines whether this FilterDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this FilterDictionary.
            </param>
            <returns>
            true if this FilterDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.FilterDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this FilterDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this FilterDictionary.
            </param>
            <returns>
            true if this FilterDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.FilterDictionary.ContainsValue(NLog.Filter)">
            <summary>
            Determines whether this FilterDictionary contains a specific value.
            </summary>
            <param name="value">
            The Filter value to locate in this FilterDictionary.
            </param>
            <returns>
            true if this FilterDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.FilterDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this FilterDictionary.
            </summary>
            <param name="key">
            The string key of the element to remove.
            </param>
        </member>
        <member name="P:NLog.Internal.FilterDictionary.Item(System.String)">
            <summary>
            Gets or sets the Filter associated with the given string
            </summary>
            <param name="key">
            The string whose value to get or set.
            </param>
        </member>
        <member name="P:NLog.Internal.FilterDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this FilterDictionary.
            </summary>
        </member>
        <member name="P:NLog.Internal.FilterDictionary.Values">
            <summary>
            Gets a collection containing the values in this FilterDictionary.
            </summary>
        </member>
        <member name="T:NLog.Internal.FormHelper">
            <summary>
            Form helper
            </summary>
        </member>
        <member name="M:NLog.Internal.FormHelper.FindControl(System.String,System.Windows.Forms.Control)">
            <summary>
            Finds control embended on searchControl
            </summary>
            <param name="name">name of Control</param>
            <param name="searchControl">Control in which we're searching for control</param>
            <returns>null if no control has been found</returns>
        </member>
        <member name="M:NLog.Internal.FormHelper.FindControl(System.String,System.Windows.Forms.Control,System.Type)">
            <summary>
            Finds control of specified type embended on searchControl
            </summary>
            <param name="name">name of Control</param>
            <param name="searchControl">Control in which we're searching for control</param>
            <param name="controlType">Type of control to search</param>
            <returns>null if no control has been found</returns>
        </member>
        <member name="M:NLog.Internal.FormHelper.CreateForm(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates Form
            </summary>
            <param name="name">Name of form</param>
            <param name="width">Width of form</param>
            <param name="height">Height of form</param>
            <param name="show">Auto show form</param>
            <returns>Created form</returns>
        </member>
        <member name="M:NLog.Internal.FormHelper.CreateRichTextBox(System.String,System.Windows.Forms.Form)">
            <summary>
            Creates RichTextBox and docks in parentForm
            </summary>
            <param name="name">Name of RichTextBox</param>
            <param name="parentForm">Form to dock RichTextBox</param>
            <returns>Created RichTextBox</returns>
        </member>
        <member name="T:NLog.Internal.InternalLogger">
            <summary>
            NLog internal logger
            </summary>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs the specified message at the specified level.
            </summary>
            <param name="level">Log level.</param>
            <param name="formatProvider">Format provider to be used for formatting.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Logs the specified message at the specified level.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Log(NLog.LogLevel,System.String)">
            <summary>
            Logs the specified message at the specified level.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Trace(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs the specified message at the Trace level.
            </summary>
            <param name="formatProvider">Format provider to be used for formatting.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Trace(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Trace level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Trace(System.String)">
            <summary>
            Logs the specified message at the Trace level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs the specified message at the Debug level.
            </summary>
            <param name="formatProvider">Format provider to be used for formatting.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Debug level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Debug(System.String)">
            <summary>
            Logs the specified message at the Debug level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs the specified message at the Info level.
            </summary>
            <param name="formatProvider">Format provider to be used for formatting.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Info(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Info level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Info(System.String)">
            <summary>
            Logs the specified message at the Info level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs the specified message at the Warn level.
            </summary>
            <param name="formatProvider">Format provider to be used for formatting.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Warn(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Warn level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Warn(System.String)">
            <summary>
            Logs the specified message at the Warn level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs the specified message at the Error level.
            </summary>
            <param name="formatProvider">Format provider to be used for formatting.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Error(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Error level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Error(System.String)">
            <summary>
            Logs the specified message at the Error level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs the specified message at the Fatal level.
            </summary>
            <param name="formatProvider">Format provider to be used for formatting.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Fatal(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Fatal level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:NLog.Internal.InternalLogger.Fatal(System.String)">
            <summary>
            Logs the specified message at the Fatal level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="P:NLog.Internal.InternalLogger.LogLevel">
            <summary>
            Internal log level.
            </summary>
        </member>
        <member name="P:NLog.Internal.InternalLogger.LogToConsole">
            <summary>
            Log internal messages to the console.
            </summary>
        </member>
        <member name="P:NLog.Internal.InternalLogger.LogToConsoleError">
            <summary>
            Log internal messages to the console error stream.
            </summary>
        </member>
        <member name="P:NLog.Internal.InternalLogger.LogFile">
            <summary>
            The name of the internal log file.
            </summary>
            <remarks><see langword="null" /> value disables internal logging to a file.</remarks>
        </member>
        <member name="P:NLog.Internal.InternalLogger.IsTraceEnabled">
            <summary>
            Returns true when internal log level includes Trace messages
            </summary>
        </member>
        <member name="P:NLog.Internal.InternalLogger.IsDebugEnabled">
            <summary>
            Returns true when internal log level includes Debug messages
            </summary>
        </member>
        <member name="P:NLog.Internal.InternalLogger.IsInfoEnabled">
            <summary>
            Returns true when internal log level includes Info messages
            </summary>
        </member>
        <member name="P:NLog.Internal.InternalLogger.IsWarnEnabled">
            <summary>
            Returns true when internal log level includes Warn messages
            </summary>
        </member>
        <member name="P:NLog.Internal.InternalLogger.IsErrorEnabled">
            <summary>
            Returns true when internal log level includes Error messages
            </summary>
        </member>
        <member name="P:NLog.Internal.InternalLogger.IsFatalEnabled">
            <summary>
            Returns true when internal log level includes Fatal messages
            </summary>
        </member>
        <member name="T:NLog.Internal.LayoutRendererDictionary">
            <summary>
            A dictionary with keys of type string and values of type LayoutRenderer
            </summary>
        </member>
        <member name="M:NLog.Internal.LayoutRendererDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the LayoutRendererDictionary class
            </summary>
        </member>
        <member name="M:NLog.Internal.LayoutRendererDictionary.Add(System.String,NLog.LayoutRenderer)">
            <summary>
            Adds an element with the specified key and value to this LayoutRendererDictionary.
            </summary>
            <param name="key">
            The string key of the element to add.
            </param>
            <param name="value">
            The LayoutRenderer value of the element to add.
            </param>
        </member>
        <member name="M:NLog.Internal.LayoutRendererDictionary.Contains(System.String)">
            <summary>
            Determines whether this LayoutRendererDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this LayoutRendererDictionary.
            </param>
            <returns>
            true if this LayoutRendererDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.LayoutRendererDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this LayoutRendererDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this LayoutRendererDictionary.
            </param>
            <returns>
            true if this LayoutRendererDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.LayoutRendererDictionary.ContainsValue(NLog.LayoutRenderer)">
            <summary>
            Determines whether this LayoutRendererDictionary contains a specific value.
            </summary>
            <param name="value">
            The LayoutRenderer value to locate in this LayoutRendererDictionary.
            </param>
            <returns>
            true if this LayoutRendererDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.LayoutRendererDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this LayoutRendererDictionary.
            </summary>
            <param name="key">
            The string key of the element to remove.
            </param>
        </member>
        <member name="P:NLog.Internal.LayoutRendererDictionary.Item(System.String)">
            <summary>
            Gets or sets the LayoutRenderer associated with the given string
            </summary>
            <param name="key">
            The string whose value to get or set.
            </param>
        </member>
        <member name="P:NLog.Internal.LayoutRendererDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this LayoutRendererDictionary.
            </summary>
        </member>
        <member name="P:NLog.Internal.LayoutRendererDictionary.Values">
            <summary>
            Gets a collection containing the values in this LayoutRendererDictionary.
            </summary>
        </member>
        <member name="T:NLog.Internal.LogEventInfoBuffer">
            <summary>
            A cyclic buffer of <see cref="T:NLog.LogEventInfo"/> object.
            </summary>
        </member>
        <member name="M:NLog.Internal.LogEventInfoBuffer.#ctor(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Internal.LogEventInfoBuffer"/>, sets the buffer size and grow options.
            </summary>
            <param name="size">Buffer size.</param>
            <param name="growAsNeeded">Whether buffer should grow as it becomes full.</param>
            <param name="growLimit">The maximum number of items that the buffer can grow to.</param>
        </member>
        <member name="M:NLog.Internal.LogEventInfoBuffer.Append(NLog.LogEventInfo)">
            <summary>
            Adds the specified log event to the buffer.
            </summary>
            <param name="e">Log event</param>
            <returns>The number of items in the buffer.</returns>
        </member>
        <member name="M:NLog.Internal.LogEventInfoBuffer.GetEventsAndClear">
            <summary>
            Gets the array of events accumulated in the buffer and clears the buffer as one atomic operation.
            </summary>
            <returns>An array of <see cref="T:NLog.LogEventInfo"/> objects that have been accumulated in the buffer.</returns>
            <remarks>
            In case there are no items in the buffer, the function returns an empty array.
            </remarks>
        </member>
        <member name="P:NLog.Internal.LogEventInfoBuffer.Size">
            <summary>
            Gets the number of items in the array.
            </summary>
        </member>
        <member name="T:NLog.Internal.LoggerDictionary">
            <summary>
            A dictionary with keys of type string and values of type Logger
            </summary>
        </member>
        <member name="M:NLog.Internal.LoggerDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the LoggerDictionary class
            </summary>
        </member>
        <member name="M:NLog.Internal.LoggerDictionary.Add(System.String,NLog.Logger)">
            <summary>
            Adds an element with the specified key and value to this LoggerDictionary.
            </summary>
            <param name="key">
            The string key of the element to add.
            </param>
            <param name="value">
            The Logger value of the element to add.
            </param>
        </member>
        <member name="M:NLog.Internal.LoggerDictionary.Contains(System.String)">
            <summary>
            Determines whether this LoggerDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this LoggerDictionary.
            </param>
            <returns>
            true if this LoggerDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.LoggerDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this LoggerDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this LoggerDictionary.
            </param>
            <returns>
            true if this LoggerDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.LoggerDictionary.ContainsValue(NLog.Logger)">
            <summary>
            Determines whether this LoggerDictionary contains a specific value.
            </summary>
            <param name="value">
            The Logger value to locate in this LoggerDictionary.
            </param>
            <returns>
            true if this LoggerDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.LoggerDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this LoggerDictionary.
            </summary>
            <param name="key">
            The string key of the element to remove.
            </param>
        </member>
        <member name="P:NLog.Internal.LoggerDictionary.Item(System.String)">
            <summary>
            Gets or sets the Logger associated with the given string
            </summary>
            <param name="key">
            The string whose value to get or set.
            </param>
        </member>
        <member name="P:NLog.Internal.LoggerDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this LoggerDictionary.
            </summary>
        </member>
        <member name="P:NLog.Internal.LoggerDictionary.Values">
            <summary>
            Gets a collection containing the values in this LoggerDictionary.
            </summary>
        </member>
        <member name="T:NLog.Internal.MethodInfoDictionary">
            <summary>
            A dictionary with keys of type string and values of type MethodInfo
            </summary>
        </member>
        <member name="M:NLog.Internal.MethodInfoDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the MethodInfoDictionary class
            </summary>
        </member>
        <member name="M:NLog.Internal.MethodInfoDictionary.Add(System.String,System.Reflection.MethodInfo)">
            <summary>
            Adds an element with the specified key and value to this MethodInfoDictionary.
            </summary>
            <param name="key">
            The string key of the element to add.
            </param>
            <param name="value">
            The MethodInfo value of the element to add.
            </param>
        </member>
        <member name="M:NLog.Internal.MethodInfoDictionary.Contains(System.String)">
            <summary>
            Determines whether this MethodInfoDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this MethodInfoDictionary.
            </param>
            <returns>
            true if this MethodInfoDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.MethodInfoDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this MethodInfoDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this MethodInfoDictionary.
            </param>
            <returns>
            true if this MethodInfoDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.MethodInfoDictionary.ContainsValue(System.Reflection.MethodInfo)">
            <summary>
            Determines whether this MethodInfoDictionary contains a specific value.
            </summary>
            <param name="value">
            The MethodInfo value to locate in this MethodInfoDictionary.
            </param>
            <returns>
            true if this MethodInfoDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.MethodInfoDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this MethodInfoDictionary.
            </summary>
            <param name="key">
            The string key of the element to remove.
            </param>
        </member>
        <member name="P:NLog.Internal.MethodInfoDictionary.Item(System.String)">
            <summary>
            Gets or sets the MethodInfo associated with the given string
            </summary>
            <param name="key">
            The string whose value to get or set.
            </param>
        </member>
        <member name="P:NLog.Internal.MethodInfoDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this MethodInfoDictionary.
            </summary>
        </member>
        <member name="P:NLog.Internal.MethodInfoDictionary.Values">
            <summary>
            Gets a collection containing the values in this MethodInfoDictionary.
            </summary>
        </member>
        <member name="T:NLog.Internal.PropertyInfoDictionary">
            <summary>
            A dictionary with keys of type string and values of type PropertyInfo
            </summary>
        </member>
        <member name="M:NLog.Internal.PropertyInfoDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the PropertyInfoDictionary class
            </summary>
        </member>
        <member name="M:NLog.Internal.PropertyInfoDictionary.Add(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Adds an element with the specified key and value to this PropertyInfoDictionary.
            </summary>
            <param name="key">
            The string key of the element to add.
            </param>
            <param name="value">
            The PropertyInfo value of the element to add.
            </param>
        </member>
        <member name="M:NLog.Internal.PropertyInfoDictionary.Contains(System.String)">
            <summary>
            Determines whether this PropertyInfoDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this PropertyInfoDictionary.
            </param>
            <returns>
            true if this PropertyInfoDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.PropertyInfoDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this PropertyInfoDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this PropertyInfoDictionary.
            </param>
            <returns>
            true if this PropertyInfoDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.PropertyInfoDictionary.ContainsValue(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether this PropertyInfoDictionary contains a specific value.
            </summary>
            <param name="value">
            The PropertyInfo value to locate in this PropertyInfoDictionary.
            </param>
            <returns>
            true if this PropertyInfoDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.PropertyInfoDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this PropertyInfoDictionary.
            </summary>
            <param name="key">
            The string key of the element to remove.
            </param>
        </member>
        <member name="P:NLog.Internal.PropertyInfoDictionary.Item(System.String)">
            <summary>
            Gets or sets the PropertyInfo associated with the given string
            </summary>
            <param name="key">
            The string whose value to get or set.
            </param>
        </member>
        <member name="P:NLog.Internal.PropertyInfoDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this PropertyInfoDictionary.
            </summary>
        </member>
        <member name="P:NLog.Internal.PropertyInfoDictionary.Values">
            <summary>
            Gets a collection containing the values in this PropertyInfoDictionary.
            </summary>
        </member>
        <member name="T:NLog.Internal.TargetDictionary">
            <summary>
            A dictionary with keys of type string and values of type Target
            </summary>
        </member>
        <member name="M:NLog.Internal.TargetDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the TargetDictionary class
            </summary>
        </member>
        <member name="M:NLog.Internal.TargetDictionary.Add(System.String,NLog.Target)">
            <summary>
            Adds an element with the specified key and value to this TargetDictionary.
            </summary>
            <param name="key">
            The string key of the element to add.
            </param>
            <param name="value">
            The Target value of the element to add.
            </param>
        </member>
        <member name="M:NLog.Internal.TargetDictionary.Contains(System.String)">
            <summary>
            Determines whether this TargetDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this TargetDictionary.
            </param>
            <returns>
            true if this TargetDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TargetDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this TargetDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this TargetDictionary.
            </param>
            <returns>
            true if this TargetDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TargetDictionary.ContainsValue(NLog.Target)">
            <summary>
            Determines whether this TargetDictionary contains a specific value.
            </summary>
            <param name="value">
            The Target value to locate in this TargetDictionary.
            </param>
            <returns>
            true if this TargetDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TargetDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this TargetDictionary.
            </summary>
            <param name="key">
            The string key of the element to remove.
            </param>
        </member>
        <member name="P:NLog.Internal.TargetDictionary.Item(System.String)">
            <summary>
            Gets or sets the Target associated with the given string
            </summary>
            <param name="key">
            The string whose value to get or set.
            </param>
        </member>
        <member name="P:NLog.Internal.TargetDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this TargetDictionary.
            </summary>
        </member>
        <member name="P:NLog.Internal.TargetDictionary.Values">
            <summary>
            Gets a collection containing the values in this TargetDictionary.
            </summary>
        </member>
        <member name="T:NLog.Internal.ThreadIDHelper">
            <summary>
            Returns details about current process and thread in a portable manner.
            </summary>
        </member>
        <member name="F:NLog.Internal.ThreadIDHelper.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentUnmanagedThreadID">
            <summary>
            Returns current unmanaged thread ID.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentThreadID">
            <summary>
            Returns current thread ID.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessID">
            <summary>
            Returns current process ID.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessName">
            <summary>
            Returns current process name.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessBaseName">
            <summary>
            Returns current process name (excluding filename extension, if any).
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessDirectory">
            <summary>
            Returns the base directory where process EXE file resides.
            </summary>
        </member>
        <member name="T:NLog.Internal.TypeDictionary">
            <summary>
            A dictionary with keys of type string and values of type Type
            </summary>
        </member>
        <member name="M:NLog.Internal.TypeDictionary.#ctor">
            <summary>
            Initializes a new empty instance of the TypeDictionary class
            </summary>
        </member>
        <member name="M:NLog.Internal.TypeDictionary.Add(System.String,System.Type)">
            <summary>
            Adds an element with the specified key and value to this TypeDictionary.
            </summary>
            <param name="key">
            The string key of the element to add.
            </param>
            <param name="value">
            The Type value of the element to add.
            </param>
        </member>
        <member name="M:NLog.Internal.TypeDictionary.Contains(System.String)">
            <summary>
            Determines whether this TypeDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this TypeDictionary.
            </param>
            <returns>
            true if this TypeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TypeDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this TypeDictionary contains a specific key.
            </summary>
            <param name="key">
            The string key to locate in this TypeDictionary.
            </param>
            <returns>
            true if this TypeDictionary contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TypeDictionary.ContainsValue(System.Type)">
            <summary>
            Determines whether this TypeDictionary contains a specific value.
            </summary>
            <param name="value">
            The Type value to locate in this TypeDictionary.
            </param>
            <returns>
            true if this TypeDictionary contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TypeDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from this TypeDictionary.
            </summary>
            <param name="key">
            The string key of the element to remove.
            </param>
        </member>
        <member name="P:NLog.Internal.TypeDictionary.Item(System.String)">
            <summary>
            Gets or sets the Type associated with the given string
            </summary>
            <param name="key">
            The string whose value to get or set.
            </param>
        </member>
        <member name="P:NLog.Internal.TypeDictionary.Keys">
            <summary>
            Gets a collection containing the keys in this TypeDictionary.
            </summary>
        </member>
        <member name="P:NLog.Internal.TypeDictionary.Values">
            <summary>
            Gets a collection containing the values in this TypeDictionary.
            </summary>
        </member>
        <member name="T:NLog.Internal.TypeToPropertyInfoDictionaryAssociation">
            <summary>
            A dictionary with keys of type Type and values of type PropertyInfoDictionary
            </summary>
        </member>
        <member name="M:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.#ctor">
            <summary>
            Initializes a new empty instance of the TypeToPropertyInfoDictionaryAssociation class
            </summary>
        </member>
        <member name="M:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.Add(System.Type,NLog.Internal.PropertyInfoDictionary)">
            <summary>
            Adds an element with the specified key and value to this TypeToPropertyInfoDictionaryAssociation.
            </summary>
            <param name="key">
            The Type key of the element to add.
            </param>
            <param name="value">
            The PropertyInfoDictionary value of the element to add.
            </param>
        </member>
        <member name="M:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.Contains(System.Type)">
            <summary>
            Determines whether this TypeToPropertyInfoDictionaryAssociation contains a specific key.
            </summary>
            <param name="key">
            The Type key to locate in this TypeToPropertyInfoDictionaryAssociation.
            </param>
            <returns>
            true if this TypeToPropertyInfoDictionaryAssociation contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.ContainsKey(System.Type)">
            <summary>
            Determines whether this TypeToPropertyInfoDictionaryAssociation contains a specific key.
            </summary>
            <param name="key">
            The Type key to locate in this TypeToPropertyInfoDictionaryAssociation.
            </param>
            <returns>
            true if this TypeToPropertyInfoDictionaryAssociation contains an element with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.ContainsValue(NLog.Internal.PropertyInfoDictionary)">
            <summary>
            Determines whether this TypeToPropertyInfoDictionaryAssociation contains a specific value.
            </summary>
            <param name="value">
            The PropertyInfoDictionary value to locate in this TypeToPropertyInfoDictionaryAssociation.
            </param>
            <returns>
            true if this TypeToPropertyInfoDictionaryAssociation contains an element with the specified value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.Remove(System.Type)">
            <summary>
            Removes the element with the specified key from this TypeToPropertyInfoDictionaryAssociation.
            </summary>
            <param name="key">
            The Type key of the element to remove.
            </param>
        </member>
        <member name="P:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.Item(System.Type)">
            <summary>
            Gets or sets the PropertyInfoDictionary associated with the given Type
            </summary>
            <param name="key">
            The Type whose value to get or set.
            </param>
        </member>
        <member name="P:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.Keys">
            <summary>
            Gets a collection containing the keys in this TypeToPropertyInfoDictionaryAssociation.
            </summary>
        </member>
        <member name="P:NLog.Internal.TypeToPropertyInfoDictionaryAssociation.Values">
            <summary>
            Gets a collection containing the values in this TypeToPropertyInfoDictionaryAssociation.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ASPNETApplicationValueLayoutRenderer">
            <summary>
            ASP.NET Application variable.
            </summary>
            <remarks>
            Use this layout renderer to insert the value of the specified variable stored 
            in the ASP.NET Application dictionary.
            </remarks>
            <example>
            <para>You can set the value of an ASP.NET Application variable by using the following code:</para>
            <code lang="C#">
            <![CDATA[
            HttpContext.Current.Application["myvariable"] = 123;
            HttpContext.Current.Application["stringvariable"] = "aaa BBB";
            HttpContext.Current.Application["anothervariable"] = DateTime.Now;
            ]]>
            </code>
            <para>Example usage of ${aspnet-application}:</para>
            <code lang="NLog Layout Renderer">
            ${aspnet-application:variable=myvariable} - produces "123"
            ${aspnet-application:variable=anothervariable} - produces "01/01/2006 00:00:00"
            ${aspnet-application:variable=anothervariable:culture=pl-PL} - produces "2006-01-01 00:00:00"
            ${aspnet-application:variable=myvariable:padding=5} - produces "  123"
            ${aspnet-application:variable=myvariable:padding=-5} - produces "123  "
            ${aspnet-application:variable=stringvariable:upperCase=true} - produces "AAA BBB"
            </code>
            </example>
        </member>
        <member name="T:NLog.LayoutRenderer">
            <summary>
            Render environmental information related to logging events.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderer.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.LayoutRenderer"/>
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderer.NeedsStackTrace">
            <summary>
            Determines whether stack trace information should be gathered
            during log event processing. By default it calls <see cref="M:NLog.Layout.NeedsStackTrace"/> on
            <see cref="P:NLog.TargetWithLayout.CompiledLayout"/>.
            </summary>
            <returns>0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace</returns>
        </member>
        <member name="M:NLog.LayoutRenderer.IsVolatile">
            <summary>
            Determines whether the layout renderer is volatile.
            </summary>
            <returns>A boolean indicating whether the layout renderer is volatile.</returns>
            <remarks>
            Volatile layout renderers are dependent on information not contained 
            in <see cref="T:NLog.LogEventInfo"/> (such as thread-specific data, MDC data, NDC data).
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environmental information and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderer.NeedPadding">
            <summary>
            Determines whether it's necessary to call <see cref="M:NLog.LayoutRenderer.ApplyPadding(System.String)"/>.
            </summary>
            <returns><see langword="true"/> when there's any 
            trimming, padding or case conversion necessary, 
            <see langword="false"/> otherwise</returns>
            <remarks>
            Should this method return <see langword="true"/>,
            it's necessary to call ApplyPadding on a rendered text, 
            otherwise it's not necessary to do so.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderer.ApplyPadding(System.String)">
            <summary>
            Post-processes the rendered message by applying padding, 
            upper- and lower-case conversion.
            </summary>
            <param name="s">The text to be post-processed.</param>
            <returns>Padded, trimmed, and case-converted string.</returns>
        </member>
        <member name="M:NLog.LayoutRenderer.IsAppDomainFixed">
            <summary>
            Determines whether the value produced by the layout renderer
            is fixed per current app-domain.
            </summary>
            <returns>The boolean value. <c>true</c> makes the value
            of the layout renderer be precalculated and inserted as a literal
            in the resulting layout string.</returns>
        </member>
        <member name="M:NLog.LayoutRenderer.Initialize">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderer.Close">
            <summary>
            Closes the layout renderer.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderer.Padding">
            <summary>
            Padding value.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderer.AbsolutePadding">
            <summary>
            The absolute value of the <see cref="P:NLog.LayoutRenderer.Padding"/> property.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderer.PadCharacter">
            <summary>
            The padding character.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderer.FixedLength">
            <summary>
            Trim the rendered text to the AbsolutePadding value.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderer.UpperCase">
            <summary>
            Render an upper-case string.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderer.LowerCase">
            <summary>
            Render an upper-case string.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderer.Culture">
            <summary>
            The culture name to be used for rendering. 
            </summary>
            <example>
            The format for culture names is described in <a href="http://rfc.net/rfc1766.html">RFC 1766</a> and at <a href="http://msdn2.microsoft.com/en-us/library/system.globalization.cultureinfo.cultureinfo.aspx">MSDN</a>. 
            Some examples of valid culture names are:
            <ul>
            <li><b>en-US</b> - English (United States)</li>
            <li><b>en-UK</b> - English (United Kingdom)</li>
            <li><b>pl-PL</b> - Polish</li>
            <li><b>ar-SA</b> - Arabic (Saudi Arabia)</li>
            </ul>
            </example>
        </member>
        <member name="P:NLog.LayoutRenderer.CultureInfo">
            <summary>
            The <see cref="T:System.Globalization.CultureInfo"/> to be used for rendering.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETApplicationValueLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETApplicationValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.ASPNETApplicationValueLayoutRenderer.Variable">
            <summary>
            The variable name.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer">
            <summary>
            ASP.NET Request variable
            </summary>
            <remarks>
            Use this layout renderer to insert the value of the specified parameter of the
            ASP.NET Request object.
            </remarks>
            <example>
            <para>Example usage of ${aspnet-request}:</para>
            <code lang="NLog Layout Renderer">
            ${aspnet-request:item=v}
            ${aspnet-request:querystring=v}
            ${aspnet-request:form=v}
            ${aspnet-request:cookie=v}
            ${aspnet-request:serverVariable=v}
            </code>
            </example>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Request variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer.Item">
            <summary>
            The item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer.QueryString">
            <summary>
            The QueryString variable to be rendered.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer.Form">
            <summary>
            The form variable to be rendered.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer.Cookie">
            <summary>
            The cookie to be rendered.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ASPNETRequestValueLayoutRenderer.ServerVariable">
            <summary>
            The ServerVariables item to be rendered.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ASPNETSessionValueLayoutRenderer">
            <summary>
            ASP.NET Session variable.
            </summary>
            <remarks>
            Use this layout renderer to insert the value of the specified variable stored 
            in the ASP.NET Session dictionary.
            </remarks>
            <example>
            <para>You can set the value of an ASP.NET Session variable by using the following code:</para>
            <code lang="C#">
            <![CDATA[
            HttpContext.Current.Session["myvariable"] = 123;
            HttpContext.Current.Session["stringvariable"] = "aaa BBB";
            HttpContext.Current.Session["anothervariable"] = DateTime.Now;
            ]]>
            </code>
            <para>Example usage of ${aspnet-session}:</para>
            <code lang="NLog Layout Renderer">
            ${aspnet-session:variable=myvariable} - produces "123"
            ${aspnet-session:variable=anothervariable} - produces "01/01/2006 00:00:00"
            ${aspnet-session:variable=anothervariable:culture=pl-PL} - produces "2006-01-01 00:00:00"
            ${aspnet-session:variable=myvariable:padding=5} - produces "  123"
            ${aspnet-session:variable=myvariable:padding=-5} - produces "123  "
            ${aspnet-session:variable=stringvariable:upperCase=true} - produces "AAA BBB"
            </code>
            </example>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETSessionValueLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETSessionValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET Session value and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.ASPNETSessionValueLayoutRenderer.Variable">
            <summary>
            Session variable name.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ASPNETSessionIDLayoutRenderer">
            <summary>
            ASP.NET Session ID.
            </summary>                 
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETSessionIDLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETSessionIDLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ASP.NET Session ID appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ASPNETUserAuthTypeLayoutRenderer">
            <summary>
            ASP.NET User variable
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETUserAuthTypeLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETUserAuthTypeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET User.Identity.AuthenticationType variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ASPNETUserIdentityLayoutRenderer">
            <summary>
            ASP.NET User variable
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETUserIdentityLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ASPNETUserIdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP.NET User.Identity.Name variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.BaseDirLayoutRenderer">
            <summary>
            The current application domain's base directory.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.LayoutRenderers.BaseDirLayoutRenderer"/>.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the application base directory and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.IsAppDomainFixed">
            <summary>
            Determines whether the value produced by the layout renderer
            is fixed per current app-domain.
            </summary>
            <returns><see langword="true"/></returns>
        </member>
        <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.File">
            <summary>
            The name of the file to be Path.Combine()'d with with the base directory.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.Dir">
            <summary>
            The name of the directory to be Path.Combine()'d with with the base directory.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.CallSiteLayoutRenderer">
            <summary>
            The call site (class name, method name and source information)
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.NeedsStackTrace">
            <summary>
            Checks whether the stack trace is requested.
            </summary>
            <returns>2 when the source file information is requested, 1 otherwise.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.ClassName">
            <summary>
            Render the class name.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.MethodName">
            <summary>
            Render the method name.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.FileName">
            <summary>
            Render the source file name and line number.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.IncludeSourcePath">
            <summary>
            Include source file path.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.CounterLayoutRenderer">
            <summary>
            A counter value (increases on each layout rendering).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified counter value and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Value">
            <summary>
            The initial value of the counter
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Increment">
            <summary>
            The value to be added to the counter after each layout rendering.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Sequence">
            <summary>
            The name of the sequence. Different named sequences can have individual values.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.DateLayoutRenderer">
            <summary>
            A date and time in the specified format.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current date and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.Format">
            <summary>
            The date format. Can be any argument accepted by DateTime.ToString(format)
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.EnvironmentLayoutRenderer">
            <summary>
            The environment variable.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.EnvironmentLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environment variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.EnvironmentLayoutRenderer.IsAppDomainFixed">
            <summary>
            Determines whether the value produced by the layout renderer
            is fixed per current app-domain.
            </summary>
            <returns><see langword="true"/></returns>
        </member>
        <member name="P:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Variable">
            <summary>
            Name of the environment variable.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.EventContextLayoutRenderer">
            <summary>
            Log event context data
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.EventContextLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.EventContextLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified log event context item and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.EventContextLayoutRenderer.Item">
            <summary>
            Name of the item.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ExceptionLayoutRenderer">
            <summary>
            Exception information provided through 
            a call to one of the Logger.*Exception() methods.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NLog.LayoutRenderers.ExceptionLayoutRenderer"/>.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified exception information and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Format">
            <summary>
            The format of the output. Must be a comma-separated list of exception
            properties: Message, Type, ShortType, ToString, Method, StackTrace.
            This parameter value is case-insensitive.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Separator">
            <summary>
            The separator used to concatenate parts specified in the Format.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.FileContentsLayoutRenderer">
            <summary>
            Contents of the specified file.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.FileContentsLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.FileContentsLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the contents of the specified file and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.FileContentsLayoutRenderer.FileName">
            <summary>
            Name of the file.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.FileContentsLayoutRenderer.Encoding">
            <summary>
            File encoding.
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="T:NLog.LayoutRenderers.GCLayoutRenderer">
            <summary>
            The information about the garbage collector.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GCLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.GCLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the selected process information.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.GCLayoutRenderer.Property">
            <summary>
            The property to retrieve.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.GCLayoutRenderer.GCProperty">
            <summary>
            The property of System.GC to retrieve
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GCLayoutRenderer.GCProperty.TotalMemory">
            <summary>
            Total memory allocated
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GCLayoutRenderer.GCProperty.TotalMemoryForceCollection">
            <summary>
            Total memory allocated (perform full garbage collection first)
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GCLayoutRenderer.GCProperty.CollectionCount0">
            <summary>
            Number of Gen0 collections.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GCLayoutRenderer.GCProperty.CollectionCount1">
            <summary>
            Number of Gen1 collections.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GCLayoutRenderer.GCProperty.CollectionCount2">
            <summary>
            Number of Gen2 collections.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GCLayoutRenderer.GCProperty.MaxGeneration">
            <summary>
            Maximum generation number supported by GC.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.GDCLayoutRenderer">
            <summary>
            Global Diagnostics Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GDCLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.GDCLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified Global Diagnostics Context item and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.GDCLayoutRenderer.Item">
            <summary>
            Name of the item.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.GuidLayoutRenderer">
            <summary>
            Globally-unique identifier (GUID).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders a newly generated GUID string and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.GuidLayoutRenderer.Format">
            <summary>
            The GUID format as accepted by Guid.ToString() method.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.IdentityLayoutRenderer">
            <summary>
            Thread identity information (name and authentication information)
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified identity information and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Separator">
            <summary>
            The separator to be used when concatenating 
            parts of identity information.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Name">
            <summary>
            Render Thread.CurrentPrincipal.Identity.Name.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.AuthType">
            <summary>
            Render Thread.CurrentPrincipal.Identity.AuthenticationType.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.IsAuthenticated">
            <summary>
            Render Thread.CurrentPrincipal.Identity.IsAuthenticated.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.FSNormalize">
            <summary>
            When true the output of this renderer is modified so it can be used as a part of file path
            (illegal characters are replaced with '_')
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.LevelLayoutRenderer">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LevelLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LevelLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current log level and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LiteralLayoutRenderer">
            <summary>
            A string literal.
            </summary>
            <remarks>
            This is used to escape '${' sequence 
            as ;${literal:text=${}'
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.LayoutRenderers.LiteralLayoutRenderer"/>.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LiteralLayoutRenderer"/> and sets the
            literal text value.
            </summary>
            <param name="txt">The literal text value.</param>
            <remarks>This is used by the layout compiler.</remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified string literal and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.LiteralLayoutRenderer.Text">
            <summary>
            Literal text.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer">
            <summary>
            XML event description compatible with log4j, Chainsaw and NLogViewer
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer"/> and initializes default values.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the XML logging event and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeNLogData">
            <summary>
            Include NLog-specific extensions to log4j schema.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IndentXml">
            <summary>
            Whether the XML should use spaces for indentation.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.AppInfo">
            <summary>
            The AppInfo field. By default it's the friendly name of the current AppDomain.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeCallSite">
            <summary>
            Include call site (class and method name) in the information sent over the network.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeSourceInfo">
            <summary>
            Include source info (file name and line number) in the information sent over the network.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeMDC">
            <summary>
            Include MDC dictionary in the information sent over the network.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeNDC">
            <summary>
            Include NDC stack.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.LoggerNameLayoutRenderer">
            <summary>
            The logger name.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LoggerNameLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LoggerNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the logger name and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.LoggerNameLayoutRenderer.ShortName">
            <summary>
            Render short logger name (the part after the trailing dot character).
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.LongDateLayoutRenderer">
            <summary>
            The date and time in a long, sortable format yyyy-MM-dd HH:mm:ss.mmm
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LongDateLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LongDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the date in the long format (yyyy-MM-dd HH:mm:ss.mmm) and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.MachineNameLayoutRenderer">
            <summary>
            The machine name that the process is running on.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the machine name and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.IsAppDomainFixed">
            <summary>
            Determines whether the value produced by the layout renderer
            is fixed per current app-domain.
            </summary>
            <returns><see langword="true"/></returns>
        </member>
        <member name="T:NLog.LayoutRenderers.MDCLayoutRenderer">
            <summary>
            Mapped Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MDCLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.MDCLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified MDC item and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.MDCLayoutRenderer.Item">
            <summary>
            Name of the item.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.MessageLayoutRenderer">
            <summary>
            The formatted log message.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MessageLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.MessageLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the log message including any positional parameters and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.NDCLayoutRenderer">
            <summary>
            Nested Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NDCLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.NDCLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified NDC item and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.NDCLayoutRenderer.TopFrames">
            <summary>
            The number of top stack frames to be rendered.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.NDCLayoutRenderer.BottomFrames">
            <summary>
            The number of bottom stack frames to be rendered.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.NDCLayoutRenderer.Separator">
            <summary>
            The separator to be used for concatenating NDC output.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.NewLine">
            <summary>
            A newline literal.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NewLine.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.NewLine.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified string literal and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.NLogDirLayoutRenderer">
            <summary>
            The directory where NLog.dll is located.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NLogDirLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.NLogDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.NLogDirLayoutRenderer.IsAppDomainFixed">
            <summary>
            Determines whether the value produced by the layout renderer
            is fixed per current app-domain.
            </summary>
            <returns><see langword="true"/></returns>
        </member>
        <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.File">
            <summary>
            The name of the file to be Path.Combine()'d with the directory name.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.Dir">
            <summary>
            The name of the directory to be Path.Combine()'d with the directory name.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer">
            <summary>
            The performance counter.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.InvalidatePerformanceCounter">
            <summary>
            Closes currently open performance counter (if any).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environment variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Category">
            <summary>
            Name of the counter category.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Counter">
            <summary>
            Name of the performance counter.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Instance">
            <summary>
            Name of the performance counter instance (e.g. _Global_).
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.MachineName">
            <summary>
            Name of the machine to read the performance counter from.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessIDLayoutRenderer">
            <summary>
            The identifier of the current process.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessIDLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessIDLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process ID.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessIDLayoutRenderer.IsAppDomainFixed">
            <summary>
            Determines whether the value produced by the layout renderer
            is fixed per current app-domain.
            </summary>
            <returns><see langword="true"/></returns>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessInfoLayoutRenderer">
            <summary>
            The information about the running process.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the selected process information.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Initialize">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Close">
            <summary>
            Closes the layout renderer.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Property">
            <summary>
            The property to retrieve.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty">
            <summary>
            The property of System.Diagnostics.Process to retrieve
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.BasePriority">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.ExitCode">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.ExitTime">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.Handle">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.HandleCount">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.HasExited">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.Id">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.MachineName">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.MainModule">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.MainWindowHandle">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.MainWindowTitle">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.MaxWorkingSet">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.MinWorkingSet">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.NonpagedSystemMemorySize">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.NonpagedSystemMemorySize64">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PagedMemorySize">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PagedMemorySize64">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PagedSystemMemorySize">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PagedSystemMemorySize64">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PeakPagedMemorySize">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PeakPagedMemorySize64">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PeakVirtualMemorySize">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PeakVirtualMemorySize64">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PeakWorkingSet">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PeakWorkingSet64">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PriorityBoostEnabled">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PriorityClass">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PrivateMemorySize">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PrivateMemorySize64">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PrivilegedProcessorTime">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.ProcessName">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.Responding">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.SessionId">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.StartTime">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.TotalProcessorTime">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.UserProcessorTime">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.VirtualMemorySize">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.VirtualMemorySize64">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.WorkingSet">
            <summary></summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.WorkingSet64">
            <summary></summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessNameLayoutRenderer">
            <summary>
            The name of the current process.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessNameLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process name (optionally with a full path).
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessNameLayoutRenderer.IsAppDomainFixed">
            <summary>
            Determines whether the value produced by the layout renderer
            is fixed per current app-domain.
            </summary>
            <returns><see langword="true"/></returns>
        </member>
        <member name="P:NLog.LayoutRenderers.ProcessNameLayoutRenderer.FullName">
            <summary>
            Write the full path to the process executable.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessTimeLayoutRenderer">
            <summary>
            The process time in format HH:mm:ss.mmm
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessTimeLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessTimeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process running time and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.QpcLayoutRenderer">
            <summary>
            High precision timer, based on the value returned from QueryPerformanceCounter() optionally converted to seconds.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.QpcLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.QpcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ticks value of current time and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.QpcLayoutRenderer.Normalize">
            <summary>
            Normalize the result by subtracting it from the result of the
            first call (so that it's effectively zero-based).
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.QpcLayoutRenderer.Difference">
            <summary>
            Output the difference between the result of QueryPerformanceCounter 
            and the previous one.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.QpcLayoutRenderer.Seconds">
            <summary>
            Convert the result to seconds by dividing by the result of QueryPerformanceFrequency().
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.QpcLayoutRenderer.Precision">
            <summary>
            Number of decimal digits to be included in output.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.QpcLayoutRenderer.AlignDecimalPoint">
            <summary>
            Align decimal point (emit non-significant zeros)
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.Rot13LayoutRenderer">
            <summary>
            Decodes text "encrypted" with ROT-13.
            </summary>
            <remarks>
            See <a href="http://en.wikipedia.org/wiki/ROT13">http://en.wikipedia.org/wiki/ROT13</a>.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.Rot13LayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.Rot13LayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the inner message, decrypts it with ROT-13 and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.Rot13LayoutRenderer.NeedsStackTrace">
            <summary>
            Determines whether stack trace information should be gathered
            during log event processing. By default it calls <see cref="M:NLog.Layout.NeedsStackTrace"/> on
            <see cref="P:NLog.TargetWithLayout.CompiledLayout"/>.
            </summary>
            <returns>
            0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace
            </returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Rot13LayoutRenderer.DecodeRot13(System.String)">
            <summary>
            Encodes/Decodes ROT-13-encoded string.
            </summary>
            <param name="s">The string to be encoded/decoded</param>
            <returns>Encoded/Decoded text</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Rot13LayoutRenderer.Text">
            <summary>
            The text to be decoded.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ShortDateLayoutRenderer">
            <summary>
            The short date in a sortable format yyyy-MM-dd
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ShortDateLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ShortDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current short date string (yyyy-MM-dd) and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.SpecialFolderLayoutRenderer">
            <summary>
            System special folder path (includes My Documents, My Music, Program Files, Desktop, and more)
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.IsAppDomainFixed">
            <summary>
            Determines whether the value produced by the layout renderer
            is fixed per current app-domain.
            </summary>
            <returns><see langword="true"/></returns>
        </member>
        <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Folder">
            <summary>
            System special folder.
            </summary>
            <remarks>
            Full list of options is available at <a href="http://msdn2.microsoft.com/en-us/system.environment.specialfolder.aspx">MSDN</a>.
            The most common ones are:
            <ul>
            <li><b>ApplicationData</b> - roaming application data for current user.</li>
            <li><b>CommonApplicationData</b> - application data for all users.</li>
            <li><b>MyDocuments</b> - My Documents</li>
            <li><b>DesktopDirectory</b> - Desktop directory</li>
            <li><b>LocalApplicationData</b> - non roaming application data</li>
            <li><b>Personal</b> - user profile directory</li>
            <li><b>System</b> - System directory</li>
            </ul>
            </remarks>
        </member>
        <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.File">
            <summary>
            The name of the file to be Path.Combine()'d with the directory name.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Dir">
            <summary>
            The name of the directory to be Path.Combine()'d with the directory name.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.StackTraceFormat">
            <summary>
            Format of the ${stacktrace} layout renderer output.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.StackTraceFormat.Raw">
            <summary>
            Raw format (multiline - as returned by StackFrame.ToString() method)
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.StackTraceFormat.Flat">
            <summary>
            Flat format (class and method names displayed in a single line)
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.StackTraceFormat.DetailedFlat">
            <summary>
            Detailed flat format (method signatures displayed in a single line)
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.StackTraceLayoutRenderer">
            <summary>
            Stack trace renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.StackTraceLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.StackTraceLayoutRenderer.NeedsStackTrace">
            <summary>
            Checks whether the stack trace is requested.
            </summary>
            <returns>2 when the source file information is requested, 1 otherwise.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.StackTraceLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.Format">
            <summary>
            The output format of the stack trace.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.TopFrames">
            <summary>
            The number of top stack frames to be rendered.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.Separator">
            <summary>
            Stack frame separator string.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.TempDirLayoutRenderer">
            <summary>
            A temporary directory.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.TempDirLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.TempDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.TempDirLayoutRenderer.IsAppDomainFixed">
            <summary>
            Determines whether the value produced by the layout renderer
            is fixed per current app-domain.
            </summary>
            <returns><see langword="true"/></returns>
        </member>
        <member name="P:NLog.LayoutRenderers.TempDirLayoutRenderer.File">
            <summary>
            The name of the file to be Path.Combine()'d with the directory name.
            </summary>
        </member>
        <member name="P:NLog.LayoutRenderers.TempDirLayoutRenderer.Dir">
            <summary>
            The name of the directory to be Path.Combine()'d with the directory name.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ThreadIDLayoutRenderer">
            <summary>
            The identifier of the current thread.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadIDLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadIDLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread identifier and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ThreadNameLayoutRenderer">
            <summary>
            The name of the current thread.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadNameLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread name and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.TicksLayoutRenderer">
            <summary>
            The Ticks value of current date and time.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.TicksLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.TicksLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ticks value of current time and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.Layouts.CsvColumn">
            <summary>
            A column in the CSV
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvColumn.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:NLog.Layouts.CsvColumn"/>.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvColumn.#ctor(System.String,System.String)">
            <summary>
            Constructs a new instance of <see cref="T:NLog.Layouts.CsvColumn"/> and
            initializes Name and Layout properties.
            </summary>
        </member>
        <member name="P:NLog.Layouts.CsvColumn.Name">
            <summary>
            The name of the column.
            </summary>
        </member>
        <member name="P:NLog.Layouts.CsvColumn.Layout">
            <summary>
            The layout that should be written in the column.
            </summary>
        </member>
        <member name="P:NLog.Layouts.CsvColumn.CompiledLayout">
            <summary>
            The compiled layout that should be written in the column.
            </summary>
        </member>
        <member name="T:NLog.Layouts.CsvColumnCollection">
            <summary>
            A collection of elements of type CsvFileColumn
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvColumnCollection.#ctor">
            <summary>
            Initializes a new empty instance of the CsvFileColumnCollection class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvColumnCollection.#ctor(NLog.Layouts.CsvColumn[])">
            <summary>
            Initializes a new instance of the CsvFileColumnCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new CsvFileColumnCollection.
            </param>
        </member>
        <member name="M:NLog.Layouts.CsvColumnCollection.#ctor(NLog.Layouts.CsvColumnCollection)">
            <summary>
            Initializes a new instance of the CsvFileColumnCollection class, containing elements
            copied from another instance of CsvFileColumnCollection
            </summary>
            <param name="items">
            The CsvFileColumnCollection whose elements are to be added to the new CsvFileColumnCollection.
            </param>
        </member>
        <member name="M:NLog.Layouts.CsvColumnCollection.AddRange(NLog.Layouts.CsvColumn[])">
            <summary>
            Adds the elements of an array to the end of this CsvFileColumnCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this CsvFileColumnCollection.
            </param>
        </member>
        <member name="M:NLog.Layouts.CsvColumnCollection.AddRange(NLog.Layouts.CsvColumnCollection)">
            <summary>
            Adds the elements of another CsvFileColumnCollection to the end of this CsvFileColumnCollection.
            </summary>
            <param name="items">
            The CsvFileColumnCollection whose elements are to be added to the end of this CsvFileColumnCollection.
            </param>
        </member>
        <member name="M:NLog.Layouts.CsvColumnCollection.Add(NLog.Layouts.CsvColumn)">
            <summary>
            Adds an instance of type CsvFileColumn to the end of this CsvFileColumnCollection.
            </summary>
            <param name="value">
            The CsvFileColumn to be added to the end of this CsvFileColumnCollection.
            </param>
        </member>
        <member name="M:NLog.Layouts.CsvColumnCollection.Contains(NLog.Layouts.CsvColumn)">
            <summary>
            Determines whether a specfic CsvFileColumn value is in this CsvFileColumnCollection.
            </summary>
            <param name="value">
            The CsvFileColumn value to locate in this CsvFileColumnCollection.
            </param>
            <returns>
            true if value is found in this CsvFileColumnCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.Layouts.CsvColumnCollection.IndexOf(NLog.Layouts.CsvColumn)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this CsvFileColumnCollection
            </summary>
            <param name="value">
            The CsvFileColumn value to locate in the CsvFileColumnCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.Layouts.CsvColumnCollection.Insert(System.Int32,NLog.Layouts.CsvColumn)">
            <summary>
            Inserts an element into the CsvFileColumnCollection at the specified index
            </summary>
            <param name="index">
            The index at which the CsvFileColumn is to be inserted.
            </param>
            <param name="value">
            The CsvFileColumn to insert.
            </param>
        </member>
        <member name="M:NLog.Layouts.CsvColumnCollection.Remove(NLog.Layouts.CsvColumn)">
            <summary>
            Removes the first occurrence of a specific CsvFileColumn from this CsvFileColumnCollection.
            </summary>
            <param name="value">
            The CsvFileColumn value to remove from this CsvFileColumnCollection.
            </param>
        </member>
        <member name="M:NLog.Layouts.CsvColumnCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this CsvFileColumnCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.Layouts.CsvColumnCollection.Item(System.Int32)">
            <summary>
            Gets or sets the CsvFileColumn at the given index in this CsvFileColumnCollection.
            </summary>
        </member>
        <member name="T:NLog.Layouts.CsvColumnCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by CsvFileColumnCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvColumnCollection.Enumerator.#ctor(NLog.Layouts.CsvColumnCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.Layouts.CsvColumnCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Layouts.CsvColumnCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Layouts.CsvColumnCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Layouts.CsvColumnCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.Layouts.CsvLayout">
            <summary>
            A specialized layout that renders CSV-formatted events.
            </summary>
        </member>
        <member name="T:NLog.ILayout">
            <summary>
            Abstract interface that layouts must implement.
            </summary>
        </member>
        <member name="M:NLog.ILayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="M:NLog.ILayout.NeedsStackTrace">
            <summary>
            Returns the value indicating whether a stack trace and/or the source file
            information should be gathered during layout processing.
            </summary>
            <returns>0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace</returns>
        </member>
        <member name="M:NLog.ILayout.IsVolatile">
            <summary>
            Returns the value indicating whether this layout includes any volatile 
            layout renderers.
            </summary>
            <returns><see langword="true"/> when the layout includes at least 
            one volatile renderer, <see langword="false"/> otherwise.</returns>
            <remarks>
            Volatile layout renderers are dependent on information not contained 
            in <see cref="T:NLog.LogEventInfo"/> (such as thread-specific data, MDC data, NDC data).
            </remarks>
        </member>
        <member name="M:NLog.ILayout.Precalculate(NLog.LogEventInfo)">
            <summary>
            Precalculates the layout for the specified log event and stores the result
            in per-log event cache.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            Calling this method enables you to store the log event in a buffer
            and/or potentially evaluate it in another thread even though the 
            layout may contain thread-dependent renderer.
            </remarks>
        </member>
        <member name="M:NLog.ILayout.Initialize">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.ILayout.Close">
            <summary>
            Closes the layout.
            </summary>
        </member>
        <member name="M:NLog.ILayout.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Add this layout and all sub-layouts to the specified collection..
            </summary>
            <param name="layouts">The collection of layouts.</param>
        </member>
        <member name="T:NLog.ILayoutWithHeaderAndFooter">
            <summary>
            Layout with header and footer.
            </summary>
        </member>
        <member name="P:NLog.ILayoutWithHeaderAndFooter.Layout">
            <summary>
            Main layout (can be repeated multiple times)
            </summary>
        </member>
        <member name="P:NLog.ILayoutWithHeaderAndFooter.Header">
            <summary>
            Header
            </summary>
        </member>
        <member name="P:NLog.ILayoutWithHeaderAndFooter.Footer">
            <summary>
            Footer
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvLayout"/> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Formats the log event for write.
            </summary>
            <param name="logEvent">The log event to be formatted.</param>
            <returns>A string representation of the log event.</returns>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.Initialize">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.NeedsStackTrace">
            <summary>
            Returns the value indicating whether a stack trace and/or the source file
            information should be gathered during layout processing.
            </summary>
            <returns>0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace</returns>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.IsVolatile">
            <summary>
            Returns the value indicating whether this layout includes any volatile 
            layout renderers.
            </summary>
            <returns><see langword="true"/> when the layout includes at least 
            one volatile renderer, <see langword="false"/> otherwise.</returns>
            <remarks>
            Volatile layout renderers are dependent on information not contained 
            in <see cref="T:NLog.LogEventInfo"/> (such as thread-specific data, MDC data, NDC data).
            </remarks>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.Precalculate(NLog.LogEventInfo)">
            <summary>
            Precalculates the layout for the specified log event and stores the result
            in per-log event cache.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            Calling this method enables you to store the log event in a buffer
            and/or potentially evaluate it in another thread even though the 
            layout may contain thread-dependent renderer.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.Close">
            <summary>
            Closes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.GetHeader(NLog.LogEventInfo)">
            <summary>
            Gets the header.
            </summary>
            <param name="logEvent">The log event to be formatted.</param>
            <returns>A string representation of the log event.</returns>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Add this layout and all sub-layouts to the specified collection..
            </summary>
            <param name="layouts">The collection of layouts.</param>
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Columns">
            <summary>
            Array of parameters to be passed.
            </summary>
        </member>
        <member name="P:NLog.Layouts.CsvLayout.WithHeader">
            <summary>
            Whether CVS should include header.
            </summary>
            <value><c>true</c> if CVS should include header; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Delimiter">
            <summary>
            Column delimiter.
            </summary>
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Quoting">
            <summary>
            Quoting mode.
            </summary>
        </member>
        <member name="P:NLog.Layouts.CsvLayout.QuoteChar">
            <summary>
            Quote Character
            </summary>
        </member>
        <member name="P:NLog.Layouts.CsvLayout.CustomColumnDelimiter">
            <summary>
            Custom column delimiter value (valid when ColumnDelimiter is set to 'Custom')
            </summary>
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Layout">
            <summary>
            Main layout (can be repeated multiple times)
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Header">
            <summary>
            Header
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Footer">
            <summary>
            Footer
            </summary>
            <remarks>CSV has no footer.</remarks>
        </member>
        <member name="T:NLog.Layouts.CsvLayout.ColumnDelimiterMode">
            <summary>
            Specifies allowed column delimiters.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvLayout.ColumnDelimiterMode.Auto">
            <summary>
            Automatically detect from regional settings.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvLayout.ColumnDelimiterMode.Comma">
            <summary>
            Comma (ASCII 44)
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvLayout.ColumnDelimiterMode.Semicolon">
            <summary>
            Semicolon (ASCII 59)
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvLayout.ColumnDelimiterMode.Tab">
            <summary>
            Tab character (ASCII 9)
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvLayout.ColumnDelimiterMode.Pipe">
            <summary>
            Pipe character (ASCII 124)
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvLayout.ColumnDelimiterMode.Space">
            <summary>
            Space character (ASCII 32)
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvLayout.ColumnDelimiterMode.Custom">
            <summary>
            Custom string, specified by the CustomDelimiter
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.#ctor(NLog.Layouts.CsvLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvLayout.CsvHeaderLayout"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.NeedsStackTrace">
            <summary>
            Returns the value indicating whether a stack trace and/or the source file
            information should be gathered during layout processing.
            </summary>
            <returns>
            0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace
            </returns>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.IsVolatile">
            <summary>
            Returns the value indicating whether this layout includes any volatile
            layout renderers.
            </summary>
            <returns>
            	<see langword="true"/> when the layout includes at least
            one volatile renderer, <see langword="false"/> otherwise.
            </returns>
            <remarks>
            Volatile layout renderers are dependent on information not contained
            in <see cref="T:NLog.LogEventInfo"/> (such as thread-specific data, MDC data, NDC data).
            </remarks>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.Precalculate(NLog.LogEventInfo)">
            <summary>
            Precalculates the layout for the specified log event and stores the result
            in per-log event cache.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            Calling this method enables you to store the log event in a buffer
            and/or potentially evaluate it in another thread even though the
            layout may contain thread-dependent renderer.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.Initialize">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.Close">
            <summary>
            Closes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Add this layout and all sub-layouts to the specified collection..
            </summary>
            <param name="layouts">The collection of layouts.</param>
        </member>
        <member name="T:NLog.Layouts.CsvQuotingMode">
            <summary>
            Specifies allowes CSV quoting modes.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvQuotingMode.All">
            <summary>
            Quote all column.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvQuotingMode.Nothing">
            <summary>
            Quote nothing.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvQuotingMode.Auto">
            <summary>
            Quote only whose values contain the quote symbol or
            the separator.
            </summary>
        </member>
        <member name="T:NLog.Layouts.LayoutWithHeaderAndFooter">
            <summary>
            A specialized layout that supports header and footer.
            </summary>
        </member>
        <member name="M:NLog.Layouts.LayoutWithHeaderAndFooter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.LayoutWithHeaderAndFooter"/> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.LayoutWithHeaderAndFooter.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="M:NLog.Layouts.LayoutWithHeaderAndFooter.NeedsStackTrace">
            <summary>
            Returns the value indicating whether a stack trace and/or the source file
            information should be gathered during layout processing.
            </summary>
            <returns>
            0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace
            </returns>
        </member>
        <member name="M:NLog.Layouts.LayoutWithHeaderAndFooter.IsVolatile">
            <summary>
            Returns the value indicating whether this layout includes any volatile
            layout renderers.
            </summary>
            <returns>
            	<see langword="true"/> when the layout includes at least
            one volatile renderer, <see langword="false"/> otherwise.
            </returns>
            <remarks>
            Volatile layout renderers are dependent on information not contained
            in <see cref="T:NLog.LogEventInfo"/> (such as thread-specific data, MDC data, NDC data).
            </remarks>
        </member>
        <member name="M:NLog.Layouts.LayoutWithHeaderAndFooter.Precalculate(NLog.LogEventInfo)">
            <summary>
            Precalculates the layout for the specified log event and stores the result
            in per-log event cache.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            Calling this method enables you to store the log event in a buffer
            and/or potentially evaluate it in another thread even though the
            layout may contain thread-dependent renderer.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.LayoutWithHeaderAndFooter.Initialize">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.LayoutWithHeaderAndFooter.Close">
            <summary>
            Closes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.LayoutWithHeaderAndFooter.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Add this layout and all sub-layouts to the specified collection..
            </summary>
            <param name="layouts">The collection of layouts.</param>
        </member>
        <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Layout">
            <summary>
            Main layout (can be repeated multiple times)
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Header">
            <summary>
            Header
            </summary>
            <value></value>
        </member>
        <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Footer">
            <summary>
            Footer
            </summary>
            <value></value>
        </member>
        <member name="T:NLog.Layouts.Log4JXmlEventLayout">
            <summary>
            A specialized layout that renders Log4j-compatible XML events.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Log4JXmlEventLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="M:NLog.Layouts.Log4JXmlEventLayout.NeedsStackTrace">
            <summary>
            Returns the value indicating whether a stack trace and/or the source file
            information should be gathered during layout processing.
            </summary>
            <returns>0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace</returns>
        </member>
        <member name="M:NLog.Layouts.Log4JXmlEventLayout.IsVolatile">
            <summary>
            Returns the value indicating whether this layout includes any volatile 
            layout renderers.
            </summary>
            <returns><see langword="true"/> when the layout includes at least 
            one volatile renderer, <see langword="false"/> otherwise.</returns>
            <remarks>
            Volatile layout renderers are dependent on information not contained 
            in <see cref="T:NLog.LogEventInfo"/> (such as thread-specific data, MDC data, NDC data).
            </remarks>
        </member>
        <member name="M:NLog.Layouts.Log4JXmlEventLayout.Precalculate(NLog.LogEventInfo)">
            <summary>
            Precalculates the layout for the specified log event and stores the result
            in per-log event cache.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            Calling this method enables you to store the log event in a buffer
            and/or potentially evaluate it in another thread even though the 
            layout may contain thread-dependent renderer.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.Log4JXmlEventLayout.Initialize">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Log4JXmlEventLayout.Close">
            <summary>
            Closes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Log4JXmlEventLayout.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Add this layout and all sub-layouts to the specified collection..
            </summary>
            <param name="layouts">The collection of layouts.</param>
        </member>
        <member name="P:NLog.Layouts.Log4JXmlEventLayout.Renderer">
            <summary>
            Returns the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer"/> instance that renders log events.
            </summary>
        </member>
        <member name="T:NLog.Targets.Compound.CompoundTargetBase">
            <summary>
            A base class for targets which wrap other (multiple) targets
            and provide various forms of target routing.
            </summary>
        </member>
        <member name="T:NLog.Target">
            <summary>
            Represents logging target.
            </summary>
        </member>
        <member name="M:NLog.Target.#ctor">
            <summary>
            Creates a new instance of the logging target and initializes
            default layout.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code>
            </remarks>
        </member>
        <member name="M:NLog.Target.GetLayouts">
            <summary>
            Gets the collection of <see cref="T:NLog.Layout"/> objects that are used
            by this target.
            </summary>
            <returns>A <see cref="T:NLog.LayoutCollection"/> object which is a typed collection
            of <see cref="T:NLog.Layout"/> objects. The collection is cached and accumulated 
            by calling <see cref="M:NLog.Target.PopulateLayouts(NLog.LayoutCollection)"/>.</returns>
        </member>
        <member name="M:NLog.Target.InvalidateLayouts">
            <summary>
            Invalidates the collection of layouts cached by <see cref="M:NLog.Target.GetLayouts"/>.
            </summary>
        </member>
        <member name="M:NLog.Target.Write(NLog.LogEventInfo)">
            <summary>
            Writes logging event to the log target. Must be overridden in inheriting
            classes.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="M:NLog.Target.Write(NLog.LogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Append" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="M:NLog.Target.NeedsStackTrace">
            <summary>
            Determines whether stack trace information should be gathered
            during log event processing. By default it calls <see cref="M:NLog.Layout.NeedsStackTrace"/> on
            the result of <see cref="M:NLog.Target.GetLayouts"/>.
            </summary>
            <returns>0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace</returns>
        </member>
        <member name="M:NLog.Target.ToString">
            <summary>
            Returns the text representation of the object. Used for diagnostics.
            </summary>
            <returns>A string that describes the target.</returns>
        </member>
        <member name="M:NLog.Target.Flush">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
        </member>
        <member name="M:NLog.Target.Flush(System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.Target.Flush(System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.Target.Close">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)">
            <summary>
            Calls the <see cref="M:NLog.Layout.Precalculate(NLog.LogEventInfo)"/> on each volatile layout
            used by this target.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            A layout is volatile if it contains at least one <see cref="T:NLog.Layout"/> for 
            which <see cref="M:NLog.LayoutRenderer.IsVolatile"/> returns true.
            </remarks>
        </member>
        <member name="M:NLog.Target.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this target to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="M:NLog.Target.Initialize">
            <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
        </member>
        <member name="P:NLog.Target.Name">
            <summary>
            The name of the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.Compound.CompoundTargetBase.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Compound.CompoundTargetBase"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Compound.CompoundTargetBase.#ctor(NLog.Target[])">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Compound.CompoundTargetBase"/> and
            initializes the <see cref="P:NLog.Targets.Compound.CompoundTargetBase.Targets"/> collection to the provided
            list of <see cref="T:NLog.Target"/> objects.
            </summary>
        </member>
        <member name="M:NLog.Targets.Compound.CompoundTargetBase.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this target and sub-targets.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="M:NLog.Targets.Compound.CompoundTargetBase.Initialize">
            <summary>
            Initializes the target by initializing all sub-targets.
            </summary>
        </member>
        <member name="M:NLog.Targets.Compound.CompoundTargetBase.Close">
            <summary>
            Closes the target by closing all sub-targets.
            </summary>
        </member>
        <member name="P:NLog.Targets.Compound.CompoundTargetBase.Targets">
            <summary>
            A collection of targets managed by this compound target.
            </summary>
        </member>
        <member name="T:NLog.Targets.Compound.FallbackTarget">
            <summary>
            A compound target that provides fallback-on-error functionality.
            </summary>
            <example>
            <p>This example causes the messages to be written to server1, 
            and if it fails, messages go to server2.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/FallbackGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/FallbackGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Compound.FallbackTarget.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Compound.FallbackTarget"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Compound.FallbackTarget.#ctor(NLog.Target[])">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Compound.FallbackTarget"/> and sets
            the targets to be used.
            </summary>
        </member>
        <member name="M:NLog.Targets.Compound.FallbackTarget.Write(NLog.LogEventInfo)">
            <summary>
            Forwards the log event to the sub-targets until one of them succeeds.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            The method remembers the last-known-successful target 
            and starts the iteration from it.
            If <see cref="P:NLog.Targets.Compound.FallbackTarget.ReturnToFirstOnSuccess"/> is set, the method
            resets the target to the first target 
            stored in <see cref="N:NLog.Targets"/>.
            </remarks>
        </member>
        <member name="P:NLog.Targets.Compound.FallbackTarget.ReturnToFirstOnSuccess">
            <summary>
            Whether to return to the first target after any successful write.
            </summary>
        </member>
        <member name="T:NLog.Targets.Compound.RandomizeTarget">
            <summary>
            A compound target writes to a randomly-chosen target among the sub-targets.
            </summary>
            <example>
            <p>This example causes the messages to be written to either file1.txt or file2.txt 
            chosen randomly on a per-message basis.
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/RandomizeGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/RandomizeGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Compound.RandomizeTarget.#ctor">
            <summary>
            Creates an instance of <see cref="T:NLog.Targets.Compound.RandomizeTarget"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Compound.RandomizeTarget.#ctor(NLog.Target[])">
            <summary>
            Creates an instance of <see cref="T:NLog.Targets.Compound.RandomizeTarget"/> and
            initializes the <see cref="N:NLog.Targets"/> collection with the
            specified list of <see cref="T:NLog.Target"/> objects.
            </summary>
        </member>
        <member name="M:NLog.Targets.Compound.RandomizeTarget.Write(NLog.LogEventInfo)">
            <summary>
            Forwards the log event to one of the sub-targets. 
            The sub-target is randomly chosen.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="T:NLog.Targets.Compound.RoundRobinTarget">
            <summary>
            A compound target that forwards writes to the sub-targets in a
            round-robin fashion.
            </summary>
            <example>
            <p>This example causes the messages to be written to either file1.txt or file2.txt.
            Each odd message is written to file2.txt, each even message goes to file1.txt.
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/RoundRobinGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/RoundRobinGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Compound.RoundRobinTarget.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Compound.RoundRobinTarget"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Compound.RoundRobinTarget.#ctor(NLog.Target[])">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Compound.RoundRobinTarget"/> and initializes
            the <see cref="N:NLog.Targets"/> collection to the provided
            array of <see cref="T:NLog.Target"/> objects.
            </summary>
        </member>
        <member name="M:NLog.Targets.Compound.RoundRobinTarget.Write(NLog.LogEventInfo)">
            <summary>
            Forwards the write to one of the targets from 
            the <see cref="N:NLog.Targets"/> collection.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            The writes are routed in a round-robin fashion.
            The first log event goes to the first target, the second
            one goes to the second target and so on looping to the
            first target when there are no more targets available.
            In general request N goes to Targets[N % Targets.Count].
            </remarks>
        </member>
        <member name="T:NLog.Targets.Compound.SplitTarget">
            <summary>
            A compound target that writes logging events to all attached
            sub-targets.
            </summary>
            <example>
            <p>This example causes the messages to be written to both file1.txt or file2.txt 
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/SplitGroup/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/SplitGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Compound.SplitTarget.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Compound.SplitTarget"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Compound.SplitTarget.#ctor(NLog.Target[])">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Compound.SplitTarget"/> and
            initializes the <see cref="N:NLog.Targets"/> collection to the
            provided array of <see cref="T:NLog.Target"/> objects.
            </summary>
        </member>
        <member name="M:NLog.Targets.Compound.SplitTarget.Write(NLog.LogEventInfo)">
            <summary>
            Forwards the specified log event to all sub-targets.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper">
            <summary>
            A target that buffers log events for the duration of 
            the ASP.NET Request and sends them down to the wrapped target
            as soon as the request ends.
            </summary>
            <remarks>
            <p>
            Typically this target is used in cooperation with PostFilteringTargetWrapper
            to provide verbose logging for failing requests and normal or no logging for
            successful requests. We need to make the decision of the final filtering rule
            to apply after all logs for a page have been generated.
            </p>
            <p>
            To use this target, you need to add an entry in the httpModules section of
            web.config:
            </p>
            <code lang="XML">
            <![CDATA[<?xml version="1.0" ?>
            <configuration>
              <system.web>
                <httpModules>
                  <add name="NLog" type="NLog.Web.NLogHttpModule, NLog"/>
                </httpModules>
              </system.web>
            </configuration>
            ]]>
            </code>
            </remarks>
            <example>
            <p>To set up the ASP.NET Buffering target wrapper <a href="config.html">configuration file</a>, put
            the following in <c>web.nlog</c> file in your web application directory (this assumes
            that PostFilteringWrapper is used to provide the filtering and actual logs go to
            a file).
            </p>
            <code lang="XML" src="examples/targets/Configuration File/ASPNetBufferingWrapper/web.nlog" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To configure the target programmatically, put the following
            piece of code in your <c>Application_OnStart()</c> handler in Global.asax.cs 
            or some other place that gets executed at the very beginning of your code:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/ASPNetBufferingWrapper/Global.asax.cs" />
            <p>
            Fully working C# project can be found in the <c>Examples/Targets/Configuration API/ASPNetBufferingWrapper</c>
            directory along with usage instructions.
            </p>
            </example>
        </member>
        <member name="T:NLog.Targets.Wrappers.WrapperTargetBase">
            <summary>
            Base class for targets wrap other (single) targets.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this target to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.Close">
            <summary>
            Closes the target by forwarding the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/> object.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.NeedsStackTrace">
            <summary>
            Forwards the call to <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/>.NeedsStackTrace().
            </summary>
            <returns>The value of forwarded call</returns>
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.Initialize">
            <summary>
            Initializes the target by forwarding the call 
            to <see cref="M:NLog.Target.Initialize"/> to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.ToString">
            <summary>
            Returns the text representation of the object. Used for diagnostics.
            </summary>
            <returns>A string that describes the target.</returns>
        </member>
        <member name="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget">
            <summary>
            The target that this target wraps.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper"/> and initializes <see cref="P:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper.BufferSize"/> to 100.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper.#ctor(NLog.Target)">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper"/>, initializes <see cref="P:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper.BufferSize"/> to 100 and
            sets the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/> to the specified value.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper.#ctor(NLog.Target,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper"/>, initializes <see cref="P:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper.BufferSize"/> and
            the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/> to the specified values.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper.Initialize">
            <summary>
            Initializes the target by hooking up the NLogHttpModule BeginRequest and EndRequest events.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper.Write(NLog.LogEventInfo)">
            <summary>
            Adds the specified log event to the buffer.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper.Close">
            <summary>
            Closes the target by flushing pending events in the buffer (if any).
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper.BufferSize">
            <summary>
            The number of log events to be buffered.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper.GrowBufferAsNeeded">
            <summary>
            Grow the buffer when it gets full.
            </summary>
            <remarks>
            true causes the buffer to expand until <see cref="P:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper.BufferGrowLimit"/> is hit,
            false causes the buffer to never expand and lose the earliest entries in case of overflow.
            </remarks>
        </member>
        <member name="P:NLog.Targets.Wrappers.ASPNetBufferingTargetWrapper.BufferGrowLimit">
            <summary>
            The maximum number of log events that the buffer can keep.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction">
            <summary>
            The action to be taken when the queue overflows
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Grow">
            <summary>
            Grow the queue.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Discard">
            <summary>
            Discard the overflowing item.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Block">
            <summary>
            Block until there's more room in the queue.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AsyncTargetWrapper">
            <summary>
            A target wrapper that provides asynchronous, buffered execution of target writes.
            </summary>
            <remarks>
            <p>
            Asynchronous target wrapper allows the logger code to execute more quickly, by queueing
            messages and processing them in a separate thread. You should wrap targets
            that spend a non-trivial amount of time in their Write() method with asynchronous
            target to speed up logging.
            </p>
            <p>
            Because asynchronous logging is quite a common scenario, NLog supports a
            shorthand notation for wrapping all targets with AsyncWrapper. Just add async="true" to
            the &lt;targets/&gt; element in the configuration file.
            </p>
            <code lang="XML">
            <![CDATA[
            <targets async="true">
               ... your targets go here ...
            </targets>
            ]]></code>
            </remarks>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/AsyncWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/AsyncWrapper/Wrapping File/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(NLog.Target)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper"/>
            which wraps the specified target.
            </summary>
            <param name="wrappedTarget">The target to be wrapped.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(NLog.Target,System.Int32,NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper"/>
            which wraps the specified target.
            </summary>
            <param name="wrappedTarget">The target to be wrapped.</param>
            <param name="queueLimit">Maximum number of requests in the queue.</param>
            <param name="overflowAction">The action to be taken when the queue overflows.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.Initialize">
            <summary>
            Initializes the target by starting the lazy writer thread.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.Close">
            <summary>
            Closes the target by stopping the lazy writer thread.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.Write(NLog.LogEventInfo)">
            <summary>
            Adds the log event to asynchronous queue to be processed by 
            the lazy writer thread.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            The <see cref="M:NLog.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)"/> is called
            to ensure that the log event can be processed in another thread.
            </remarks>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.StartLazyWriterTimer">
            <summary>
            Starts the lazy writer thread which periodically writes
            queued log messages.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.StopLazyWriterThread">
            <summary>
            Starts the lazy writer thread.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.Flush(System.TimeSpan)">
            <summary>
            Waits for the lazy writer thread to finish writing messages.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.BatchSize">
            <summary>
            The number of log events that should be processed in a batch
            by the lazy writer thread.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.TimeToSleepBetweenBatches">
            <summary>
            The time in milliseconds to sleep between batches.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.RequestQueue">
            <summary>
            The queue of lazy writer thread requests.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.OverflowAction">
            <summary>
            The action to be taken when the lazy writer thread request queue count
            exceeds the set limit.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.QueueLimit">
            <summary>
            The limit on the number of requests in the lazy writer thread request queue.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AsyncTargetWrapper.AsyncRequestQueue">
            <summary>
            Asynchronous request queue
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.AsyncRequestQueue.#ctor(System.Int32,NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper.AsyncRequestQueue"/> and
            sets the request limit and overflow action.
            </summary>
            <param name="requestLimit">Request limit.</param>
            <param name="overflowAction">The overflow action.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.AsyncRequestQueue.Enqueue(System.Object)">
            <summary>
            Enqueues another item. If the queue is overflown the appropriate
            action is taken as specified by <see cref="P:NLog.Targets.Wrappers.AsyncTargetWrapper.AsyncRequestQueue.OnOverflow"/>.
            </summary>
            <param name="o">The item to be queued.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.AsyncRequestQueue.DequeueBatch(System.Int32)">
            <summary>
            Dequeues a maximum of <c>count</c> items from the queue
            and adds returns the <see cref="T:System.Collections.ArrayList"/> containing them.
            </summary>
            <param name="count">Maximum number of items to be dequeued.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.AsyncRequestQueue.BatchProcessed(System.Collections.ArrayList)">
            <summary>
            Notifies the queue that the request batch has been processed.
            </summary>
            <param name="batch">The batch.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.AsyncRequestQueue.Clear">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.AsyncRequestQueue.RequestLimit">
            <summary>
            The request limit.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.AsyncRequestQueue.OnOverflow">
            <summary>
            Action to be taken when there's no more room in
            the queue and another request is enqueued.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.AsyncRequestQueue.RequestCount">
            <summary>
            Number of requests currently in the queue.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.AsyncRequestQueue.UnprocessedRequestCount">
            <summary>
            Number of requests currently being processed (in the queue + batched)
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper">
            <summary>
            A target wrapper that causes a flush after each write on a wrapped target.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/AutoFlushWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/AutoFlushWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor(NLog.Target)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper"/> 
            and initializes the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/> to the specified <see cref="T:NLog.Target"/> value.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.Write(NLog.LogEventInfo)">
            <summary>
            Forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/>.Write()
            and calls <see cref="M:NLog.Target.Flush"/> on it.
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="T:NLog.Targets.Wrappers.BufferingTargetWrapper">
            <summary>
            A target that buffers log events and sends them in batches to the wrapped target.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/BufferingWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/BufferingWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper"/> and initializes <see cref="P:NLog.Targets.Wrappers.BufferingTargetWrapper.BufferSize"/> to 100.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Target)">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper"/>, initializes <see cref="P:NLog.Targets.Wrappers.BufferingTargetWrapper.BufferSize"/> to 100 and
            sets the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/> to the specified value.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Target,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper"/>, initializes <see cref="P:NLog.Targets.Wrappers.BufferingTargetWrapper.BufferSize"/> and
            the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/> to the specified values.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Target,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper"/>, 
            initializes <see cref="P:NLog.Targets.Wrappers.BufferingTargetWrapper.BufferSize"/>, <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/> 
            and <see cref="P:NLog.Targets.Wrappers.BufferingTargetWrapper.FlushTimeout"/> to the specified values.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.Initialize">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.Write(NLog.LogEventInfo)">
            <summary>
            Adds the specified log event to the buffer and flushes
            the buffer in case the buffer gets full.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.Flush(System.TimeSpan)">
            <summary>
            Flushes pending events in the buffer (if any).
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.Close">
            <summary>
            Closes the target by flushing pending events in the buffer (if any).
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.BufferSize">
            <summary>
            Number of log events to be buffered.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.FlushTimeout">
            <summary>
            Flush the contents of buffer if there's no write in the specified period of time
            (milliseconds). Use -1 to disable timed flushes.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.FilteringRule">
            <summary>
            Filtering rule for <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRule.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.FilteringRule"/>.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringRule.Exists">
            <summary>
            Condition to be tested.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringRule.Filter">
            <summary>
            Resulting filter to be applied when the condition matches.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringRule.FilterCondition">
            <summary>
            Parsed Filter condition.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringRule.ExistsCondition">
            <summary>
            Parsed Exists condition.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.FilteringRuleCollection">
            <summary>
            A collection of elements of type FilteringRule
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRuleCollection.#ctor">
            <summary>
            Initializes a new empty instance of the FilteringRuleCollection class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRuleCollection.#ctor(NLog.Targets.Wrappers.FilteringRule[])">
            <summary>
            Initializes a new instance of the FilteringRuleCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new FilteringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRuleCollection.#ctor(NLog.Targets.Wrappers.FilteringRuleCollection)">
            <summary>
            Initializes a new instance of the FilteringRuleCollection class, containing elements
            copied from another instance of FilteringRuleCollection
            </summary>
            <param name="items">
            The FilteringRuleCollection whose elements are to be added to the new FilteringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRuleCollection.AddRange(NLog.Targets.Wrappers.FilteringRule[])">
            <summary>
            Adds the elements of an array to the end of this FilteringRuleCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this FilteringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRuleCollection.AddRange(NLog.Targets.Wrappers.FilteringRuleCollection)">
            <summary>
            Adds the elements of another FilteringRuleCollection to the end of this FilteringRuleCollection.
            </summary>
            <param name="items">
            The FilteringRuleCollection whose elements are to be added to the end of this FilteringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRuleCollection.Add(NLog.Targets.Wrappers.FilteringRule)">
            <summary>
            Adds an instance of type FilteringRule to the end of this FilteringRuleCollection.
            </summary>
            <param name="value">
            The FilteringRule to be added to the end of this FilteringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRuleCollection.Contains(NLog.Targets.Wrappers.FilteringRule)">
            <summary>
            Determines whether a specfic FilteringRule value is in this FilteringRuleCollection.
            </summary>
            <param name="value">
            The FilteringRule value to locate in this FilteringRuleCollection.
            </param>
            <returns>
            true if value is found in this FilteringRuleCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRuleCollection.IndexOf(NLog.Targets.Wrappers.FilteringRule)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this FilteringRuleCollection
            </summary>
            <param name="value">
            The FilteringRule value to locate in the FilteringRuleCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRuleCollection.Insert(System.Int32,NLog.Targets.Wrappers.FilteringRule)">
            <summary>
            Inserts an element into the FilteringRuleCollection at the specified index
            </summary>
            <param name="index">
            The index at which the FilteringRule is to be inserted.
            </param>
            <param name="value">
            The FilteringRule to insert.
            </param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRuleCollection.Remove(NLog.Targets.Wrappers.FilteringRule)">
            <summary>
            Removes the first occurrence of a specific FilteringRule from this FilteringRuleCollection.
            </summary>
            <param name="value">
            The FilteringRule value to remove from this FilteringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRuleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this FilteringRuleCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringRuleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the FilteringRule at the given index in this FilteringRuleCollection.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.FilteringRuleCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by FilteringRuleCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRuleCollection.Enumerator.#ctor(NLog.Targets.Wrappers.FilteringRuleCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRuleCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRuleCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringRuleCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringRuleCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.FilteringTargetWrapper">
            <summary>
            A target wrapper that filters log entries based on a condition.
            </summary>
            <example>
            <p>This example causes the messages not contains the string '1' to be ignored.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/FilteringWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/FilteringWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor(NLog.Target,System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper"/> and 
            initializes the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/> and
            <see cref="P:NLog.Targets.Wrappers.FilteringTargetWrapper.Condition"/> properties.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.Write(NLog.LogEventInfo)">
            <summary>
            Checks the condition against the passed log event.
            If the condition is met, the log event is forwarded to
            the wrapped target.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this target to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringTargetWrapper.Condition">
            <summary>
            Condition expression. Log events who meet this condition will be forwarded 
            to the wrapped target.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper">
            <summary>
            A target wrapper that impersonates another user for the duration of the write.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor(NLog.Target)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper"/> 
            and initializes the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/> to the specified <see cref="T:NLog.Target"/> value.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Write(NLog.LogEventInfo)">
            <summary>
            Changes the security context, forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/>.Write()
            and switches the context back to original.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Write(NLog.LogEventInfo[])">
            <summary>
            Changes the security context, forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/>.Write()
            and switches the context back to original.
            </summary>
            <param name="logEvents">Log events.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Initialize">
            <summary>
            Initializes the impersonation context.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Close">
            <summary>
            Closes the impersonation context.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Username">
            <summary>
            Username to change context to
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Domain">
            <summary>
            Windows domain name to change context to.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogonType">
            <summary>
            Logon Type.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogonProvider">
            <summary>
            Logon Provider.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ImpersonationLevel">
            <summary>
            Impersonation level.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.RevertToSelf">
            <summary>
            Revert to the credentials of the process instead of impersonating another user.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.SecurityImpersonationLevel">
            <summary>
            Impersonation level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.SecurityImpersonationLevel.Anonymous">
            <summary>
            Anonymous
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.SecurityImpersonationLevel.Identification">
            <summary>
            Identification
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.SecurityImpersonationLevel.Impersonation">
            <summary>
            Impersonation
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.SecurityImpersonationLevel.Delegation">
            <summary>
            Delegation
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.SecurityLogonType">
            <summary>
            Logon type.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.SecurityLogonType.Interactive">
            <summary>
            Interactive Logon
            </summary>
            <remarks>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on  
            by a terminal server, remote shell, or similar process.
            This logon type has the additional expense of caching logon information for disconnected operations;
            therefore, it is inappropriate for some client/server applications,
            such as a mail server.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.SecurityLogonType.Network">
            <summary>
            Network Logon
            </summary>
            <remarks>
            This logon type is intended for high performance servers to authenticate plaintext passwords.
            The LogonUser function does not cache credentials for this logon type.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.SecurityLogonType.Batch">
            <summary>
            Batch Logon
            </summary>
            <remarks>
            This logon type is intended for batch servers, where processes may be executing on behalf of a user without
            their direct intervention. This type is also for higher performance servers that process many plaintext
            authentication attempts at a time, such as mail or Web servers.
            The LogonUser function does not cache credentials for this logon type.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.SecurityLogonType.Service">
            <summary>
            Logon as a Service
            </summary>
            <remarks>
            Indicates a service-type logon. The account provided must have the service privilege enabled.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.SecurityLogonType.NetworkClearText">
            <summary>
            Network Clear Text Logon
            </summary>
            <remarks>
            This logon type preserves the name and password in the authentication package, which allows the server to make
            connections to other network servers while impersonating the client. A server can accept plaintext credentials
            from a client, call LogonUser, verify that the user can access the system across the network, and still
            communicate with other servers.
            NOTE: Windows NT:  This value is not supported.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.SecurityLogonType.NewCredentials">
            <summary>
            New Network Credentials
            </summary>
            <remarks>
            This logon type allows the caller to clone its current token and specify new credentials for outbound connections.
            The new logon session has the same local identifier but uses different credentials for other network connections.
            NOTE: This logon type is supported only by the LOGON32_PROVIDER_WINNT50 logon provider.
            NOTE: Windows NT:  This value is not supported.
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogonProviderType">
            <summary>
            Logon provider.
            
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogonProviderType.Default">
            <summary>
            Use the standard logon provider for the system.
            </summary>
            <remarks>
            The default security provider is negotiate, unless you pass NULL for the domain name and the user name
            is not in UPN format. In this case, the default provider is NTLM.
            NOTE: Windows 2000/NT:   The default security provider is NTLM.
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper">
            <summary>
            A target wrapper that filters buffered log entries based on a set of conditions
            that are evaluated on all events.
            </summary>
            <remarks>
            PostFilteringWrapper must be used with some type of buffering target or wrapper, such as
            AsyncTargetWrapper, BufferingWrapper or ASPNetBufferingWrapper.
            </remarks>
            <example>
            <p>
            This example works like this. If there are no Warn,Error or Fatal messages in the buffer
            only Info messages are written to the file, but if there are any warnings or errors, 
            the output includes detailed trace (levels &gt;= Debug). You can plug in a different type
            of buffering wrapper (such as ASPNetBufferingWrapper) to achieve different
            functionality.
            </p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/PostFilteringWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/PostFilteringWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.Write(NLog.LogEventInfo[])">
            <summary>
            Evaluates all filtering rules to find the first one that matches.
            The matching rule determines the filtering condition to be applied
            to all items in a buffer. If no condition matches, default filter
            is applied to the array of log events.
            </summary>
            <param name="logEvents">Array of log events to be post-filtered.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.Write(NLog.LogEventInfo)">
            <summary>
            Processes a single log event. Not very useful for this post-filtering
            wrapper.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this target to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.PostFilteringTargetWrapper.DefaultFilter">
            <summary>
            Default filter to be applied when no specific rule matches.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.PostFilteringTargetWrapper.Rules">
            <summary>
            Collection of filtering rules. The rules are processed top-down
            and the first rule that matches determines the filtering condition to
            be applied to log events.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.RepeatingTargetWrapper">
            <summary>
            A target wrapper that repeats each log event the specified number of times.
            </summary>
            <example>
            <p>This example causes each log message to be repeated 3 times.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/RepeatingWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/RepeatingWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor(NLog.Target,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper"/>,
            initializes the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/> to the specified <see cref="T:NLog.Target"/> value and
            sets the <see cref="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount"/>,
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.Write(NLog.LogEventInfo)">
            <summary>
            Forwards the log message to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/> by calling the <see cref="M:NLog.Target.Write(NLog.LogEventInfo)"/> method <see cref="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount"/> times.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.Write(NLog.LogEventInfo[])">
            <summary>
            Forwards the array of log events to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/> by calling the <see cref="M:NLog.Target.Write(NLog.LogEventInfo[])"/> method <see cref="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount"/> times.
            </summary>
            <param name="logEvents">The array of log events.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount">
            <summary>
            The number of times to repeat each log message.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.RetryingTargetWrapper">
            <summary>
            A target wrapper that causes retries on wrapped target errors.
            </summary>
            <example>
            <p>This example causes each write attempt to be repeated 3 times, 
            sleeping 1 second between attempts if first one fails.</p>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/RetryingWrapper/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/RetryingWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor(NLog.Target,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper"/> and 
            initializes the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget"/>
            <see cref="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryCount"/> and <see cref="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryDelayMilliseconds"/>
            properties.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified log event to the wrapped target, retrying and pausing in case of an error.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryCount">
            <summary>
            Number of retries that should be attempted on the wrapped target in case of a failure.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryDelayMilliseconds">
            <summary>
            The time to wait between retries in milliseconds.
            </summary>
        </member>
        <member name="T:NLog.Targets.ASPNetTraceTarget">
            <summary>
            Writes logging messages to the ASP.NET trace.
            </summary>
            <example>
            <p>To set up the ASP.NET Trace target in the <a href="config.html">configuration file</a>, put
            the following in <c>web.nlog</c> file in your web application directory.
            </p>
            <code lang="XML" src="examples/targets/Configuration File/ASPNetTrace/web.nlog" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To configure the target programmatically, put the following
            piece of code in your <c>Application_OnStart()</c> handler in Global.asax.cs 
            or some other place that gets executed at the very beginning of your code:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/ASPNetTrace/Global.asax.cs" />
            <p>
            Fully working C# project can be found in the <c>Examples/Targets/Configuration API/ASPNetTrace</c>
            directory along with usage instructions.
            </p>
            Resulting log entries can be viewed by navigating to http://server/path/Trace.axd.
            <br/>
            <b>HTTP Request List:</b><br/>
            <img src="examples/targets/Screenshots/ASPNetTrace/ASPNetTraceOutput1.gif" />
            <p/>
            <b>HTTP Request Details:</b>
            <br/>
            <img src="examples/targets/Screenshots/ASPNetTrace/ASPNetTraceOutput2.gif" />
            <p/>
            </example>
        </member>
        <member name="T:NLog.TargetWithLayout">
            <summary>
            Represents target that supports string formatting using layouts.
            </summary>
        </member>
        <member name="M:NLog.TargetWithLayout.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.TargetWithLayout"/>
            </summary>
        </member>
        <member name="M:NLog.TargetWithLayout.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this target to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="M:NLog.TargetWithLayout.Initialize">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="P:NLog.TargetWithLayout.Layout">
            <summary>
            The text to be rendered.
            </summary>
        </member>
        <member name="P:NLog.TargetWithLayout.CompiledLayout">
            <summary>
            The compiled layout, can be an instance of <see cref="P:NLog.TargetWithLayout.Layout"/> or other layout type.
            </summary>
        </member>
        <member name="M:NLog.Targets.ASPNetTraceTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the ASP.NET Trace facility. Log entries
            can then be viewed by navigating to http://server/path/Trace.axd
            If the log level is greater than or equal to <see cref="F:NLog.LogLevel.Warn"/> it uses the
            <see cref="M:System.Web.TraceContext.Warn(System.String,System.String)"/> method, otherwise it uses
            <see cref="M:System.Web.TraceContext.Write(System.String,System.String)"/> method.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.ChainsawTarget">
            <summary>
            Sends logging messages to the remote instance of Chainsaw application from log4j. 
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/Chainsaw/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/Chainsaw/Simple/Example.cs" />
            <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
            </example>
        </member>
        <member name="T:NLog.Targets.NLogViewerTarget">
            <summary>
            Sends logging messages to the remote instance of NLog Viewer. 
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/NLogViewer/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/NLogViewer/Simple/Example.cs" />
            <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
            </example>
        </member>
        <member name="T:NLog.Targets.NetworkTarget">
            <summary>
            Sends logging messages over the network.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/Network/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/Network/Simple/Example.cs" />
            <p>
            To print the results, use any application that's able to receive messages over
            TCP or UDP. <a href="http://m.nu/program/util/netcat/netcat.html">NetCat</a> is
            a simple but very powerful command-line tool that can be used for that. This image
            demonstrates the NetCat tool receiving log messages from Network target.
            </p>
            <img src="examples/targets/Screenshots/Network/Output.gif" />
            <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
            <p>
            There are two specialized versions of the Network target: <a href="target.Chainsaw.html">Chainsaw</a>
            and <a href="target.NLogViewer.html">NLogViewer</a> which write to instances of Chainsaw log4j viewer
            or NLogViewer application respectively.
            </p>
            </example>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.NetworkSend(System.String,System.Byte[])">
            <summary>
            Sends the provided text to the specified address.
            </summary>
            <param name="address">The address. Can be tcp://host:port, udp://host:port, http://host:port</param>
            <param name="bytes">The bytes to be sent.</param>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.Flush(System.TimeSpan)">
            <summary>
            Flushes any buffers.
            </summary>
            <param name="timeout">Flush timeout.</param>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.Close">
            <summary>
            Closes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this target to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.Write(NLog.LogEventInfo)">
            <summary>
            Sends the 
            rendered logging event over the network optionally concatenating it with a newline character.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.GetBytesToWrite(NLog.LogEventInfo)">
            <summary>
            Gets the bytes to be written.
            </summary>
            <param name="logEvent">Log event</param>
            <returns>Byte array.</returns>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.Address">
            <summary>
            The network address. Can be tcp://host:port or udp://host:port
            </summary>
            <remarks>
            For HTTP Support use the WebService target.
            </remarks>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.AddressLayout">
            <summary>
            The network address. Can be tcp://host:port, udp://host:port, http://host:port or https://host:port
            </summary>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.KeepConnection">
            <summary>
            Keep connection open whenever possible.
            </summary>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.NewLine">
            <summary>
            Append newline at the end of log message.
            </summary>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.MaxMessageSize">
            <summary>
            Maximum message size in bytes.
            </summary>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.OnOverflow">
            <summary>
            Action that should be taken if the message is larger than
            maxMessageSize
            </summary>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.Encoding">
            <summary>
            Encoding
            </summary>
            <remarks>
            Can be any encoding name supported by System.Text.Encoding.GetEncoding() e.g. <c>windows-1252</c>, <c>iso-8859-2</c>.
            </remarks>
        </member>
        <member name="T:NLog.Targets.NetworkTarget.OverflowAction">
            <summary>
            Action that should be taken if the message overflows.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTarget.OverflowAction.Error">
            <summary>
            Report an error.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTarget.OverflowAction.Split">
            <summary>
            Split the message into smaller pieces.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTarget.OverflowAction.Discard">
            <summary>
            Discard the entire message
            </summary>
        </member>
        <member name="M:NLog.Targets.NLogViewerTarget.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Targets.NLogViewerTarget"/> 
            and initializes default property values.
            </summary>
        </member>
        <member name="M:NLog.Targets.NLogViewerTarget.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this target to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="M:NLog.Targets.NLogViewerTarget.NeedsStackTrace">
            <summary>
            Returns the value indicating whether call site and/or source information should be gathered.
            </summary>
            <returns>2 - when IncludeSourceInfo is set, 1 when IncludeCallSite is set, 0 otherwise</returns>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.Layout">
            <summary>
            An instance of <see cref="T:NLog.Layouts.Log4JXmlEventLayout"/> that is used to format log messages.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeNLogData">
            <summary>
            Include NLog-specific extensions to log4j schema.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.AppInfo">
            <summary>
            The AppInfo field. By default it's the friendly name of the current AppDomain.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeCallSite">
            <summary>
            Include call site (class and method name) in the information sent over the network.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeSourceInfo">
            <summary>
            Include source info (file name and line number) in the information sent over the network.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeMDC">
            <summary>
            Include MDC dictionary in the information sent over the network.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeNDC">
            <summary>
            Include NDC stack.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.Parameters">
            <summary>
            The collection of parameters. Each parameter contains a mapping
            between NLog layout and a named parameter.
            </summary>
        </member>
        <member name="M:NLog.Targets.ChainsawTarget.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Targets.ChainsawTarget"/> 
            and initializes default property values.
            </summary>
        </member>
        <member name="T:NLog.Targets.ConsoleTarget">
            <summary>
            Writes logging messages to the console.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/Console/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/Console/Simple/Example.cs" />
            </example>
        </member>
        <member name="T:NLog.TargetWithLayoutHeaderAndFooter">
            <summary>
            Represents target that supports string formatting using layouts.
            </summary>
        </member>
        <member name="M:NLog.TargetWithLayoutHeaderAndFooter.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.TargetWithLayout"/>
            </summary>
        </member>
        <member name="M:NLog.TargetWithLayoutHeaderAndFooter.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this target to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="M:NLog.TargetWithLayoutHeaderAndFooter.Initialize">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="P:NLog.TargetWithLayoutHeaderAndFooter.Layout">
            <summary>
            The text to be rendered.
            </summary>
        </member>
        <member name="P:NLog.TargetWithLayoutHeaderAndFooter.Header">
            <summary>
            Header
            </summary>
        </member>
        <member name="P:NLog.TargetWithLayoutHeaderAndFooter.Footer">
            <summary>
            Footer
            </summary>
        </member>
        <member name="P:NLog.TargetWithLayoutHeaderAndFooter.CompiledHeader">
            <summary>
            Compiled header.
            </summary>
            <value>The compiled header.</value>
            <remarks>
            The header can be of any layout type.
            </remarks>
        </member>
        <member name="P:NLog.TargetWithLayoutHeaderAndFooter.CompiledFooter">
            <summary>
            Compiled footer.
            </summary>
            <value>The compiled footer.</value>
            <remarks>
            The header can be of any layout type.
            </remarks>
        </member>
        <member name="P:NLog.TargetWithLayoutHeaderAndFooter.CompiledLayoutWithHeaderAndFooter">
            <summary>
            Gets the compiled layout with header and footer.
            </summary>
            <value>The compiled layout with header and footer.</value>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the Console.Out or
            Console.Error depending on the value of the Error flag.
            </summary>
            <param name="logEvent">The logging event.</param>
            <remarks>
            Note that the Error option is not supported on .NET Compact Framework.
            </remarks>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.Initialize">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.Close">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="P:NLog.Targets.ConsoleTarget.Error">
            <summary>
            Send the logging messages to the standard error instead of the standard output.
            </summary>
        </member>
        <member name="T:NLog.Targets.DatabaseTarget">
            <summary>
            Writes logging messages to the database using an ADO.NET provider.
            </summary>
            <example>
            <para>
            The configuration is dependent on the database type, because
            there are differnet methods of specifying connection string, SQL
            command and command parameters.
            </para>
            <para>MS SQL Server using System.Data.SqlClient:</para>
            <code lang="XML" src="examples/targets/Configuration File/Database/MSSQL/NLog.config" height="450" />
            
            <para>Oracle using System.Data.OracleClient:</para>
            <code lang="XML" src="examples/targets/Configuration File/Database/Oracle.Native/NLog.config" height="350" />
            
            <para>Oracle using System.Data.OleDbClient:</para>
            <code lang="XML" src="examples/targets/Configuration File/Database/Oracle.OleDb/NLog.config" height="350" />
            
            <para>To set up the log target programmatically use code like this (an equivalent of MSSQL configuration):</para>
            <code lang="C#" src="examples/targets/Configuration API/Database/MSSQL/Example.cs" height="630" />
            </example>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Targets.DatabaseTarget"/> object and sets
            the default values of some properties;
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the database. It creates
            a new database command, prepares parameters for it by calculating
            layouts and executes the command.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this target to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBProvider">
            <summary>
            The name of the database provider. It can be:
            <c>sqlserver, mssql, microsoft, msde</c> (all for MSSQL database), <c>oledb, odbc</c> or other name in which case
            it's treated as a fully qualified type name of the data provider *Connection class.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.ConnectionString">
            <summary>
            The connection string. When provided, it overrides the values
            specified in DBHost, DBUserName, DBPassword, DBDatabase.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.KeepConnection">
            <summary>
            Keep the database connection open between the log events.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.UseTransactions">
            <summary>
            Use database transactions. Some data providers require this.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBHost">
            <summary>
            The database host name. If the ConnectionString is not provided
            this value will be used to construct the "Server=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBHostLayout">
            <summary>
            The database host name. If the ConnectionString is not provided
            this value will be used to construct the "Server=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBUserName">
            <summary>
            The database user name. If the ConnectionString is not provided
            this value will be used to construct the "User ID=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBUserNameLayout">
            <summary>
            The database user name. If the ConnectionString is not provided
            this value will be used to construct the "User ID=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBPassword">
            <summary>
            The database password. If the ConnectionString is not provided
            this value will be used to construct the "Password=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBPasswordLayout">
            <summary>
            The database password. If the ConnectionString is not provided
            this value will be used to construct the "Password=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBDatabase">
            <summary>
            The database name. If the ConnectionString is not provided
            this value will be used to construct the "Database=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DBDatabaseLayout">
            <summary>
            The database name. If the ConnectionString is not provided
            this value will be used to construct the "Database=" part of the
            connection string.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.CommandText">
            <summary>
            The text of the SQL command to be run on each log level.
            </summary>
            <remarks>
            Typically this is a SQL INSERT statement or a stored procedure call. 
            It should use the database-specific parameters (marked as <c>@parameter</c>
            for SQL server or <c>:parameter</c> for Oracle, other data providers
            have their own notation) and not the layout renderers, 
            because the latter is prone to SQL injection attacks.
            The layout renderers should be specified as &lt;parameters />&gt; instead.
            </remarks>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.CommandTextLayout">
            <summary>
            The text of the SQL command to be run on each log level.
            </summary>
            <remarks>
            Typically this is a SQL INSERT statement or a stored procedure call. 
            It should use the database-specific parameters (marked as <c>@parameter</c>
            for SQL server or <c>:parameter</c> for Oracle, other data providers
            have their own notation) and not the layout renderers, 
            because the latter is prone to SQL injection attacks.
            The layout renderers should be specified as &lt;parameters />&lt; instead.
            </remarks>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.Parameters">
            <summary>
            The collection of paramters. Each parameter contains a mapping
            between NLog layout and a database named or positional parameter.
            </summary>
        </member>
        <member name="T:NLog.Targets.DatabaseParameterInfo">
            <summary>
            Represents a parameter to a Database target.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfo.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.DatabaseParameterInfo"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfo.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.DatabaseParameterInfo"/>
            and sets Name and Layout properties to the specified values.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Name">
            <summary>
            Database parameter name.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Layout">
            <summary>
            The layout that should be use to calcuate the value for the parameter.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.CompiledLayout">
            <summary>
            The compiled representation of the Layout property.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Size">
            <summary>
            Database parameter size.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Precision">
            <summary>
            Database parameter precision.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Scale">
            <summary>
            Database parameter scale.
            </summary>
        </member>
        <member name="T:NLog.Targets.DatabaseParameterInfoCollection">
            <summary>
            A collection of elements of type DatabaseParameterInfo
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.#ctor">
            <summary>
            Initializes a new empty instance of the DatabaseParameterInfoCollection class.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.#ctor(NLog.Targets.DatabaseParameterInfo[])">
            <summary>
            Initializes a new instance of the DatabaseParameterInfoCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new DatabaseParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.#ctor(NLog.Targets.DatabaseParameterInfoCollection)">
            <summary>
            Initializes a new instance of the DatabaseParameterInfoCollection class, containing elements
            copied from another instance of DatabaseParameterInfoCollection
            </summary>
            <param name="items">
            The DatabaseParameterInfoCollection whose elements are to be added to the new DatabaseParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.AddRange(NLog.Targets.DatabaseParameterInfo[])">
            <summary>
            Adds the elements of an array to the end of this DatabaseParameterInfoCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this DatabaseParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.AddRange(NLog.Targets.DatabaseParameterInfoCollection)">
            <summary>
            Adds the elements of another DatabaseParameterInfoCollection to the end of this DatabaseParameterInfoCollection.
            </summary>
            <param name="items">
            The DatabaseParameterInfoCollection whose elements are to be added to the end of this DatabaseParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.Add(NLog.Targets.DatabaseParameterInfo)">
            <summary>
            Adds an instance of type DatabaseParameterInfo to the end of this DatabaseParameterInfoCollection.
            </summary>
            <param name="value">
            The DatabaseParameterInfo to be added to the end of this DatabaseParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.Contains(NLog.Targets.DatabaseParameterInfo)">
            <summary>
            Determines whether a specfic DatabaseParameterInfo value is in this DatabaseParameterInfoCollection.
            </summary>
            <param name="value">
            The DatabaseParameterInfo value to locate in this DatabaseParameterInfoCollection.
            </param>
            <returns>
            true if value is found in this DatabaseParameterInfoCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.IndexOf(NLog.Targets.DatabaseParameterInfo)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this DatabaseParameterInfoCollection
            </summary>
            <param name="value">
            The DatabaseParameterInfo value to locate in the DatabaseParameterInfoCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.Insert(System.Int32,NLog.Targets.DatabaseParameterInfo)">
            <summary>
            Inserts an element into the DatabaseParameterInfoCollection at the specified index
            </summary>
            <param name="index">
            The index at which the DatabaseParameterInfo is to be inserted.
            </param>
            <param name="value">
            The DatabaseParameterInfo to insert.
            </param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.Remove(NLog.Targets.DatabaseParameterInfo)">
            <summary>
            Removes the first occurrence of a specific DatabaseParameterInfo from this DatabaseParameterInfoCollection.
            </summary>
            <param name="value">
            The DatabaseParameterInfo value to remove from this DatabaseParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this DatabaseParameterInfoCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfoCollection.Item(System.Int32)">
            <summary>
            Gets or sets the DatabaseParameterInfo at the given index in this DatabaseParameterInfoCollection.
            </summary>
        </member>
        <member name="T:NLog.Targets.DatabaseParameterInfoCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by DatabaseParameterInfoCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.Enumerator.#ctor(NLog.Targets.DatabaseParameterInfoCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfoCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfoCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfoCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.Targets.DebugTarget">
            <summary>
            Counts logging messages but does not output them anywhere. Provides 
            the counter of logged messages and remembers the latest one.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/Debug/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/Debug/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.DebugTarget.Write(NLog.LogEventInfo)">
            <summary>
            Increases the number of messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.DebugTarget.Counter">
            <summary>
            The number of times this target has been called.
            </summary>
        </member>
        <member name="P:NLog.Targets.DebugTarget.LastMessage">
            <summary>
            The last message rendered by this target.
            </summary>
        </member>
        <member name="T:NLog.Targets.DebuggerTarget">
            <summary>
            Writes logging messages to the attached managed debugger (for example Visual Studio .NET or DbgCLR).
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/Debugger/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/Debugger/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the attached debugger.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.Initialize">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.Close">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="T:NLog.Targets.FileTarget">
            <summary>
            Writes logging messages to one or more files.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/File/Simple/NLog.config" />
            <p>
            You can use a single target to write to multiple files. The following
            example writes each log message to a file named after its log level, so
            it will create:
            <c>Trace.log</c>, <c>Debug.log</c>, <c>Info.log</c>, <c>Warn.log</c>, 
            <c>Error.log</c>, <c>Fatal.log</c>
            </p>
            <code lang="XML" src="examples/targets/Configuration File/File/Multiple/NLog.config" />
            <p>
            The file names can be quite complex for the most demanding scenarios. This
            example shows a way to create separate files for each day, user and log level.
            As you can see, the possibilities are endless.
            </p>
            <code lang="XML" src="examples/targets/Configuration File/File/Multiple2/NLog.config" />
            <p>
            Depending on your usage scenario it may be useful to add an <a href="target.AsyncWrapper.html">asynchronous target wrapper</a>
            around the file target. This way all your log messages
            will be written in a separate thread so your main thread can finish
            your work more quickly. Asynchronous logging is recommended
            for multi-threaded server applications which run for a long time and
            is not recommended for quickly-finishing command line applications.
            </p>
            <code lang="XML" src="examples/targets/Configuration File/File/Asynchronous/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/File/Asynchronous/Example.cs" />
            <p>
            More configuration options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/File/Simple/Example.cs" />
            <p>
            File target can also do file archiving, meaning that the log file is automatically
            moved to another place based on its size and time. This example demonstrates 
            file archiving based on size. Files after 10000 bytes are moved to a separate folder
            and renamed log.00000.txt, log.00001.txt and so on.
            </p>
            <code lang="C#" src="examples/targets/Configuration API/File/Archive1/Example.cs" />
            <p>
            File archiving can also be done on date/time changes. For example, to create a new 
            archive file every minute use this code:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/File/Archive2/Example.cs" />
            <p>
            You can combine both methods as demonstrated here:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/File/Archive3/Example.cs" />
            <p>
            Note that file archiving works even when you use a single target instance
            to write to multiple files, such as putting each log level in a separate place:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/File/Archive4/Example.cs" />
            <p>
            You can write texts using alternative layouts, such as CSV (comma-separated values).
            This example writes files which are properly CSV-quoted (can handle messages with line breaks
            and quotes)
            </p>
            <code lang="C#" src="examples/targets/Configuration API/File/CSV/Example.cs" />
            <para>
            This is the configuration file version:
            </para>
            <code lang="XML" src="examples/targets/Configuration File/File/CSV/NLog.config" />
            </example>
        </member>
        <member name="M:NLog.Targets.FileTarget.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.FileTarget"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this target to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Formats the log event for write.
            </summary>
            <param name="logEvent">The log event to be formatted.</param>
            <returns>A string representation of the log event.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetBytesToWrite(NLog.LogEventInfo)">
            <summary>
            Gets the bytes to be written to the file.
            </summary>
            <param name="logEvent">log event</param>
            <returns>array of bytes that are ready to be written</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to a file specified in the FileName 
            parameter.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.Write(NLog.LogEventInfo[])">
            <summary>
            Writes the specified array of logging events to a file specified in the FileName 
            parameter.
            </summary>
            <param name="logEvents">An array of <see cref="T:NLog.LogEventInfo"/> objects.</param>
            <remarks>
            This function makes use of the fact that the events are batched by sorting 
            the requests by filename. This optimizes the number of open/close calls
            and can help improve performance.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.Initialize">
            <summary>
            Initializes file logging by creating data structures that
            enable efficient multi-file logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.TransformBytes(System.Byte[])">
            <summary>
            Modifies the specified byte array before it gets sent to a file.
            </summary>
            <param name="bytes">The byte array</param>
            <returns>The modified byte array. The function can do the modification in-place.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.CleanupInitializedFiles">
            <summary>
            Removes records of initialized files that have not been 
            accessed in the last two days.
            </summary>
            <remarks>
            Files are marked 'initialized' for the purpose of writing footers when the logging finishes.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.CleanupInitializedFiles(System.DateTime)">
            <summary>
            Removes records of initialized files that have not been 
            accessed after the specified date.
            </summary>
            <remarks>
            Files are marked 'initialized' for the purpose of writing footers when the logging finishes.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.Flush(System.TimeSpan)">
            <summary>
            Flushes all pending file operations.
            </summary>
            <param name="timeout">The timeout</param>
            <remarks>
            The timeout parameter is ignored, because file APIs don't provide
            the needed functionality.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.Close">
            <summary>
            Closes the file(s) opened for writing.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.FileName">
            <summary>
            The name of the file to write to.
            </summary>
            <remarks>
            This FileName string is a layout which may include instances of layout renderers.
            This lets you use a single target to write to multiple files.
            </remarks>
            <example>
            The following value makes NLog write logging events to files based on the log level in the directory where
            the application runs.
            <code>${basedir}/${level}.log</code>
            All <c>Debug</c> messages will go to <c>Debug.log</c>, all <c>Info</c> messages will go to <c>Info.log</c> and so on.
            You can combine as many of the layout renderers as you want to produce an arbitrary log file name.
            </example>
        </member>
        <member name="P:NLog.Targets.FileTarget.CreateDirs">
            <summary>
            Create directories if they don't exist.
            </summary>
            <remarks>
            Setting this to false may improve performance a bit, but you'll receive an error
            when attempting to write to a directory that's not present.
            </remarks>
        </member>
        <member name="P:NLog.Targets.FileTarget.OpenFileCacheSize">
            <summary>
            The number of files to be kept open. Setting this to a higher value may improve performance
            in a situation where a single File target is writing to many files
            (such as splitting by level or by logger).
            </summary>
            <remarks>
            The files are managed on a LRU (least recently used) basis, which flushes
            the files that have not been used for the longest period of time should the
            cache become full. As a rule of thumb, you shouldn't set this parameter to 
            a very high value. A number like 10-15 shouldn't be exceeded, because you'd
            be keeping a large number of files open which consumes system resources.
            </remarks>
        </member>
        <member name="P:NLog.Targets.FileTarget.OpenFileCacheTimeout">
            <summary>
            Maximum number of seconds that files are kept open. If this number is negative.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.DeleteOldFileOnStartup">
            <summary>
            Delete old log file on startup.
            </summary>
            <remarks>
            This option works only when the "fileName" parameter denotes a single file.
            </remarks>
        </member>
        <member name="P:NLog.Targets.FileTarget.ReplaceFileContentsOnEachWrite">
            <summary>
            Replace file contents on each write instead of appending log message at the end.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.KeepFileOpen">
            <summary>
            Keep log file open instead of opening and closing it on each logging event.
            </summary>
            <remarks>
            Setting this property to <c>True</c> helps improve performance.
            </remarks>
        </member>
        <member name="P:NLog.Targets.FileTarget.EnableFileDelete">
            <summary>
            Enable log file(s) to be deleted.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.FileAttributes">
            <summary>
            File attributes (Windows only).
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.NewLineChars">
            <summary>
            Gets the characters that are appended after each line.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.LineEnding">
            <summary>
            Line ending mode.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.AutoFlush">
            <summary>
            Automatically flush the file buffers after each log message.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.BufferSize">
            <summary>
            Log file buffer size in bytes.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.Encoding">
            <summary>
            File encoding.</summary>
            <remarks>
            Can be any encoding name supported by System.Text.Encoding.GetEncoding() e.g. <c>windows-1252</c>, <c>iso-8859-2</c>.
            </remarks>
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWrites">
            <summary>
            Enables concurrent writes to the log file by multiple processes on the same host.
            </summary>
            <remarks>
            This makes multi-process logging possible. NLog uses a special technique
            that lets it keep the files open for writing.
            </remarks>
        </member>
        <member name="P:NLog.Targets.FileTarget.NetworkWrites">
            <summary>
            Disables open-fi
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts">
            <summary>
            The number of times the write is appended on the file before NLog
            discards the log message.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveAboveSize">
            <summary>
            Automatically archive log files that exceed the specified size in bytes.
            </summary>
            <remarks>
            Caution: Enabling this option can considerably slow down your file 
            logging in multi-process scenarios. If only one process is going to
            be writing to the file, consider setting <c>ConcurrentWrites</c>
            to <c>false</c> for maximum performance.
            </remarks>
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveEvery">
            <summary>
            Automatically archive log files every time the specified time passes.
            Possible options are: <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>. Files are 
            moved to the archive as part of the write operation if the current period of time changes. For example
            if the current <c>hour</c> changes from 10 to 11, the first write that will occur
            on or after 11:00 will trigger the archiving.
            </summary>
            <remarks>
            <p>
            Caution: Enabling this option can considerably slow down your file 
            logging in multi-process scenarios. If only one process is going to
            be writing to the file, consider setting <c>ConcurrentWrites</c>
            to <c>false</c> for maximum performance.
            </p>
            </remarks>
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveFileName">
            <summary>
            The name of the file to be used for an archive. 
            It may contain a special placeholder {#####}
            that will be replaced with a sequence of numbers depending on 
            the archiving strategy. The number of hash characters used determines
            the number of numerical digits to be used for numbering files.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttemptDelay">
            <summary>
            The delay in milliseconds to wait before attempting to write to the file again.
            </summary>
            <remarks>
            The actual delay is a random value between 0 and the value specified
            in this parameter. On each failed attempt the delay base is doubled
            up to <see cref="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts"/> times.
            </remarks>
            <example>
            Assuming that ConcurrentWriteAttemptDelay is 10 the time to wait will be:<p/>
            a random value between 0 and 10 milliseconds - 1st attempt<br/>
            a random value between 0 and 20 milliseconds - 2nd attempt<br/>
            a random value between 0 and 40 milliseconds - 3rd attempt<br/>
            a random value between 0 and 80 milliseconds - 4th attempt<br/>
            ...<p/>
            and so on.
            </example>
        </member>
        <member name="P:NLog.Targets.FileTarget.MaxArchiveFiles">
            <summary>
            Maximum number of archive files that should be kept.
            </summary>
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveNumbering">
            <summary>
            Determines the way file archives are numbered. 
            </summary>
        </member>
        <member name="T:NLog.Targets.FileTarget.ArchiveNumberingMode">
            <summary>
            Specifies the way archive numbering is performed.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.ArchiveNumberingMode.Sequence">
            <summary>
            Sequence style numbering. The most recent archive has the highest number.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.ArchiveNumberingMode.Rolling">
            <summary>
            Rolling style numbering (the most recent is always #0 then #1, ..., #N
            </summary>
        </member>
        <member name="T:NLog.Targets.FileTarget.ArchiveEveryMode">
            <summary>
            Modes of archiving files based on time.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.ArchiveEveryMode.None">
            <summary>
            Don't archive based on time.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.ArchiveEveryMode.Year">
            <summary>
            Archive every year.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.ArchiveEveryMode.Month">
            <summary>
            Archive every month.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.ArchiveEveryMode.Day">
            <summary>
            Archive daily.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.ArchiveEveryMode.Hour">
            <summary>
            Archive every hour.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.ArchiveEveryMode.Minute">
            <summary>
            Archive every minute.
            </summary>
        </member>
        <member name="T:NLog.Targets.FileTarget.LineEndingMode">
            <summary>
            Line ending mode.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.LineEndingMode.Default">
            <summary>
            Insert platform-dependent end-of-line sequence after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.LineEndingMode.CRLF">
            <summary>
            Insert CR LF sequence (ASCII 13, ASCII 10) after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.LineEndingMode.CR">
            <summary>
            Insert CR character (ASCII 13) after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.LineEndingMode.LF">
            <summary>
            Insert LF character (ASCII 10) after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileTarget.LineEndingMode.None">
            <summary>
            Don't insert any line ending.
            </summary>
        </member>
        <member name="T:NLog.Targets.FormControlTarget">
            <summary>
            Log text to Windows.Forms.Control.Text property control of specified Name
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/FormControl/NLog.config" />
            <p>
            The result is:
            </p>
            <img src="examples/targets/Screenshots/FormControl/FormControl.gif" />
            <p>
            To set up the log target programmatically similar to above use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/FormControl/Form1.cs" />,
            </example>
        </member>
        <member name="M:NLog.Targets.FormControlTarget.Write(NLog.LogEventInfo)">
            <summary>
            Log message to control
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.FormControlTarget.ControlName">
            <summary>
            Name of control to which Nlog will log
            </summary>
        </member>
        <member name="P:NLog.Targets.FormControlTarget.Append">
            <summary>
            Setting to tell to append or overwrite the Text property of control
            </summary>
        </member>
        <member name="P:NLog.Targets.FormControlTarget.FormName">
            <summary>
            Name of the Form on which the control is located.
            </summary>
        </member>
        <member name="T:NLog.Targets.MailTarget">
            <summary>
            Sends logging messages by email using SMTP protocol.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/Mail/Simple/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/Mail/Simple/Example.cs" />
            <p>
            Mail target works best when used with BufferingWrapper target
            which lets you send multiple logging messages in single mail
            </p>
            <p>
            To set up the buffered mail target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/Mail/Buffered/NLog.config" />
            <p>
            To set up the buffered mail target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/Mail/Buffered/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.MailTarget.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.MailTarget"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.MailTarget.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this target to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="M:NLog.Targets.MailTarget.Write(NLog.LogEventInfo)">
            <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.MailTarget.Write(NLog.LogEventInfo[])">
            <summary>
            Renders an array logging events.
            </summary>
            <param name="events">Array of logging events.</param>
        </member>
        <member name="P:NLog.Targets.MailTarget.From">
            <summary>
            Sender's email address (e.g. joe@domain.com)
            </summary>
        </member>
        <member name="P:NLog.Targets.MailTarget.To">
            <summary>
            Recipients' email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com)
            </summary>
        </member>
        <member name="P:NLog.Targets.MailTarget.CC">
            <summary>
            CC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com)
            </summary>
        </member>
        <member name="P:NLog.Targets.MailTarget.BCC">
            <summary>
            BCC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com)
            </summary>
        </member>
        <member name="P:NLog.Targets.MailTarget.AddNewLines">
            <summary>
            Whether to add new lines between log entries.
            </summary>
            <value><c>true</c> if new lines should be added; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NLog.Targets.MailTarget.Subject">
            <summary>
            Mail subject.
            </summary>
        </member>
        <member name="P:NLog.Targets.MailTarget.Body">
            <summary>
            Mail message body (repeated for each log message send in one mail)
            </summary>
        </member>
        <member name="P:NLog.Targets.MailTarget.Encoding">
            <summary>
            Encoding to be used for sending e-mail.
            </summary>
        </member>
        <member name="P:NLog.Targets.MailTarget.HTML">
            <summary>
            Send message as HTML instead of plain text.
            </summary>
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpServer">
            <summary>
            SMTP Server to be used for sending.
            </summary>
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpAuthentication">
            <summary>
            SMTP Authentication mode.
            </summary>
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpUsername">
            <summary>
            The username used to connect to SMTP server (used when SmtpAuthentication is set to "basic").
            </summary>
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpPassword">
            <summary>
            The password used to authenticate against SMTP server (used when SmtpAuthentication is set to "basic").
            </summary>
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpPort">
            <summary>
            The port that SMTP Server is listening on.
            </summary>
        </member>
        <member name="T:NLog.Targets.MailTarget.SmtpAuthenticationMode">
            <summary>
            SMTP authentication modes.
            </summary>
        </member>
        <member name="F:NLog.Targets.MailTarget.SmtpAuthenticationMode.None">
            <summary>
            No authentication.
            </summary>
        </member>
        <member name="F:NLog.Targets.MailTarget.SmtpAuthenticationMode.Basic">
            <summary>
            Basic - username and password
            </summary>
        </member>
        <member name="F:NLog.Targets.MailTarget.SmtpAuthenticationMode.Ntlm">
            <summary>
            NTLM Authentication
            </summary>
        </member>
        <member name="T:NLog.Targets.MemoryTarget">
            <summary>
            Writes logging messages to an ArrayList in memory for programmatic retrieval.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/Memory/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/Memory/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.MemoryTarget.Write(NLog.LogEventInfo)">
            <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.MemoryTarget.Logs">
            <summary>
            Returns the list of logs gathered in the <see cref="T:NLog.Targets.MemoryTarget"/>.
            </summary>
        </member>
        <member name="T:NLog.Targets.MessageBoxTarget">
            <summary>
            Pops up logging messages as message boxes.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/MessageBox/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            The result is a message box:
            </p>
            <img src="examples/targets/Screenshots/MessageBox/MessageBoxTarget.gif" />
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/MessageBox/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.MessageBoxTarget.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Targets.MessageBoxTarget"/>.
            </summary>
        </member>
        <member name="M:NLog.Targets.MessageBoxTarget.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this target to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="M:NLog.Targets.MessageBoxTarget.Write(NLog.LogEventInfo)">
            <summary>
            Displays the message box with the log message and caption specified in the Caption
            parameter.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.MessageBoxTarget.Write(NLog.LogEventInfo[])">
            <summary>
            Displays the message box with the array of rendered logs messages and caption specified in the Caption
            parameter.
            </summary>
            <param name="logEvents">The array of logging events.</param>
        </member>
        <member name="P:NLog.Targets.MessageBoxTarget.Caption">
            <summary>
            Message box title.
            </summary>
        </member>
        <member name="T:NLog.Targets.MethodCallTarget">
            <summary>
            Calls the specified static method on each logging message and passes contextual parameters to it.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/MethodCall/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/MethodCall/Simple/Example.cs" />
            </example>
        </member>
        <member name="T:NLog.Targets.MethodCallTargetBase">
            <summary>
            The base class for all targets which call methods (local or remote). 
            Manages parameters and type coercion.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.Write(NLog.LogEventInfo)">
            <summary>
            Prepares an array of parameters to be passed based on the logging event and calls DoInvoke()
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.DoInvoke(System.Object[])">
            <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
            <param name="parameters">Method call parameters</param>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this target to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="P:NLog.Targets.MethodCallTargetBase.Parameters">
            <summary>
            Array of parameters to be passed.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTarget.DoInvoke(System.Object[])">
            <summary>
            Calls the specified Method.
            </summary>
            <param name="parameters">Method parameters.</param>
        </member>
        <member name="P:NLog.Targets.MethodCallTarget.ClassName">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="P:NLog.Targets.MethodCallTarget.MethodName">
            <summary>
            The method name. The method must be public and static.
            </summary>
        </member>
        <member name="T:NLog.Targets.MethodCallParameter">
            <summary>
            A parameter to MethodCall.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:NLog.Targets.MethodCallParameter"/> and sets
            the type to String.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:NLog.Targets.MethodCallParameter"/>, sets
            the type to String and initializes the Layout property.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new instance of <see cref="T:NLog.Targets.MethodCallParameter"/>, sets
            the type to String and initializes the Name and Layout properties.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor(System.String,System.Type,System.String)">
            <summary>
            Constructs a new instance of <see cref="T:NLog.Targets.MethodCallParameter"/>, sets
            the type to String and initializes the Name, Layout and Type properties.
            </summary>
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Type">
            <summary>
            The type of the parameter.
            </summary>
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Layout">
            <summary>
            The layout that should be use to calcuate the value for the parameter.
            </summary>
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.CompiledLayout">
            <summary>
            The compiled layout that should be use to calcuate the value for the parameter.
            </summary>
        </member>
        <member name="T:NLog.Targets.MethodCallParameterCollection">
            <summary>
            A collection of elements of type MethodCallParameter
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.#ctor">
            <summary>
            Initializes a new empty instance of the MethodCallParameterCollection class.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.#ctor(NLog.Targets.MethodCallParameter[])">
            <summary>
            Initializes a new instance of the MethodCallParameterCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new MethodCallParameterCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.#ctor(NLog.Targets.MethodCallParameterCollection)">
            <summary>
            Initializes a new instance of the MethodCallParameterCollection class, containing elements
            copied from another instance of MethodCallParameterCollection
            </summary>
            <param name="items">
            The MethodCallParameterCollection whose elements are to be added to the new MethodCallParameterCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.AddRange(NLog.Targets.MethodCallParameter[])">
            <summary>
            Adds the elements of an array to the end of this MethodCallParameterCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this MethodCallParameterCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.AddRange(NLog.Targets.MethodCallParameterCollection)">
            <summary>
            Adds the elements of another MethodCallParameterCollection to the end of this MethodCallParameterCollection.
            </summary>
            <param name="items">
            The MethodCallParameterCollection whose elements are to be added to the end of this MethodCallParameterCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.Add(NLog.Targets.MethodCallParameter)">
            <summary>
            Adds an instance of type MethodCallParameter to the end of this MethodCallParameterCollection.
            </summary>
            <param name="value">
            The MethodCallParameter to be added to the end of this MethodCallParameterCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.Contains(NLog.Targets.MethodCallParameter)">
            <summary>
            Determines whether a specfic MethodCallParameter value is in this MethodCallParameterCollection.
            </summary>
            <param name="value">
            The MethodCallParameter value to locate in this MethodCallParameterCollection.
            </param>
            <returns>
            true if value is found in this MethodCallParameterCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.IndexOf(NLog.Targets.MethodCallParameter)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this MethodCallParameterCollection
            </summary>
            <param name="value">
            The MethodCallParameter value to locate in the MethodCallParameterCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.Insert(System.Int32,NLog.Targets.MethodCallParameter)">
            <summary>
            Inserts an element into the MethodCallParameterCollection at the specified index
            </summary>
            <param name="index">
            The index at which the MethodCallParameter is to be inserted.
            </param>
            <param name="value">
            The MethodCallParameter to insert.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.Remove(NLog.Targets.MethodCallParameter)">
            <summary>
            Removes the first occurrence of a specific MethodCallParameter from this MethodCallParameterCollection.
            </summary>
            <param name="value">
            The MethodCallParameter value to remove from this MethodCallParameterCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this MethodCallParameterCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.Targets.MethodCallParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the MethodCallParameter at the given index in this MethodCallParameterCollection.
            </summary>
        </member>
        <member name="T:NLog.Targets.MethodCallParameterCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by MethodCallParameterCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.Enumerator.#ctor(NLog.Targets.MethodCallParameterCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.MethodCallParameterCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Targets.MethodCallParameterCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Targets.MethodCallParameterCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.Targets.NLogViewerParameterInfo">
            <summary>
            Represents a parameter to a NLogViewer target.
            </summary>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfo.#ctor">
            <summary>ba
            Creates a new instance of <see cref="T:NLog.Targets.NLogViewerParameterInfo"/>.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerParameterInfo.Name">
            <summary>
            Viewer parameter name.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerParameterInfo.Layout">
            <summary>
            The layout that should be use to calcuate the value for the parameter.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerParameterInfo.CompiledLayout">
            <summary>
            The compiled representation of the Layout property.
            </summary>
        </member>
        <member name="T:NLog.Targets.NLogViewerParameterInfoCollection">
            <summary>
            A collection of elements of type NLogViewerParameterInfo
            </summary>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfoCollection.#ctor">
            <summary>
            Initializes a new empty instance of the NLogViewerParameterInfoCollection class.
            </summary>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfoCollection.#ctor(NLog.Targets.NLogViewerParameterInfo[])">
            <summary>
            Initializes a new instance of the NLogViewerParameterInfoCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new NLogViewerParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfoCollection.#ctor(NLog.Targets.NLogViewerParameterInfoCollection)">
            <summary>
            Initializes a new instance of the NLogViewerParameterInfoCollection class, containing elements
            copied from another instance of NLogViewerParameterInfoCollection
            </summary>
            <param name="items">
            The NLogViewerParameterInfoCollection whose elements are to be added to the new NLogViewerParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfoCollection.AddRange(NLog.Targets.NLogViewerParameterInfo[])">
            <summary>
            Adds the elements of an array to the end of this NLogViewerParameterInfoCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this NLogViewerParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfoCollection.AddRange(NLog.Targets.NLogViewerParameterInfoCollection)">
            <summary>
            Adds the elements of another NLogViewerParameterInfoCollection to the end of this NLogViewerParameterInfoCollection.
            </summary>
            <param name="items">
            The NLogViewerParameterInfoCollection whose elements are to be added to the end of this NLogViewerParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfoCollection.Add(NLog.Targets.NLogViewerParameterInfo)">
            <summary>
            Adds an instance of type NLogViewerParameterInfo to the end of this NLogViewerParameterInfoCollection.
            </summary>
            <param name="value">
            The NLogViewerParameterInfo to be added to the end of this NLogViewerParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfoCollection.Contains(NLog.Targets.NLogViewerParameterInfo)">
            <summary>
            Determines whether a specfic NLogViewerParameterInfo value is in this NLogViewerParameterInfoCollection.
            </summary>
            <param name="value">
            The NLogViewerParameterInfo value to locate in this NLogViewerParameterInfoCollection.
            </param>
            <returns>
            true if value is found in this NLogViewerParameterInfoCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfoCollection.IndexOf(NLog.Targets.NLogViewerParameterInfo)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this NLogViewerParameterInfoCollection
            </summary>
            <param name="value">
            The NLogViewerParameterInfo value to locate in the NLogViewerParameterInfoCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfoCollection.Insert(System.Int32,NLog.Targets.NLogViewerParameterInfo)">
            <summary>
            Inserts an element into the NLogViewerParameterInfoCollection at the specified index
            </summary>
            <param name="index">
            The index at which the NLogViewerParameterInfo is to be inserted.
            </param>
            <param name="value">
            The NLogViewerParameterInfo to insert.
            </param>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfoCollection.Remove(NLog.Targets.NLogViewerParameterInfo)">
            <summary>
            Removes the first occurrence of a specific NLogViewerParameterInfo from this NLogViewerParameterInfoCollection.
            </summary>
            <param name="value">
            The NLogViewerParameterInfo value to remove from this NLogViewerParameterInfoCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfoCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this NLogViewerParameterInfoCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.Targets.NLogViewerParameterInfoCollection.Item(System.Int32)">
            <summary>
            Gets or sets the NLogViewerParameterInfo at the given index in this NLogViewerParameterInfoCollection.
            </summary>
        </member>
        <member name="T:NLog.Targets.NLogViewerParameterInfoCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by NLogViewerParameterInfoCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfoCollection.Enumerator.#ctor(NLog.Targets.NLogViewerParameterInfoCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfoCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfoCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerParameterInfoCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerParameterInfoCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.Targets.NullTarget">
            <summary>
            Discards logging messages optionally forcing the layouts to be calculated. Used mainly for debugging and benchmarking.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/Null/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/Null/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.NullTarget.Write(NLog.LogEventInfo)">
            <summary>
            Does nothing. Optionally it calculates the layout text but
            discards the results.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.NullTarget.FormatMessage">
            <summary>
            Perform layout calculation.
            </summary>
        </member>
        <member name="T:NLog.Targets.RichTextBoxTarget">
            <summary>
            Log text to Text property of  RichTextBox of specified Name
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/RichTextBox/Simple/NLog.config" />
            <p>
            The result is:
            </p>
            <img src="examples/targets/Screenshots/RichTextBox/Simple.gif" />
            <p>
            To set up the target with coloring rules in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/RichTextBox/RowColoring/NLog.config" />
            <code lang="XML" src="examples/targets/Configuration File/RichTextBox/WordColoring/NLog.config" />
            <p>
            The result is:
            </p>
            <img src="examples/targets/Screenshots/RichTextBox/RowColoring.gif" />
            <img src="examples/targets/Screenshots/RichTextBox/WordColoring.gif" />
            <p>
            To set up the log target programmatically similar to above use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/RichTextBox/Simple/Form1.cs" />,
            <code lang="C#" src="examples/targets/Configuration API/RichTextBox/RowColoring/Form1.cs" /> for RowColoring,
            <code lang="C#" src="examples/targets/Configuration API/RichTextBox/WordColoring/Form1.cs" /> for WordColoring
            </example>
        </member>
        <member name="M:NLog.Targets.RichTextBoxTarget.Write(NLog.LogEventInfo)">
            <summary>
            Log message to RichTextBox
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.ControlName">
            <summary>
            Name of RichTextBox to which Nlog will log
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.FormName">
            <summary>
            Name of the Form on which the control is located. 
            If there is no open form of a specified name than NLog will create a new one.
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.UseDefaultRowColoringRules">
            <summary>
            Use default coloring rules
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.RowColoringRules">
            <summary>
            Row coloring rules.
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.WordColoringRules">
            <summary>
            Word highlighting rules.
            </summary>
        </member>
        <member name="T:NLog.Targets.RichTextBoxRowColoringRule">
            <summary>
            The row-coloring condition.
            </summary>
        </member>
        <member name="F:NLog.Targets.RichTextBoxRowColoringRule.Default">
            <summary>
            Default highlighting rule. Doesn't change the color.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxRowColoringRule.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.RichTextBoxRowColoringRule"/>
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxRowColoringRule.#ctor(System.String,System.String,System.String,System.Drawing.FontStyle)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.RichTextBoxRowColoringRule"/> and
            assigns Condition, FontColor and FontStyle properties.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxRowColoringRule.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.RichTextBoxRowColoringRule"/> and
            assigns Condition and FontColor properties with regular style of font
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxRowColoringRule.CheckCondition(NLog.LogEventInfo)">
            <summary>
            Checks whether the specified log event matches the condition (if any)
            </summary>
            <param name="logEvent">log event</param>
            <returns><see langword="true"/> if the condition is not defined or 
            if it matches, <see langword="false"/> otherwise</returns>
        </member>
        <member name="P:NLog.Targets.RichTextBoxRowColoringRule.Condition">
            <summary>
            The condition that must be met in order to set the specified font color.
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxRowColoringRule.FontColor">
            <summary>
            The font color.
            Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxRowColoringRule.BackgroundColor">
            <summary>
            The background color. 
            Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed
            Background color will be set only in .net 2.0
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxRowColoringRule.Style">
            <summary>
            Font style of matched text. 
            Possible values are the same as in <c>FontStyle</c> enum in <c>System.Drawing</c>
            </summary>
        </member>
        <member name="T:NLog.RichTextBoxRowColoringRuleCollection">
            <summary>
            A collection of elements of type RichTextBoxRowColoringRule
            </summary>
        </member>
        <member name="M:NLog.RichTextBoxRowColoringRuleCollection.#ctor">
            <summary>
            Initializes a new empty instance of the RichTextBoxRowColoringRuleCollection class.
            </summary>
        </member>
        <member name="M:NLog.RichTextBoxRowColoringRuleCollection.#ctor(NLog.Targets.RichTextBoxRowColoringRule[])">
            <summary>
            Initializes a new instance of the RichTextBoxRowColoringRuleCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new RichTextBoxRowColoringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.RichTextBoxRowColoringRuleCollection.#ctor(NLog.RichTextBoxRowColoringRuleCollection)">
            <summary>
            Initializes a new instance of the RichTextBoxRowColoringRuleCollection class, containing elements
            copied from another instance of RichTextBoxRowColoringRuleCollection
            </summary>
            <param name="items">
            The RichTextBoxRowColoringRuleCollection whose elements are to be added to the new RichTextBoxRowColoringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.RichTextBoxRowColoringRuleCollection.AddRange(NLog.Targets.RichTextBoxRowColoringRule[])">
            <summary>
            Adds the elements of an array to the end of this RichTextBoxRowColoringRuleCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this RichTextBoxRowColoringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.RichTextBoxRowColoringRuleCollection.AddRange(NLog.RichTextBoxRowColoringRuleCollection)">
            <summary>
            Adds the elements of another RichTextBoxRowColoringRuleCollection to the end of this RichTextBoxRowColoringRuleCollection.
            </summary>
            <param name="items">
            The RichTextBoxRowColoringRuleCollection whose elements are to be added to the end of this RichTextBoxRowColoringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.RichTextBoxRowColoringRuleCollection.Add(NLog.Targets.RichTextBoxRowColoringRule)">
            <summary>
            Adds an instance of type RichTextBoxWordColoringRule to the end of this RichTextBoxRowColoringRuleCollection.
            </summary>
            <param name="value">
            The RichTextBoxRowColoringRule to be added to the end of this RichTextBoxRowColoringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.RichTextBoxRowColoringRuleCollection.Contains(NLog.Targets.RichTextBoxRowColoringRule)">
            <summary>
            Determines whether a specfic RichTextBoxRowColoringRule value is in this RichTextBoxRowColoringRuleCollection.
            </summary>
            <param name="value">
            The RichTextBoxRowColoringRule value to locate in this RichTextBoxRowColoringRuleCollection.
            </param>
            <returns>
            true if value is found in this RichTextBoxRowColoringRuleCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.RichTextBoxRowColoringRuleCollection.IndexOf(NLog.Targets.RichTextBoxRowColoringRule)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this RichTextBoxRowColoringRuleCollection
            </summary>
            <param name="value">
            The RichTextBoxRowColoringRule value to locate in the RichTextBoxRowColoringRuleCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.RichTextBoxRowColoringRuleCollection.Insert(System.Int32,NLog.Targets.RichTextBoxRowColoringRule)">
            <summary>
            Inserts an element into the RichTextBoxRowColoringRuleCollection at the specified index
            </summary>
            <param name="index">
            The index at which the RichTextBoxRowColoringRule is to be inserted.
            </param>
            <param name="value">
            The RichTextBoxRowColoringRule to insert.
            </param>
        </member>
        <member name="M:NLog.RichTextBoxRowColoringRuleCollection.Remove(NLog.Targets.RichTextBoxRowColoringRule)">
            <summary>
            Removes the first occurrence of a specific RichTextBoxRowColoringRule from this RichTextBoxRowColoringRuleCollection.
            </summary>
            <param name="value">
            The RichTextBoxRowColoringRule value to remove from this RichTextBoxRowColoringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.RichTextBoxRowColoringRuleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this RichTextBoxRowColoringRuleCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.RichTextBoxRowColoringRuleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RichTextBoxRowColoringRule at the given index in this RichTextBoxRowColoringRuleCollection.
            </summary>
        </member>
        <member name="T:NLog.RichTextBoxRowColoringRuleCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by RichTextBoxRowColoringRuleCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.RichTextBoxRowColoringRuleCollection.Enumerator.#ctor(NLog.RichTextBoxRowColoringRuleCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.RichTextBoxRowColoringRuleCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.RichTextBoxRowColoringRuleCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.RichTextBoxRowColoringRuleCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.Targets.RichTextBoxWordColoringRule">
            <summary>
            Highlighting rule for Win32 colorful console.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRule.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.RichTextBoxWordColoringRule"/>
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRule.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.RichTextBoxWordColoringRule"/>
            and sets Text, BackgroundColor and ForegroundColor properties.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRule.#ctor(System.String,System.String,System.String,System.Drawing.FontStyle)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Targets.RichTextBoxWordColoringRule"/>
            and sets Text, BackgroundColor, FontColor and Style properties.
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.Regex">
            <summary>
            The regular expression to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.Text">
            <summary>
            The text to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.Style">
            <summary>
            Font style of matched text. 
            Possible values are the same as in <c>FontStyle</c> enum in <c>System.Drawing</c>
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.WholeWords">
            <summary>
            Match whole words only.
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.IgnoreCase">
            <summary>
            Ignore case when comparing texts.
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.CompiledRegex">
            <summary>
            Compiled regular expression that matches either Text or Regex property.
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.FontColor">
            <summary>
            The font color.
            Names are identical with KnownColor enum extended with Empty value which means that font color won't be changed
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.BackgroundColor">
            <summary>
            The background color. 
            Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed
            Background color will be set only in .net 2.0
            </summary>
        </member>
        <member name="T:NLog.Targets.RichTextBoxWordColoringRuleCollection">
            <summary>
            A collection of elements of type RichTextBoxWordColoringRule
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRuleCollection.#ctor">
            <summary>
            Initializes a new empty instance of the RichTextBoxWordColoringRuleCollection class.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRuleCollection.#ctor(NLog.Targets.RichTextBoxWordColoringRule[])">
            <summary>
            Initializes a new instance of the RichTextBoxWordColoringRuleCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new RichTextBoxWordColoringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRuleCollection.#ctor(NLog.Targets.RichTextBoxWordColoringRuleCollection)">
            <summary>
            Initializes a new instance of the RichTextBoxWordColoringRuleCollection class, containing elements
            copied from another instance of RichTextBoxWordColoringRuleCollection
            </summary>
            <param name="items">
            The RichTextBoxWordColoringRuleCollection whose elements are to be added to the new RichTextBoxWordColoringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRuleCollection.AddRange(NLog.Targets.RichTextBoxWordColoringRule[])">
            <summary>
            Adds the elements of an array to the end of this RichTextBoxWordColoringRuleCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this RichTextBoxWordColoringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRuleCollection.AddRange(NLog.Targets.RichTextBoxWordColoringRuleCollection)">
            <summary>
            Adds the elements of another RichTextBoxWordColoringRuleCollection to the end of this RichTextBoxWordColoringRuleCollection.
            </summary>
            <param name="items">
            The RichTextBoxWordColoringRuleCollection whose elements are to be added to the end of this RichTextBoxWordColoringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRuleCollection.Add(NLog.Targets.RichTextBoxWordColoringRule)">
            <summary>
            Adds an instance of type RichTextBoxWordColoringRule to the end of this RichTextBoxWordColoringRuleCollection.
            </summary>
            <param name="value">
            The RichTextBoxWordColoringRule to be added to the end of this RichTextBoxWordColoringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRuleCollection.Contains(NLog.Targets.RichTextBoxWordColoringRule)">
            <summary>
            Determines whether a specfic RichTextBoxWordColoringRule value is in this RichTextBoxWordColoringRuleCollection.
            </summary>
            <param name="value">
            The RichTextBoxWordColoringRule value to locate in this RichTextBoxWordColoringRuleCollection.
            </param>
            <returns>
            true if value is found in this RichTextBoxWordColoringRuleCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRuleCollection.IndexOf(NLog.Targets.RichTextBoxWordColoringRule)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this RichTextBoxWordColoringRuleCollection
            </summary>
            <param name="value">
            The RichTextBoxWordColoringRule value to locate in the RichTextBoxWordColoringRuleCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRuleCollection.Insert(System.Int32,NLog.Targets.RichTextBoxWordColoringRule)">
            <summary>
            Inserts an element into the RichTextBoxWordColoringRuleCollection at the specified index
            </summary>
            <param name="index">
            The index at which the RichTextBoxWordColoringRule is to be inserted.
            </param>
            <param name="value">
            The RichTextBoxWordColoringRule to insert.
            </param>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRuleCollection.Remove(NLog.Targets.RichTextBoxWordColoringRule)">
            <summary>
            Removes the first occurrence of a specific RichTextBoxWordColoringRule from this RichTextBoxWordColoringRuleCollection.
            </summary>
            <param name="value">
            The RichTextBoxWordColoringRule value to remove from this RichTextBoxWordColoringRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRuleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this RichTextBoxWordColoringRuleCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRuleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RichTextBoxWordColoringRule at the given index in this RichTextBoxWordColoringRuleCollection.
            </summary>
        </member>
        <member name="T:NLog.Targets.RichTextBoxWordColoringRuleCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by RichTextBoxWordColoringRuleCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRuleCollection.Enumerator.#ctor(NLog.Targets.RichTextBoxWordColoringRuleCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRuleCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRuleCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRuleCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.Targets.TraceTarget">
            <summary>
            Sends logging messages through System.Diagnostics.Trace
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/Trace/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/Trace/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.TraceTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the <see cref="T:System.Diagnostics.Trace"/> facility.
            If the log level is greater than or equal to <see cref="F:NLog.LogLevel.Error"/> it uses the
            <see cref="M:System.Diagnostics.Trace.Fail(System.String)"/> method, otherwise it uses
            <see cref="M:System.Diagnostics.Trace.Write(System.String)"/> method.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.WebServiceTarget">
            <summary>
            Calls the specified web service on each logging message. 
            </summary>
            <remarks>
            The web service must implement a method that accepts a number of string parameters.
            </remarks>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/WebService/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/WebService/Simple/Example.cs" />
            <p>The example web service that works with this example is shown below</p>
            <code lang="C#" src="examples/targets/Configuration API/WebService/Simple/WebService1/Service1.asmx.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.DoInvoke(System.Object[])">
            <summary>
            Invokes the web service method.
            </summary>
            <param name="parameters">Parameters to be passed.</param>
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Url">
            <summary>
            Web service URL.
            </summary>
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.MethodName">
            <summary>
            Web service method name.
            </summary>
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Namespace">
            <summary>
            Web service namespace.
            </summary>
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Protocol">
            <summary>
            The protocol to be used when calling web service.
            </summary>
        </member>
        <member name="T:NLog.Targets.WebServiceTarget.WebServiceProtocol">
            <summary>
            Web service protocol
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceTarget.WebServiceProtocol.Soap11">
            <summary>
            SOAP 1.1
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceTarget.WebServiceProtocol.Soap12">
            <summary>
            SOAP 1.2
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceTarget.WebServiceProtocol.HttpPost">
            <summary>
            HTTP POST
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceTarget.WebServiceProtocol.HttpGet">
            <summary>
            HTTP GET
            </summary>
        </member>
        <member name="T:NLog.Web.NLogHttpModule">
            <summary>
            ASP.NET HttpModule that enables NLog to hook BeginRequest and EndRequest events easily.
            </summary>
        </member>
        <member name="M:NLog.Web.NLogHttpModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes the HttpModule
            </summary>
            <param name="application">ASP.NET application</param>
        </member>
        <member name="M:NLog.Web.NLogHttpModule.Dispose">
            <summary>
            Disposes the module.
            </summary>
        </member>
        <member name="E:NLog.Web.NLogHttpModule.EndRequest">
            <summary>
            Event to be raised at the end of each HTTP Request.
            </summary>
        </member>
        <member name="E:NLog.Web.NLogHttpModule.BeginRequest">
            <summary>
            Event to be raised at the beginning of each HTTP Request.
            </summary>
        </member>
        <member name="T:NLog.Win32.LayoutRenderers.ASPApplicationValueLayoutRenderer">
            <summary>
            ASP Application variable.
            </summary>
        </member>
        <member name="M:NLog.Win32.LayoutRenderers.ASPApplicationValueLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            Because ASP target uses COM Interop which is quite expensive, this method always returns 64.
            </remarks>
        </member>
        <member name="M:NLog.Win32.LayoutRenderers.ASPApplicationValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.Win32.LayoutRenderers.ASPApplicationValueLayoutRenderer.Variable">
            <summary>
            The variable name.
            </summary>
        </member>
        <member name="T:NLog.Win32.LayoutRenderers.ASPRequestValueLayoutRenderer">
            <summary>
            ASP Request variable
            </summary>
        </member>
        <member name="M:NLog.Win32.LayoutRenderers.ASPRequestValueLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            Because ASP target uses COM Interop which is quite expensive, this method always returns 64.
            </remarks>
        </member>
        <member name="M:NLog.Win32.LayoutRenderers.ASPRequestValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP Request variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.Win32.LayoutRenderers.ASPRequestValueLayoutRenderer.Item">
            <summary>
            The item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.
            </summary>
        </member>
        <member name="P:NLog.Win32.LayoutRenderers.ASPRequestValueLayoutRenderer.QueryString">
            <summary>
            The QueryString variable to be rendered.
            </summary>
        </member>
        <member name="P:NLog.Win32.LayoutRenderers.ASPRequestValueLayoutRenderer.Form">
            <summary>
            The form variable to be rendered.
            </summary>
        </member>
        <member name="P:NLog.Win32.LayoutRenderers.ASPRequestValueLayoutRenderer.Cookie">
            <summary>
            The cookie to be rendered.
            </summary>
        </member>
        <member name="P:NLog.Win32.LayoutRenderers.ASPRequestValueLayoutRenderer.ServerVariable">
            <summary>
            The ServerVariables item to be rendered.
            </summary>
        </member>
        <member name="T:NLog.Win32.LayoutRenderers.ASPSessionValueLayoutRenderer">
            <summary>
            ASP Session variable.
            </summary>
        </member>
        <member name="M:NLog.Win32.LayoutRenderers.ASPSessionValueLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            Because ASP target uses COM Interop which is quite expensive, this method always returns 64.
            </remarks>
        </member>
        <member name="M:NLog.Win32.LayoutRenderers.ASPSessionValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP Session variable and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.Win32.LayoutRenderers.ASPSessionValueLayoutRenderer.Variable">
            <summary>
            Session variable name.
            </summary>
        </member>
        <member name="T:NLog.Win32.LayoutRenderers.RegistryLayoutRenderer">
            <summary>
            A value from the Registry.
            </summary>
        </member>
        <member name="M:NLog.Win32.LayoutRenderers.RegistryLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            This function always returns 32.
            </remarks>
        </member>
        <member name="M:NLog.Win32.LayoutRenderers.RegistryLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Reads the specified registry key and value and appends it to
            the passed <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event. Ignored.</param>
        </member>
        <member name="P:NLog.Win32.LayoutRenderers.RegistryLayoutRenderer.Value">
            <summary>
            Registry value.
            </summary>
        </member>
        <member name="P:NLog.Win32.LayoutRenderers.RegistryLayoutRenderer.DefaultValue">
            <summary>
            The value to be output when the specified registry key or value is not found.
            </summary>
        </member>
        <member name="P:NLog.Win32.LayoutRenderers.RegistryLayoutRenderer.Key">
            <summary>
            Registry key.
            </summary>
            <remarks>
            Must have one of the forms:
            <ul>
            <li>HKLM\Key\Full\Name</li>
            <li>HKEY_LOCAL_MACHINE\Key\Full\Name</li>
            <li>HKCU\Key\Full\Name</li>
            <li>HKEY_CURRENT_USER\Key\Full\Name</li>
            </ul>
            </remarks>
        </member>
        <member name="T:NLog.Win32.LayoutRenderers.WindowsIdentityLayoutRenderer">
            <summary>
            Thread Windows identity information (username)
            </summary>
        </member>
        <member name="M:NLog.Win32.LayoutRenderers.WindowsIdentityLayoutRenderer.GetEstimatedBufferSize(NLog.LogEventInfo)">
            <summary>
            Returns the estimated number of characters that are needed to
            hold the rendered value for the specified logging event.
            </summary>
            <param name="logEvent">Logging event information.</param>
            <returns>The number of characters.</returns>
            <remarks>
            If the exact number is not known or
            expensive to calculate this function should return a rough estimate
            that's big enough in most cases, but not too big, in order to conserve memory.
            </remarks>
        </member>
        <member name="M:NLog.Win32.LayoutRenderers.WindowsIdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread windows identity information and appends it to the specified <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.Win32.LayoutRenderers.WindowsIdentityLayoutRenderer.Domain">
            <summary>
            Whether domain name should be included.
            </summary>
        </member>
        <member name="P:NLog.Win32.LayoutRenderers.WindowsIdentityLayoutRenderer.UserName">
            <summary>
            Whether username should be included.
            </summary>
        </member>
        <member name="T:NLog.Win32.Targets.ASPResponseTarget">
            <summary>
            Outputs logging messages through the ASP Response object.
            </summary>
        </member>
        <member name="M:NLog.Win32.Targets.ASPResponseTarget.Write(NLog.LogEventInfo)">
            <summary>
            Outputs the rendered logging event through the <c>OutputDebugString()</c> Win32 API.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Win32.Targets.ASPResponseTarget.AddComments">
            <summary>
            Add &lt;!-- --&gt; comments around all written texts.
            </summary>
        </member>
        <member name="T:NLog.Win32.Targets.ColoredConsoleTarget">
            <summary>
            Writes logging messages to the console with customizable coloring.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/ColoredConsole/Simple/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/ColoredConsole/Simple/Example.cs" />
            <p>
            The result is a colorful console, where each color represents a single log level.
            </p>
            <img src="examples/targets/Screenshots/ColoredConsole/Simple.gif" />
            <p>
            In addition you can configure your own word highlighting rules so that 
            particular words or regular expressions will be marked with 
            a distinguished color:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/ColoredConsole/Word Highlighting/NLog.config" />
            <p>Programmatic equivalent of the above configuration:</p>
            <code lang="C#" src="examples/targets/Configuration API/ColoredConsole/Word Highlighting/Example.cs" />
            <p>
            Here's the result:
            </p>
            <img src="examples/targets/Screenshots/ColoredConsole/Word Highlighting.gif" />
            <p>
            Custom row highlighting lets you colorize the output by any <a href="conditions.html">condition</a>.
            This example shows how to mark all entries containing the word "serious" with white color on red background
            and mark all entries coming from a particular logger with yellow on blue.
            </p>
            <code lang="XML" src="examples/targets/Configuration File/ColoredConsole/Row Highlighting/NLog.config" />
            <p>Programmatic equivalent of the above configuration:</p>
            <code lang="C#" src="examples/targets/Configuration API/ColoredConsole/Row Highlighting/Example.cs" />
            <p>
            Here's the result:
            </p>
            <img src="examples/targets/Screenshots/ColoredConsole/Row Highlighting.gif" />
            </example>
        </member>
        <member name="M:NLog.Win32.Targets.ColoredConsoleTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified log event to the console highlighting entries
            and words based on a set of defined rules.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.Win32.Targets.ColoredConsoleTarget.Initialize">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Win32.Targets.ColoredConsoleTarget.Close">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.ColoredConsoleTarget.ErrorStream">
            <summary>
            Determines whether the error stream (stderr) should be used instead of the output stream (stdout).
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.ColoredConsoleTarget.UseDefaultRowHighlightingRules">
            <summary>
            Use default row highlighting rules.
            </summary>
            <remarks>
            The default rules are:
            <table class="subparamtable">
            <tr>
            <th>Condition</th>
            <th>Foreground Color</th>
            <th>Background Color</th>
            </tr>
            <tr>
            <td>level == LogLevel.Fatal</td>
            <td>Red</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Error</td>
            <td>Yellow</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Warn</td>
            <td>Magenta</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Info</td>
            <td>White</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Debug</td>
            <td>Gray</td>
            <td>NoChange</td>
            </tr>
            <tr>
            <td>level == LogLevel.Trace</td>
            <td>DarkGray</td>
            <td>NoChange</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:NLog.Win32.Targets.ColoredConsoleTarget.RowHighlightingRules">
            <summary>
            Row highlighting rules.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.ColoredConsoleTarget.WordHighlightingRules">
            <summary>
            Word highlighting rules.
            </summary>
        </member>
        <member name="T:NLog.Win32.Targets.ConsoleOutputColor">
            <summary>
            Colored console output color.
            </summary>
            <remarks>
            Note that this enumeration is defined to be binary compatible with 
            .NET 2.0 System.ConsoleColor + some additions
            </remarks>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.Black">
            <summary>
            Black (#000000)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.DarkBlue">
            <summary>
            Dark blue (#000080)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.DarkGreen">
            <summary>
            Dark green (#008000)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.DarkCyan">
            <summary>
            Dark Cyan (#008080)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.DarkRed">
            <summary>
            Dark Red (#800000)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.DarkMagenta">
            <summary>
            Dark Magenta (#800080)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.DarkYellow">
            <summary>
            Dark Yellow (#808000)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.Gray">
            <summary>
            Gray (#C0C0C0)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.DarkGray">
            <summary>
            Dark Gray (#808080)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.Blue">
            <summary>
            Blue (#0000FF)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.Green">
            <summary>
            Green (#00FF00)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.Cyan">
            <summary>
            Cyan (#00FFFF)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.Red">
            <summary>
            Red (#FF0000)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.Magenta">
            <summary>
            Magenta (#FF00FF)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.Yellow">
            <summary>
            Yellow (#FFFF00)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.White">
            <summary>
            White (#FFFFFF)
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleOutputColor.NoChange">
            <summary>
            Don't change the color.
            </summary>
        </member>
        <member name="T:NLog.Win32.Targets.ConsoleRowHighlightingRule">
            <summary>
            The row-highlighting condition.
            </summary>
        </member>
        <member name="F:NLog.Win32.Targets.ConsoleRowHighlightingRule.Default">
            <summary>
            Default highlighting rule. Doesn't change the color.
            </summary>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRule.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Win32.Targets.ConsoleRowHighlightingRule"/>
            </summary>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRule.#ctor(System.String,NLog.Win32.Targets.ConsoleOutputColor,NLog.Win32.Targets.ConsoleOutputColor)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Win32.Targets.ConsoleRowHighlightingRule"/> and
            assigns Condition, ForegroundColor and BackgroundColor properties.
            </summary>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRule.CheckCondition(NLog.LogEventInfo)">
            <summary>
            Checks whether the specified log event matches the condition (if any)
            </summary>
            <param name="logEvent">log event</param>
            <returns><see langword="true"/> if the condition is not defined or 
            if it matches, <see langword="false"/> otherwise</returns>
        </member>
        <member name="P:NLog.Win32.Targets.ConsoleRowHighlightingRule.Condition">
            <summary>
            The condition that must be met in order to set the specified foreground and background color.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.ConsoleRowHighlightingRule.ForegroundColor">
            <summary>
            The foreground color.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.ConsoleRowHighlightingRule.BackgroundColor">
            <summary>
            The background color.
            </summary>
        </member>
        <member name="T:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection">
            <summary>
            A collection of elements of type ConsoleRowHighlightingRule
            </summary>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.#ctor">
            <summary>
            Initializes a new empty instance of the ConsoleRowHighlightingRuleCollection class.
            </summary>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.#ctor(NLog.Win32.Targets.ConsoleRowHighlightingRule[])">
            <summary>
            Initializes a new instance of the ConsoleRowHighlightingRuleCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new ConsoleRowHighlightingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.#ctor(NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection)">
            <summary>
            Initializes a new instance of the ConsoleRowHighlightingRuleCollection class, containing elements
            copied from another instance of ConsoleRowHighlightingRuleCollection
            </summary>
            <param name="items">
            The ConsoleRowHighlightingRuleCollection whose elements are to be added to the new ConsoleRowHighlightingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.AddRange(NLog.Win32.Targets.ConsoleRowHighlightingRule[])">
            <summary>
            Adds the elements of an array to the end of this ConsoleRowHighlightingRuleCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this ConsoleRowHighlightingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.AddRange(NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection)">
            <summary>
            Adds the elements of another ConsoleRowHighlightingRuleCollection to the end of this ConsoleRowHighlightingRuleCollection.
            </summary>
            <param name="items">
            The ConsoleRowHighlightingRuleCollection whose elements are to be added to the end of this ConsoleRowHighlightingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.Add(NLog.Win32.Targets.ConsoleRowHighlightingRule)">
            <summary>
            Adds an instance of type ConsoleRowHighlightingRule to the end of this ConsoleRowHighlightingRuleCollection.
            </summary>
            <param name="value">
            The ConsoleRowHighlightingRule to be added to the end of this ConsoleRowHighlightingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.Contains(NLog.Win32.Targets.ConsoleRowHighlightingRule)">
            <summary>
            Determines whether a specfic ConsoleRowHighlightingRule value is in this ConsoleRowHighlightingRuleCollection.
            </summary>
            <param name="value">
            The ConsoleRowHighlightingRule value to locate in this ConsoleRowHighlightingRuleCollection.
            </param>
            <returns>
            true if value is found in this ConsoleRowHighlightingRuleCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.IndexOf(NLog.Win32.Targets.ConsoleRowHighlightingRule)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this ConsoleRowHighlightingRuleCollection
            </summary>
            <param name="value">
            The ConsoleRowHighlightingRule value to locate in the ConsoleRowHighlightingRuleCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.Insert(System.Int32,NLog.Win32.Targets.ConsoleRowHighlightingRule)">
            <summary>
            Inserts an element into the ConsoleRowHighlightingRuleCollection at the specified index
            </summary>
            <param name="index">
            The index at which the ConsoleRowHighlightingRule is to be inserted.
            </param>
            <param name="value">
            The ConsoleRowHighlightingRule to insert.
            </param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.Remove(NLog.Win32.Targets.ConsoleRowHighlightingRule)">
            <summary>
            Removes the first occurrence of a specific ConsoleRowHighlightingRule from this ConsoleRowHighlightingRuleCollection.
            </summary>
            <param name="value">
            The ConsoleRowHighlightingRule value to remove from this ConsoleRowHighlightingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this ConsoleRowHighlightingRuleCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ConsoleRowHighlightingRule at the given index in this ConsoleRowHighlightingRuleCollection.
            </summary>
        </member>
        <member name="T:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by ConsoleRowHighlightingRuleCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.Enumerator.#ctor(NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.ConsoleRowHighlightingRuleCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.Win32.Targets.ConsoleWordHighlightingRule">
            <summary>
            Highlighting rule for Win32 colorful console.
            </summary>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRule.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Win32.Targets.ConsoleWordHighlightingRule"/>
            </summary>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRule.#ctor(System.String,NLog.Win32.Targets.ConsoleOutputColor,NLog.Win32.Targets.ConsoleOutputColor)">
            <summary>
            Creates a new instance of <see cref="T:NLog.Win32.Targets.ConsoleWordHighlightingRule"/>
            and sets Text, BackgroundColor and ForegroundColor properties.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.ConsoleWordHighlightingRule.Regex">
            <summary>
            The regular expression to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.ConsoleWordHighlightingRule.Text">
            <summary>
            The text to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.ConsoleWordHighlightingRule.WholeWords">
            <summary>
            Match whole words only.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.ConsoleWordHighlightingRule.IgnoreCase">
            <summary>
            Ignore case when comparing texts.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.ConsoleWordHighlightingRule.CompiledRegex">
            <summary>
            Compiled regular expression that matches either Text or Regex property.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.ConsoleWordHighlightingRule.ForegroundColor">
            <summary>
            The foreground color.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.ConsoleWordHighlightingRule.BackgroundColor">
            <summary>
            The background color.
            </summary>
        </member>
        <member name="T:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection">
            <summary>
            A collection of elements of type ConsoleWordHighlightingRule
            </summary>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.#ctor">
            <summary>
            Initializes a new empty instance of the ConsoleWordHighlightingRuleCollection class.
            </summary>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.#ctor(NLog.Win32.Targets.ConsoleWordHighlightingRule[])">
            <summary>
            Initializes a new instance of the ConsoleWordHighlightingRuleCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new ConsoleWordHighlightingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.#ctor(NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection)">
            <summary>
            Initializes a new instance of the ConsoleWordHighlightingRuleCollection class, containing elements
            copied from another instance of ConsoleWordHighlightingRuleCollection
            </summary>
            <param name="items">
            The ConsoleWordHighlightingRuleCollection whose elements are to be added to the new ConsoleWordHighlightingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.AddRange(NLog.Win32.Targets.ConsoleWordHighlightingRule[])">
            <summary>
            Adds the elements of an array to the end of this ConsoleWordHighlightingRuleCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this ConsoleWordHighlightingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.AddRange(NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection)">
            <summary>
            Adds the elements of another ConsoleWordHighlightingRuleCollection to the end of this ConsoleWordHighlightingRuleCollection.
            </summary>
            <param name="items">
            The ConsoleWordHighlightingRuleCollection whose elements are to be added to the end of this ConsoleWordHighlightingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.Add(NLog.Win32.Targets.ConsoleWordHighlightingRule)">
            <summary>
            Adds an instance of type ConsoleWordHighlightingRule to the end of this ConsoleWordHighlightingRuleCollection.
            </summary>
            <param name="value">
            The ConsoleWordHighlightingRule to be added to the end of this ConsoleWordHighlightingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.Contains(NLog.Win32.Targets.ConsoleWordHighlightingRule)">
            <summary>
            Determines whether a specfic ConsoleWordHighlightingRule value is in this ConsoleWordHighlightingRuleCollection.
            </summary>
            <param name="value">
            The ConsoleWordHighlightingRule value to locate in this ConsoleWordHighlightingRuleCollection.
            </param>
            <returns>
            true if value is found in this ConsoleWordHighlightingRuleCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.IndexOf(NLog.Win32.Targets.ConsoleWordHighlightingRule)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this ConsoleWordHighlightingRuleCollection
            </summary>
            <param name="value">
            The ConsoleWordHighlightingRule value to locate in the ConsoleWordHighlightingRuleCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.Insert(System.Int32,NLog.Win32.Targets.ConsoleWordHighlightingRule)">
            <summary>
            Inserts an element into the ConsoleWordHighlightingRuleCollection at the specified index
            </summary>
            <param name="index">
            The index at which the ConsoleWordHighlightingRule is to be inserted.
            </param>
            <param name="value">
            The ConsoleWordHighlightingRule to insert.
            </param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.Remove(NLog.Win32.Targets.ConsoleWordHighlightingRule)">
            <summary>
            Removes the first occurrence of a specific ConsoleWordHighlightingRule from this ConsoleWordHighlightingRuleCollection.
            </summary>
            <param name="value">
            The ConsoleWordHighlightingRule value to remove from this ConsoleWordHighlightingRuleCollection.
            </param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this ConsoleWordHighlightingRuleCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ConsoleWordHighlightingRule at the given index in this ConsoleWordHighlightingRuleCollection.
            </summary>
        </member>
        <member name="T:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by ConsoleWordHighlightingRuleCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.Enumerator.#ctor(NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.ConsoleWordHighlightingRuleCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.Win32.Targets.EventLogTarget">
            <summary>
            Writes log message to the Event Log.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/EventLog/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/EventLog/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Win32.Targets.EventLogTarget.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Win32.Targets.EventLogTarget"/> and 
            </summary>
        </member>
        <member name="M:NLog.Win32.Targets.EventLogTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the event log. 
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Win32.Targets.EventLogTarget.MachineName">
            <summary>
            Machine name on which Event Log service is running.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.EventLogTarget.EventID">
            <summary>
            Layout that renders event ID.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.EventLogTarget.Category">
            <summary>
            Layout that renders event Category.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.EventLogTarget.Source">
            <summary>
            The value to be used as the event Source.
            </summary>
            <remarks>
            By default this is the friendly name of the current AppDomain.
            </remarks>
        </member>
        <member name="P:NLog.Win32.Targets.EventLogTarget.Log">
            <summary>
            Name of the Event Log to write to. This can be System, Application or 
            any user-defined name.
            </summary>
        </member>
        <member name="T:NLog.Win32.Targets.MSMQTarget">
            <summary>
            Writes log message to the specified message queue handled by MSMQ.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/MSMQ/Simple/NLog.config" />
            <p>
            You can use a single target to write to multiple queues (similar to writing to multiple files with the File target).
            </p>
            <code lang="XML" src="examples/targets/Configuration File/MSMQ/Multiple/NLog.config" />
            <p>
            The above examples assume just one target and a single rule. 
            More configuration options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/MSMQ/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Win32.Targets.MSMQTarget.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Adds all layouts used by this target to the specified collection.
            </summary>
            <param name="layouts">The collection to add layouts to.</param>
        </member>
        <member name="M:NLog.Win32.Targets.MSMQTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to a queue specified in the Queue 
            parameter.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Win32.Targets.MSMQTarget.PrepareMessage(NLog.LogEventInfo)">
            <summary>
            Prepares a message to be sent to the message queue.
            </summary>
            <param name="logEvent">The log event to be used when calculating label and text to be written.</param>
            <returns>The message to be sent</returns>
            <remarks>
            You may override this method in inheriting classes
            to provide services like encryption or message 
            authentication.
            </remarks>
        </member>
        <member name="P:NLog.Win32.Targets.MSMQTarget.Queue">
            <summary>
            Name of the queue to write to.
            </summary>
            <remarks>
            To write to a private queue on a local machine use <c>.\private$\QueueName</c>.
            For other available queue names, consult MSMQ documentation.
            </remarks>
        </member>
        <member name="P:NLog.Win32.Targets.MSMQTarget.Label">
            <summary>
            The label to associate with each message.
            </summary>
            <remarks>
            By default no label is associated.
            </remarks>
        </member>
        <member name="P:NLog.Win32.Targets.MSMQTarget.CreateQueueIfNotExists">
            <summary>
            Create the queue if it doesn't exists.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.MSMQTarget.Encoding">
            <summary>
            Encoding to be used when writing text to the queue.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.MSMQTarget.UseXmlEncoding">
            <summary>
            Use the XML format when serializing message.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.MSMQTarget.Recoverable">
            <summary>
            Use recoverable messages (with guaranteed delivery).
            </summary>
        </member>
        <member name="T:NLog.Win32.Targets.OutputDebugStringTarget">
            <summary>
            Outputs logging messages through the <c>OutputDebugString()</c> Win32 API.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/OutputDebugString/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/OutputDebugString/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Win32.Targets.OutputDebugStringTarget.Write(NLog.LogEventInfo)">
            <summary>
            Outputs the rendered logging event through the <c>OutputDebugString()</c> Win32 API.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Win32.Targets.OutputDebugStringTarget.OutputDebugString(System.String)">
            <summary>
            Stub for OutputDebugString native method
            </summary>
            <param name="message">the string to output</param>
        </member>
        <member name="T:NLog.Win32.Targets.PerfCounterTarget">
            <summary>
            Increments specified performance counter on each write.
            </summary>
            <example>
            <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
            <code lang="XML" src="examples/targets/Configuration File/PerfCounter/NLog.config" />
            <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
            <p>
            To set up the log target programmatically use code like this:
            </p>
            <code lang="C#" src="examples/targets/Configuration API/PerfCounter/Simple/Example.cs" />
            </example>
            <remarks>
            TODO:
            1. Unable to create a category allowing multiple counter instances (.Net 2.0 API only, probably)
            2. Is there any way of adding new counters without deleting the whole category?
            3. There should be some mechanism of resetting the counter (e.g every day starts from 0), or auto-switching to 
               another counter instance (with dynamic creation of new instance). This could be done with layouts. 
            </remarks>
        </member>
        <member name="M:NLog.Win32.Targets.PerfCounterTarget.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.Win32.Targets.PerfCounterTarget"/>.
            </summary>
        </member>
        <member name="M:NLog.Win32.Targets.PerfCounterTarget.Write(NLog.LogEventInfo)">
            <summary>
            Increments the configured performance counter.
            </summary>
            <param name="logEvent">log event</param>
        </member>
        <member name="P:NLog.Win32.Targets.PerfCounterTarget.AutoCreate">
            <summary>
            Whether performance counter should be automatically created.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.PerfCounterTarget.CategoryName">
            <summary>
            Performance counter category.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.PerfCounterTarget.CounterName">
            <summary>
            Name of the performance counter.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.PerfCounterTarget.InstanceName">
            <summary>
            Instance name.
            </summary>
        </member>
        <member name="P:NLog.Win32.Targets.PerfCounterTarget.CounterType">
            <summary>
            Performance counter type.
            </summary>
        </member>
        <member name="T:NLog.ConditionMethodAttribute">
            <summary>
            Marks class as a log event Condition and assigns a name to it
            </summary>
        </member>
        <member name="M:NLog.ConditionMethodAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.ConditionMethodAttribute"/> and assigns
            a name to it.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:NLog.ConditionMethodAttribute.Name">
            <summary>
            The name of the condition method.
            </summary>
        </member>
        <member name="T:NLog.ConditionMethodFactory">
            <summary>
            A factory of condition methods. Retrieves condition MethodInfos based on their names.
            </summary>
        </member>
        <member name="M:NLog.ConditionMethodFactory.Clear">
            <summary>
            Removes all condition method information from the factory.
            </summary>
        </member>
        <member name="M:NLog.ConditionMethodFactory.AddConditionMethodsFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Scans the specified assembly for types marked with <see cref="T:NLog.ConditionMethodsAttribute"/> and adds
            them to the factory. Optionally it prepends the specified text to layout renderer names to avoid
            naming collisions.
            </summary>
            <param name="theAssembly">The assembly to be scanned for layout renderers.</param>
            <param name="prefix">The prefix to be prepended to layout renderer names.</param>
        </member>
        <member name="M:NLog.ConditionMethodFactory.AddConditionMethod(System.String,System.Reflection.MethodInfo)">
            <summary>
            Registers the specified condition method under a specified name.
            </summary>
            <param name="name">Name of the condition method.</param>
            <param name="mi"><see cref="T:System.Reflection.MethodInfo"/> of the method to be registered.</param>
        </member>
        <member name="M:NLog.ConditionMethodFactory.CreateConditionMethod(System.String)">
            <summary>
            Returns the <see cref="T:System.Reflection.MethodInfo"/> for the specified condition method.
            </summary>
            <param name="name">Name of the condition method.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> object that represents the condition method.</returns>
        </member>
        <member name="T:NLog.ConditionMethodsAttribute">
            <summary>
            Marks the class as containing condition methods.
            </summary>
        </member>
        <member name="M:NLog.ConditionMethodsAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.ConditionMethodsAttribute"/>.
            </summary>
        </member>
        <member name="T:NLog.FilterAttribute">
            <summary>
            Marks class as a layout renderer and assigns a name to it
            </summary>
        </member>
        <member name="M:NLog.FilterAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.FilterAttribute"/> and assigns
            a name to it.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:NLog.FilterAttribute.Name">
            <summary>
            The name of the filter.
            </summary>
        </member>
        <member name="T:NLog.FilterCollection">
            <summary>
            A collection of elements of type Filter
            </summary>
        </member>
        <member name="M:NLog.FilterCollection.#ctor">
            <summary>
            Initializes a new empty instance of the FilterCollection class.
            </summary>
        </member>
        <member name="M:NLog.FilterCollection.#ctor(NLog.Filter[])">
            <summary>
            Initializes a new instance of the FilterCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new FilterCollection.
            </param>
        </member>
        <member name="M:NLog.FilterCollection.#ctor(NLog.FilterCollection)">
            <summary>
            Initializes a new instance of the FilterCollection class, containing elements
            copied from another instance of FilterCollection
            </summary>
            <param name="items">
            The FilterCollection whose elements are to be added to the new FilterCollection.
            </param>
        </member>
        <member name="M:NLog.FilterCollection.AddRange(NLog.Filter[])">
            <summary>
            Adds the elements of an array to the end of this FilterCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this FilterCollection.
            </param>
        </member>
        <member name="M:NLog.FilterCollection.AddRange(NLog.FilterCollection)">
            <summary>
            Adds the elements of another FilterCollection to the end of this FilterCollection.
            </summary>
            <param name="items">
            The FilterCollection whose elements are to be added to the end of this FilterCollection.
            </param>
        </member>
        <member name="M:NLog.FilterCollection.Add(NLog.Filter)">
            <summary>
            Adds an instance of type Filter to the end of this FilterCollection.
            </summary>
            <param name="value">
            The Filter to be added to the end of this FilterCollection.
            </param>
        </member>
        <member name="M:NLog.FilterCollection.Contains(NLog.Filter)">
            <summary>
            Determines whether a specfic Filter value is in this FilterCollection.
            </summary>
            <param name="value">
            The Filter value to locate in this FilterCollection.
            </param>
            <returns>
            true if value is found in this FilterCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.FilterCollection.IndexOf(NLog.Filter)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this FilterCollection
            </summary>
            <param name="value">
            The Filter value to locate in the FilterCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.FilterCollection.Insert(System.Int32,NLog.Filter)">
            <summary>
            Inserts an element into the FilterCollection at the specified index
            </summary>
            <param name="index">
            The index at which the Filter is to be inserted.
            </param>
            <param name="value">
            The Filter to insert.
            </param>
        </member>
        <member name="M:NLog.FilterCollection.Remove(NLog.Filter)">
            <summary>
            Removes the first occurrence of a specific Filter from this FilterCollection.
            </summary>
            <param name="value">
            The Filter value to remove from this FilterCollection.
            </param>
        </member>
        <member name="M:NLog.FilterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this FilterCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.FilterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Filter at the given index in this FilterCollection.
            </summary>
        </member>
        <member name="T:NLog.FilterCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by FilterCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.FilterCollection.Enumerator.#ctor(NLog.FilterCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.FilterCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.FilterCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.FilterCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.FilterCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.FilterFactory">
            <summary>
            A factory of logging filters. Creates new filters based on their names.
            </summary>
        </member>
        <member name="M:NLog.FilterFactory.Clear">
            <summary>
            Removes all filter information from the factory.
            </summary>
        </member>
        <member name="M:NLog.FilterFactory.AddFiltersFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Scans the specified assembly for types marked with <see cref="T:NLog.FilterAttribute"/> and adds
            them to the factory. Optionally it prepends the specified text to filter names to avoid
            naming collisions.
            </summary>
            <param name="theAssembly">The assembly to be scanned for filters.</param>
            <param name="prefix">The prefix to be prepended to filter names.</param>
        </member>
        <member name="M:NLog.FilterFactory.AddFilter(System.String,System.Type)">
            <summary>
            Registers the specified filter type to the factory under a specified name.
            </summary>
            <param name="name">The name of the filter (e.g. <code>whenEquals</code> or <code>whenContains</code>)</param>
            <param name="t">The type of the new filter</param>
            <remarks>
            The name specified in the name parameter can then be used
            to create filters.
            </remarks>
        </member>
        <member name="M:NLog.FilterFactory.CreateFilter(System.String)">
            <summary>
            Creates the filter object based on its filter name.
            </summary>
            <param name="name">The name of the filter (e.g. <code>whenEquals</code> or <code>whenNotEqual</code>)</param>
            <returns>A new instance of the <see cref="T:NLog.Filter"/> object.</returns>
        </member>
        <member name="P:NLog.FilterFactory.FilterTypes">
            <summary>
            Collection of filter types added to the factory.
            </summary>
        </member>
        <member name="T:NLog.FilterResult">
            <summary>
            Filter result.
            </summary>
        </member>
        <member name="F:NLog.FilterResult.Neutral">
            <summary>
            The filter doesn't want to decide whether to log or discard the message.
            </summary>
        </member>
        <member name="F:NLog.FilterResult.Log">
            <summary>
            The message should be logged.
            </summary>
        </member>
        <member name="F:NLog.FilterResult.Ignore">
            <summary>
            The message should not be logged.
            </summary>
        </member>
        <member name="F:NLog.FilterResult.LogFinal">
            <summary>
            The message should be logged and processing should be finished.
            </summary>
        </member>
        <member name="F:NLog.FilterResult.IgnoreFinal">
            <summary>
            The message should not be logged and processing should be finished.
            </summary>
        </member>
        <member name="T:NLog.GDC">
            <summary>
            Global Diagnostics Context - a dictionary structure to hold per-application-instance values.
            </summary>
        </member>
        <member name="M:NLog.GDC.Set(System.String,System.String)">
            <summary>
            Sets the Global Diagnostics Context item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.GDC.Get(System.String)">
            <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The item value of String.Empty if the value is not present.</returns>
        </member>
        <member name="M:NLog.GDC.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread GDC.</returns>
        </member>
        <member name="M:NLog.GDC.Remove(System.String)">
            <summary>
            Removes the specified item from the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.GDC.Clear">
            <summary>
            Clears the content of the GDC.
            </summary>
        </member>
        <member name="T:NLog.Layout">
            <summary>
            Represents a string with embedded placeholders that can render contextual information.
            </summary>
        </member>
        <member name="M:NLog.Layout.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Layout"/> and sets it to empty string.
            </summary>
        </member>
        <member name="M:NLog.Layout.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:NLog.Layout"/> and sets it to the specified string.
            </summary>
            <param name="txt">The layout string to parse.</param>
        </member>
        <member name="M:NLog.Layout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers
            that make up the event.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="M:NLog.Layout.NeedsStackTrace">
            <summary>
            Returns the value indicating whether a stack trace and/or the source file
            information should be gathered during layout processing.
            </summary>
            <returns>0 - don't include stack trace<br/>1 - include stack trace without source file information<br/>2 - include full stack trace</returns>
        </member>
        <member name="M:NLog.Layout.IsVolatile">
            <summary>
            Returns the value indicating whether this layout includes any volatile 
            layout renderers.
            </summary>
            <returns><see langword="true"/> when the layout includes at least 
            one volatile renderer, <see langword="false"/> otherwise.</returns>
            <remarks>
            Volatile layout renderers are dependent on information not contained 
            in <see cref="T:NLog.LogEventInfo"/> (such as thread-specific data, MDC data, NDC data).
            </remarks>
        </member>
        <member name="M:NLog.Layout.Precalculate(NLog.LogEventInfo)">
            <summary>
            Precalculates the layout for the specified log event and stores the result
            in per-log event cache.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            Calling this method enables you to store the log event in a buffer
            and/or potentially evaluate it in another thread even though the 
            layout may contain thread-dependent renderer.
            </remarks>
        </member>
        <member name="M:NLog.Layout.Escape(System.String)">
            <summary>
            Escapes the passed text so that it can
            be used literally in all places where
            layout is normally expected without being
            treated as layout.
            </summary>
            <param name="text">The text to be escaped.</param>
            <returns>The escaped text.</returns>
            <remarks>
            Escaping is done by replacing all occurences of
            '${' with '${literal:text=${}'
            </remarks>
        </member>
        <member name="M:NLog.Layout.Evaluate(System.String,NLog.LogEventInfo)">
            <summary>
            Evaluates the specified text by expadinging all layout renderers.
            </summary>
            <param name="text">The text to be evaluated.</param>
            <param name="logEvent">Log event to be used for evaluation</param>
            <returns>The input text with all occurences of ${} replaced with
            values provided by the appropriate layout renderers.</returns>
        </member>
        <member name="M:NLog.Layout.Evaluate(System.String)">
            <summary>
            Evaluates the specified text by expadinging all layout renderers
            in new <see cref="T:NLog.LogEventInfo"/> context.
            </summary>
            <param name="text">The text to be evaluated.</param>
            <returns>The input text with all occurences of ${} replaced with
            values provided by the appropriate layout renderers.</returns>
        </member>
        <member name="M:NLog.Layout.Initialize">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layout.Close">
            <summary>
            Closes the layout;
            </summary>
        </member>
        <member name="M:NLog.Layout.PopulateLayouts(NLog.LayoutCollection)">
            <summary>
            Add this layout and all sub-layouts to the specified collection..
            </summary>
            <param name="layouts">The collection of layouts.</param>
        </member>
        <member name="M:NLog.Layout.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:NLog.Layout.Text">
            <summary>
            The layout text
            </summary>
        </member>
        <member name="P:NLog.Layout.IsAppDomainFixed">
            <summary>
            Returns true if this layout produces a value that doesn't change for a particular
            AppDomain.
            </summary>
        </member>
        <member name="P:NLog.Layout.Renderers">
            <summary>
            A collection of <see cref="T:NLog.LayoutRenderer"/> objects that make up this layout.
            </summary>
        </member>
        <member name="T:NLog.LayoutAttribute">
            <summary>
            Marks class as a layout renderer and assigns a format string to it.
            </summary>
        </member>
        <member name="M:NLog.LayoutAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.LayoutAttribute"/>
            and assigns the <see cref="P:NLog.LayoutAttribute.Name"/> to the specified value.
            </summary>
            <param name="name">layout name</param>
        </member>
        <member name="P:NLog.LayoutAttribute.Name">
            <summary>
            The layout name.
            </summary>
        </member>
        <member name="T:NLog.LayoutCollection">
            <summary>
            A collection of elements of type ILayout
            </summary>
        </member>
        <member name="M:NLog.LayoutCollection.#ctor">
            <summary>
            Initializes a new empty instance of the LayoutCollection class.
            </summary>
        </member>
        <member name="M:NLog.LayoutCollection.#ctor(NLog.ILayout[])">
            <summary>
            Initializes a new instance of the LayoutCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new LayoutCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutCollection.#ctor(NLog.LayoutCollection)">
            <summary>
            Initializes a new instance of the LayoutCollection class, containing elements
            copied from another instance of LayoutCollection
            </summary>
            <param name="items">
            The LayoutCollection whose elements are to be added to the new LayoutCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutCollection.AddRange(NLog.ILayout[])">
            <summary>
            Adds the elements of an array to the end of this LayoutCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this LayoutCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutCollection.AddRange(NLog.LayoutCollection)">
            <summary>
            Adds the elements of another LayoutCollection to the end of this LayoutCollection.
            </summary>
            <param name="items">
            The LayoutCollection whose elements are to be added to the end of this LayoutCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutCollection.Add(NLog.ILayout)">
            <summary>
            Adds an instance of type ILayout to the end of this LayoutCollection.
            </summary>
            <param name="value">
            The ILayout to be added to the end of this LayoutCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutCollection.Contains(NLog.ILayout)">
            <summary>
            Determines whether a specfic ILayout value is in this LayoutCollection.
            </summary>
            <param name="value">
            The ILayout value to locate in this LayoutCollection.
            </param>
            <returns>
            true if value is found in this LayoutCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.LayoutCollection.IndexOf(NLog.ILayout)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this LayoutCollection
            </summary>
            <param name="value">
            The ILayout value to locate in the LayoutCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.LayoutCollection.Insert(System.Int32,NLog.ILayout)">
            <summary>
            Inserts an element into the LayoutCollection at the specified index
            </summary>
            <param name="index">
            The index at which the ILayout is to be inserted.
            </param>
            <param name="value">
            The ILayout to insert.
            </param>
        </member>
        <member name="M:NLog.LayoutCollection.Remove(NLog.ILayout)">
            <summary>
            Removes the first occurrence of a specific ILayout from this LayoutCollection.
            </summary>
            <param name="value">
            The ILayout value to remove from this LayoutCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this LayoutCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.LayoutCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ILayout at the given index in this LayoutCollection.
            </summary>
        </member>
        <member name="T:NLog.LayoutCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by LayoutCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.LayoutCollection.Enumerator.#ctor(NLog.LayoutCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.LayoutCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.LayoutCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.LayoutCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.LayoutCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.LayoutFactory">
            <summary>
            A factory for layouts. Creates new layout instances based on their names.
            </summary>
        </member>
        <member name="M:NLog.LayoutFactory.Clear">
            <summary>
            Removes all layout information from the factory.
            </summary>
        </member>
        <member name="M:NLog.LayoutFactory.AddLayoutsFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Scans the specified assembly for types marked with <see cref="T:NLog.LayoutAttribute"/> and adds
            them to the factory. Optionally it prepends the specified text to layout names to avoid
            naming collisions.
            </summary>
            <param name="theAssembly">The assembly to be scanned for layouts.</param>
            <param name="prefix">The prefix to be prepended to layout names.</param>
        </member>
        <member name="M:NLog.LayoutFactory.AddLayout(System.String,System.Type)">
            <summary>
            Registers the specified layout type to the factory under a specified name.
            </summary>
            <param name="name">The name of the layout (e.g. <code>XML</code>, <code>CSV</code> or <code>HTML</code>)</param>
            <param name="t">The type of the new layout</param>
            <remarks>
            The name specified in the name parameter can then be used
            to reference layouts.
            </remarks>
        </member>
        <member name="M:NLog.LayoutFactory.CreateLayout(System.String)">
            <summary>
            Creates the layout renderer object based on its layout renderer name and sets its properties from parameters string.
            </summary>
            <param name="name">The name of the layout renderer (e.g. <code>message</code> or <code>aspnet-request</code>)</param>
            <returns>A new instance of the <see cref="T:NLog.ILayout"/> object.</returns>
        </member>
        <member name="P:NLog.LayoutFactory.LayoutTypes">
            <summary>
            Collection of layout types added to the factory.
            </summary>
        </member>
        <member name="T:NLog.LayoutRendererAttribute">
            <summary>
            Marks class as a layout renderer and assigns a format string to it.
            </summary>
        </member>
        <member name="M:NLog.LayoutRendererAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.LayoutRendererAttribute"/>
            and assigns the <see cref="P:NLog.LayoutRendererAttribute.FormatString"/> to the specified value.
            </summary>
            <param name="formatString"></param>
        </member>
        <member name="P:NLog.LayoutRendererAttribute.FormatString">
            <summary>
            The format string that can be used to invoke the layout renderer.
            </summary>
        </member>
        <member name="P:NLog.LayoutRendererAttribute.IgnoresPadding">
            <summary>
            Marks the specified layout renderer as ignoring padding (used mostly for
            documentation generation).
            </summary>
        </member>
        <member name="P:NLog.LayoutRendererAttribute.UsingLogEventInfo">
            <summary>
            Marks the specified layout renderer as relying purely on the contents
            of <see cref="T:NLog.LogEventInfo"/> only and not on any other information (such as thread-
            </summary>
        </member>
        <member name="T:NLog.LayoutRendererCollection">
            <summary>
            A collection of elements of type LayoutRenderer
            </summary>
        </member>
        <member name="M:NLog.LayoutRendererCollection.#ctor">
            <summary>
            Initializes a new empty instance of the LayoutRendererCollection class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRendererCollection.#ctor(NLog.LayoutRenderer[])">
            <summary>
            Initializes a new instance of the LayoutRendererCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new LayoutRendererCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.#ctor(NLog.LayoutRendererCollection)">
            <summary>
            Initializes a new instance of the LayoutRendererCollection class, containing elements
            copied from another instance of LayoutRendererCollection
            </summary>
            <param name="items">
            The LayoutRendererCollection whose elements are to be added to the new LayoutRendererCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.AddRange(NLog.LayoutRenderer[])">
            <summary>
            Adds the elements of an array to the end of this LayoutRendererCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this LayoutRendererCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.AddRange(NLog.LayoutRendererCollection)">
            <summary>
            Adds the elements of another LayoutRendererCollection to the end of this LayoutRendererCollection.
            </summary>
            <param name="items">
            The LayoutRendererCollection whose elements are to be added to the end of this LayoutRendererCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.Add(NLog.LayoutRenderer)">
            <summary>
            Adds an instance of type LayoutRenderer to the end of this LayoutRendererCollection.
            </summary>
            <param name="value">
            The LayoutRenderer to be added to the end of this LayoutRendererCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.Contains(NLog.LayoutRenderer)">
            <summary>
            Determines whether a specfic LayoutRenderer value is in this LayoutRendererCollection.
            </summary>
            <param name="value">
            The LayoutRenderer value to locate in this LayoutRendererCollection.
            </param>
            <returns>
            true if value is found in this LayoutRendererCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.LayoutRendererCollection.IndexOf(NLog.LayoutRenderer)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this LayoutRendererCollection
            </summary>
            <param name="value">
            The LayoutRenderer value to locate in the LayoutRendererCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.LayoutRendererCollection.Insert(System.Int32,NLog.LayoutRenderer)">
            <summary>
            Inserts an element into the LayoutRendererCollection at the specified index
            </summary>
            <param name="index">
            The index at which the LayoutRenderer is to be inserted.
            </param>
            <param name="value">
            The LayoutRenderer to insert.
            </param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.Remove(NLog.LayoutRenderer)">
            <summary>
            Removes the first occurrence of a specific LayoutRenderer from this LayoutRendererCollection.
            </summary>
            <param name="value">
            The LayoutRenderer value to remove from this LayoutRendererCollection.
            </param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this LayoutRendererCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.LayoutRendererCollection.Item(System.Int32)">
            <summary>
            Gets or sets the LayoutRenderer at the given index in this LayoutRendererCollection.
            </summary>
        </member>
        <member name="T:NLog.LayoutRendererCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by LayoutRendererCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.LayoutRendererCollection.Enumerator.#ctor(NLog.LayoutRendererCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.LayoutRendererCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.LayoutRendererCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.LayoutRendererCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.LayoutRendererCollection.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.LayoutRendererFactory">
            <summary>
            A factory for layout renderers.  Creates new layout renderers based on their names.
            </summary>
        </member>
        <member name="M:NLog.LayoutRendererFactory.Clear">
            <summary>
            Removes all layout renderer information from the factory.
            </summary>
        </member>
        <member name="M:NLog.LayoutRendererFactory.AddLayoutRenderersFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Scans the specified assembly for types marked with <see cref="T:NLog.LayoutRendererAttribute"/> and adds
            them to the factory. Optionally it prepends the specified text to layout renderer names to avoid
            naming collisions.
            </summary>
            <param name="theAssembly">The assembly to be scanned for layout renderers.</param>
            <param name="prefix">The prefix to be prepended to layout renderer names.</param>
        </member>
        <member name="M:NLog.LayoutRendererFactory.AddLayoutRenderer(System.String,System.Type)">
            <summary>
            Registers the specified layout renderer type to the factory under a specified name.
            </summary>
            <param name="name">The name of the layout renderer (e.g. <code>logger</code>, <code>message</code> or <code>aspnet-request</code>)</param>
            <param name="t">The type of the new layout renderer</param>
            <remarks>
            The name specified in the name parameter can then be used
            to create layout renderers.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRendererFactory.CreateLayoutRenderer(System.String,System.String)">
            <summary>
            Creates the layout renderer object based on its layout renderer name and sets its properties from parameters string.
            </summary>
            <param name="name">The name of the layout renderer (e.g. <code>message</code> or <code>aspnet-request</code>)</param>
            <param name="parameters">Parameters to the layout renderer.</param>
            <returns>A new instance of the <see cref="T:NLog.LayoutRenderer"/> object.</returns>
        </member>
        <member name="T:NLog.LogEventInfo">
            <summary>
            Represents the logging event.
            </summary>
        </member>
        <member name="F:NLog.LogEventInfo.ZeroDate">
            <summary>
            The date of the first log event created.
            </summary>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.LogEventInfo"/>.
            </summary>
        </member>
        <member name="M:NLog.LogEventInfo.CreateNullEvent">
            <summary>
            Creates the null event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:NLog.LogEventInfo"/> and assigns its fields.
            </summary>
            <param name="level">Log level</param>
            <param name="loggerName">Logger name</param>
            <param name="message">Log message including parameter placeholders</param>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Creates a new instance of <see cref="T:NLog.LogEventInfo"/> and assigns its fields.
            </summary>
            <param name="level">Log level</param>
            <param name="loggerName">Logger name</param>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> object</param>
            <param name="message">Log message including parameter placeholders</param>
            <param name="parameters">Parameter array.</param>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[],System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:NLog.LogEventInfo"/> and assigns its fields.
            </summary>
            <param name="level">Log level</param>
            <param name="loggerName">Logger name</param>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> object</param>
            <param name="message">Log message including parameter placeholders</param>
            <param name="parameters">Parameter array.</param>
            <param name="exception">Exception information.</param>
        </member>
        <member name="P:NLog.LogEventInfo.TimeStamp">
            <summary>
            Gets or sets the timestamp of the logging event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Level">
            <summary>
            Gets or sets the level of the logging event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.HasStackTrace">
            <summary>
            Returns true if stack trace has been set for this event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.UserStackFrame">
            <summary>
            Gets the stack frame of the method that did the logging.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.UserStackFrameNumber">
            <summary>
            Gets the number index of the stack frame that represents the user
            code (not the NLog code)
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.StackTrace">
            <summary>
            Gets the entire stack trace.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Exception">
            <summary>
            Gets or sets the exception information.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.LoggerName">
            <summary>
            Gets or sets the logger name.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.LoggerShortName">
            <summary>
            Gets the logger short name.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Message">
            <summary>
            Gets the raw log message including any parameter placeholders.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Parameters">
            <summary>
            Gets the parameter values or <see langword="null" /> if no parameters have
            been specified.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.FormatProvider">
            <summary>
            Gets the format provider that was provided while logging or <see langword="null" />
            when no formatProvider was specified.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.FormattedMessage">
            <summary>
            Returns the formatted message.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Context">
            <summary>
            Gets the dictionary of per-event context properties.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.SequenceID">
            <summary>
            The unique identifier of log event which is automatically generated
            and monotonously increasing.
            </summary>
        </member>
        <member name="T:NLog.LoggingConfigurationChanged">
            <summary>
            Represents a method that's invoked each time a logging configuration changes.
            </summary>
        </member>
        <member name="T:NLog.LoggingConfigurationReloaded">
            <summary>
            Represents a method that's invoked each time a logging configuration gets reloaded
            to signal either success or failure.
            </summary>
        </member>
        <member name="T:NLog.LogFactory">
            <summary>
            Creates and manages instances of <see cref="T:NLog.Logger" /> objects.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NLog.LogFactory"/>
            </summary>
        </member>
        <member name="M:NLog.LogFactory.#ctor(NLog.Config.LoggingConfiguration)">
            <summary>
            Creates a new instance of <see cref="T:NLog.LogFactory"/> and sets the initial configuration.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.CreateNullLogger">
            <summary>
            Creates a logger that discards all log messages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.LogFactory.GetCurrentClassLogger">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogFactory.GetCurrentClassLogger(System.Type)">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <param name="loggerType">type of the logger to create. The type must inherit from NLog.Logger</param>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogFactory.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">name of the logger</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogFactory.GetLogger(System.String,System.Type)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">name of the logger</param>
            <param name="loggerType">type of the logger to create. The type must inherit from NLog.Logger</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the 
            same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogFactory.ReconfigExistingLoggers">
            <summary>
            Loops through all loggers previously returned by GetLogger
            and recalculates their target and filter list. Useful after modifying the configuration programmatically
            to ensure that all loggers have been properly configured.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.Flush">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
        </member>
        <member name="M:NLog.LogFactory.Flush(System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.DisableLogging">
            <summary>Decreases the log enable counter and if it reaches -1 
            the logs are disabled.</summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.EnableLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.DisableLogging"/> calls.</remarks>
            <returns>An object that iplements IDisposable whose Dispose() method
            reenables logging. To be used with C# <c>using ()</c> statement.</returns>
        </member>
        <member name="M:NLog.LogFactory.EnableLogging">
            <summary>Increases the log enable counter and if it reaches 0 the logs are disabled.</summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.EnableLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.DisableLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogFactory.IsLoggingEnabled">
            <summary>
            Returns <see langword="true"/> if logging is currently enabled.
            </summary>
            <returns><see langword="true"/> if logging is currently enabled, 
            <see langword="false"/> otherwise.</returns>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.EnableLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.DisableLogging"/> calls.</remarks>
        </member>
        <member name="E:NLog.LogFactory.ConfigurationChanged">
            <summary>
            Occurs when logging <see cref="P:NLog.LogFactory.Configuration"/> changes.
            </summary>
        </member>
        <member name="E:NLog.LogFactory.ConfigurationReloaded">
            <summary>
            Occurs when logging <see cref="P:NLog.LogFactory.Configuration"/> gets reloaded.
            </summary>
        </member>
        <member name="P:NLog.LogFactory.ThrowExceptions">
            <summary>
            Specified whether NLog should throw exceptions. By default exceptions
            are not thrown under any circumstances.
            </summary>
        </member>
        <member name="P:NLog.LogFactory.Configuration">
            <summary>
            Gets or sets the current logging configuration.
            </summary>
        </member>
        <member name="P:NLog.LogFactory.GlobalThreshold">
            <summary>
            Global log threshold. Log events below this threshold are not logged.
            </summary>
        </member>
        <member name="T:NLog.LogFactory`1">
            <summary>
            Specialized LogFactory that can return instances of custom logger types.
            </summary>
            <typeparam name="LoggerType">The type of the logger to be returned. Must inherit from <see cref="T:NLog.Logger"/>.</typeparam>
        </member>
        <member name="M:NLog.LogFactory`1.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <typeparamref name="LoggerType"/>.</returns>
        </member>
        <member name="M:NLog.LogFactory`1.GetCurrentClassLogger">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="T:NLog.LoggerReconfiguredDelegate">
            <summary>
            Represents a method that's invoked each time a <see cref="T:NLog.Logger"/> configuration changes.
            </summary>
            <param name="logger">logger that was reconfigured</param>
            <remarks>
            'Reconfiguring' a logger means rebuilding the list of targets and filters
            that will be invoked on logging.
            This may or may not influence the result returned by IsXXXXEnabled properties.
            </remarks>
        </member>
        <member name="T:NLog.Logger">
            <summary>
            Provides logging interface and utility functions.
            </summary>
        </member>
        <member name="M:NLog.Logger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Logger"/> class.
            </summary>
        </member>
        <member name="M:NLog.Logger.IsEnabled(NLog.LogLevel)">
            <summary>
            Determines if logging is enabled for the specified level.
            </summary>
            <param name="level">level to be checked</param>
            <returns><see langword="true" /> if logging is enabled for the specified level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogEventInfo)">
            <overloads>
            Writes the diagnostic message at the specified level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the specified diagnostic message.
            </summary>
            <param name="logEvent">log event</param>
        </member>
        <member name="M:NLog.Logger.Log(System.Type,NLog.LogEventInfo)">
            <overloads>
            Writes the diagnostic message at the specified level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the specified diagnostic message.
            </summary>
            <param name="logEvent">log event</param>
            <param name="wrapperType">The name of the type that wraps Logger</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String)">
            <overloads>
            Writes the diagnostic message at the specified level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">the log level.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.LogException(NLog.LogLevel,System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Boolean" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Boolean" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Char" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Char" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Byte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Byte" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.String" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.String" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Int32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Int32" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Int64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Int64" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Single" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Single" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Double" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Double" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Decimal" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Decimal" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Object" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.Object" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.SByte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.SByte" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.UInt32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.UInt32" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.UInt64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">the log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified <see cref="T:System.UInt64" /> as a parameter.
            </summary>
            <param name="level">the log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String)">
            <overloads>
            Writes the diagnostic message at the <c>Trace</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.TraceException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Boolean" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Boolean" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Char" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Char" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Byte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Byte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.String" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.String" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Int32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Int32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Int64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Int64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Single" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Single" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Double" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Double" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Decimal" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Decimal" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Object" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.Object" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.SByte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.SByte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.UInt32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.UInt32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.UInt64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified <see cref="T:System.UInt64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String)">
            <overloads>
            Writes the diagnostic message at the <c>Debug</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.DebugException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Boolean" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Boolean" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Char" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Char" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Byte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Byte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.String" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.String" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Int32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Int32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Int64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Int64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Single" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Single" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Double" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Double" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Decimal" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Decimal" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Object" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.Object" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.SByte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.SByte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.UInt32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.UInt32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.UInt64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified <see cref="T:System.UInt64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String)">
            <overloads>
            Writes the diagnostic message at the <c>Info</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.InfoException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Boolean" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Boolean" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Char" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Char" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Byte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Byte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.String" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.String" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Int32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Int32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Int64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Int64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Single" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Single" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Double" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Double" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Decimal" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Decimal" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Object" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.Object" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.SByte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.SByte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.UInt32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.UInt32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.UInt64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified <see cref="T:System.UInt64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String)">
            <overloads>
            Writes the diagnostic message at the <c>Warn</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.WarnException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Boolean" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Boolean" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Char" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Char" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Byte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Byte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.String" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.String" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Int32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Int32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Int64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Int64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Single" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Single" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Double" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Double" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Decimal" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Decimal" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Object" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.Object" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.SByte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.SByte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.UInt32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.UInt32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.UInt64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified <see cref="T:System.UInt64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String)">
            <overloads>
            Writes the diagnostic message at the <c>Error</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.ErrorException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Boolean" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Boolean" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Char" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Char" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Byte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Byte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.String" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.String" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Int32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Int32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Int64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Int64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Single" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Single" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Double" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Double" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Decimal" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Decimal" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Object" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.Object" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.SByte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.SByte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.UInt32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.UInt32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.UInt64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified <see cref="T:System.UInt64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String)">
            <overloads>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.FatalException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Boolean" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Boolean" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Boolean" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Char" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Char" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Char" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Byte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Byte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Byte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.String" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.String" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.String" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Int32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Int32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Int64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Int64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Int64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Single" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Single" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Single" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Double" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Double" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Double" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Decimal" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Decimal" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Decimal" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Object" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.Object" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.Object" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.SByte" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.SByte" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.SByte" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.UInt32" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.UInt32" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt32" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.UInt64" /> as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified <see cref="T:System.UInt64" /> as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The <see cref="T:System.UInt64" /> argument to format.</param>
        </member>
        <member name="E:NLog.Logger.LoggerReconfigured">
            <summary>
            Occurs when logger configuration changes.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:NLog.Logger.Name">
            <summary>
            Gets the name of the logger.
            </summary>
        </member>
        <member name="P:NLog.Logger.Factory">
            <summary>
            Gets the factory that created this logger.
            </summary>
        </member>
        <member name="P:NLog.Logger.IsTraceEnabled">
            <summary>
            Determines if logging is enabled for the <c>Trace</c> level.
            </summary>
            <returns><see langword="true" /> if logging is enabled for the <c>Trace</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsDebugEnabled">
            <summary>
            Determines if logging is enabled for the <c>Debug</c> level.
            </summary>
            <returns><see langword="true" /> if logging is enabled for the <c>Debug</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsInfoEnabled">
            <summary>
            Determines if logging is enabled for the <c>Info</c> level.
            </summary>
            <returns><see langword="true" /> if logging is enabled for the <c>Info</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsWarnEnabled">
            <summary>
            Determines if logging is enabled for the <c>Warn</c> level.
            </summary>
            <returns><see langword="true" /> if logging is enabled for the <c>Warn</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsErrorEnabled">
            <summary>
            Determines if logging is enabled for the <c>Error</c> level.
            </summary>
            <returns><see langword="true" /> if logging is enabled for the <c>Error</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsFatalEnabled">
            <summary>
            Determines if logging is enabled for the <c>Fatal</c> level.
            </summary>
            <returns><see langword="true" /> if logging is enabled for the <c>Fatal</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="T:NLog.LogLevel">
            <summary>
            Defines available log levels.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Trace">
            <summary>
            The Trace level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Debug">
            <summary>
            The Debug level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Info">
            <summary>
            The Info level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Warn">
            <summary>
            The Warn level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Error">
            <summary>
            The Error level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Fatal">
            <summary>
            The Fatal level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Off">
            <summary>
            The Off level.
            </summary>
        </member>
        <member name="M:NLog.LogLevel.FromOrdinal(System.Int32)">
            <summary>
            Gets the <see cref="T:NLog.LogLevel"/> that corresponds to the specified ordinal.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns>The <see cref="T:NLog.LogLevel"/> instance. For 0 it returns <see cref="F:NLog.LogLevel.Debug"/>, 1 gives <see cref="F:NLog.LogLevel.Info"/> and so on</returns>
        </member>
        <member name="M:NLog.LogLevel.op_LessThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is less than or equal to the second one.
            </summary>
            <param name="l1">The first level.</param>
            <param name="l2">The second level.</param>
            <returns>The value of <c>l1.Ordinal &lt;= l2.Ordinal</c></returns>
        </member>
        <member name="M:NLog.LogLevel.op_GreaterThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is greater than or equal to the second one.
            </summary>
            <param name="l1">The first level.</param>
            <param name="l2">The second level.</param>
            <returns>The value of <c>l1.Ordinal &gt;= l2.Ordinal</c></returns>
        </member>
        <member name="M:NLog.LogLevel.op_LessThan(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is less than the second one.
            </summary>
            <param name="l1">The first level.</param>
            <param name="l2">The second level.</param>
            <returns>The value of <c>l1.Ordinal &lt; l2.Ordinal</c></returns>
        </member>
        <member name="M:NLog.LogLevel.op_GreaterThan(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel"/> objects 
            and returns a value indicating whether 
            the first one is greater than the second one.
            </summary>
            <param name="l1">The first level.</param>
            <param name="l2">The second level.</param>
            <returns>The value of <c>l1.Ordinal &gt; l2.Ordinal</c></returns>
        </member>
        <member name="M:NLog.LogLevel.FromString(System.String)">
            <summary>
            Returns the <see cref="T:NLog.LogLevel"/> that corresponds to the supplied <see langword="string" />.
            </summary>
            <param name="s">the texual representation of the log level</param>
            <returns>the enumeration value.</returns>
        </member>
        <member name="M:NLog.LogLevel.ToString">
            <summary>
            Returns a string representation of the log level.
            </summary>
            <returns>Log level name.</returns>
        </member>
        <member name="M:NLog.LogLevel.CompareTo(System.Object)">
            <summary>
            Compares the level to the other <see cref="T:NLog.LogLevel"/> object.
            </summary>
            <param name="obj">the object object</param>
            <returns>a value less than zero when this logger's <see cref="P:NLog.LogLevel.Ordinal"/> is 
            less than the other logger's ordinal, 0 when they are equal and 
            greater than zero when this ordinal is greater than the
            other ordinal.</returns>
        </member>
        <member name="P:NLog.LogLevel.Name">
            <summary>
            Gets the name of the log level.
            </summary>
        </member>
        <member name="P:NLog.LogLevel.UppercaseName">
            <summary>
            Gets the name of the logger in upper case.
            </summary>
        </member>
        <member name="P:NLog.LogLevel.LowercaseName">
            <summary>
            Gets the name of the logger in lower case.
            </summary>
        </member>
        <member name="T:NLog.LogManager">
            <summary>
            Creates and manages instances of <see cref="T:NLog.Logger" /> objects.
            </summary>
        </member>
        <member name="M:NLog.LogManager.GetCurrentClassLogger">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogManager.GetCurrentClassLogger(System.Type)">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <param name="loggerType">the logger class. The class must inherit from <see cref="T:NLog.Logger"/></param>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogManager.CreateNullLogger">
            <summary>
            Creates a logger that discards all log messages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.LogManager.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">name of the logger</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogManager.GetLogger(System.String,System.Type)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">name of the logger</param>
            <param name="loggerType">the logger class. The class must inherit from <see cref="T:NLog.Logger"/></param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogManager.ReconfigExistingLoggers">
            <summary>
            Loops through all loggers previously returned by GetLogger.
            and recalculates their target and filter list. Useful after modifying the configuration programmatically
            to ensure that all loggers have been properly configured.
            </summary>
        </member>
        <member name="M:NLog.LogManager.Flush">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
        </member>
        <member name="M:NLog.LogManager.Flush(System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.DisableLogging">
            <summary>Decreases the log enable counter and if it reaches -1 
            the logs are disabled.</summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging"/> calls.</remarks>
            <returns>An object that iplements IDisposable whose Dispose() method
            reenables logging. To be used with C# <c>using ()</c> statement.</returns>
        </member>
        <member name="M:NLog.LogManager.EnableLogging">
            <summary>Increases the log enable counter and if it reaches 0 the logs are disabled.</summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging"/> calls.</remarks>
        </member>
        <member name="M:NLog.LogManager.IsLoggingEnabled">
            <summary>
            Returns <see langword="true"/> if logging is currently enabled.
            </summary>
            <returns><see langword="true"/> if logging is currently enabled, 
            <see langword="false"/> otherwise.</returns>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging"/> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging"/> calls.</remarks>
        </member>
        <member name="E:NLog.LogManager.ConfigurationChanged">
            <summary>
            Occurs when logging <see cref="P:NLog.LogManager.Configuration"/> changes.
            </summary>
        </member>
        <member name="E:NLog.LogManager.ConfigurationReloaded">
            <summary>
            Occurs when logging <see cref="P:NLog.LogManager.Configuration"/> gets reloaded.
            </summary>
        </member>
        <member name="P:NLog.LogManager.ThrowExceptions">
            <summary>
            Specified whether NLog should throw exceptions. By default exceptions
            are not thrown under any circumstances.
            </summary>
        </member>
        <member name="P:NLog.LogManager.Configuration">
            <summary>
            Gets or sets the current logging configuration.
            </summary>
        </member>
        <member name="P:NLog.LogManager.GlobalThreshold">
            <summary>
            Global log threshold. Log events below this threshold are not logged.
            </summary>
        </member>
        <member name="T:NLog.MDC">
            <summary>
            Mapped Diagnostics Context - a thread-local structure that keeps a dictionary
            of strings and provides methods to output them in layouts. 
            Mostly for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.MDC.Set(System.String,System.String)">
            <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.MDC.Get(System.String)">
            <summary>
            Gets the current thread MDC named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The item value of String.Empty if the value is not present.</returns>
        </member>
        <member name="M:NLog.MDC.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in current thread MDC.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread MDC.</returns>
        </member>
        <member name="M:NLog.MDC.Remove(System.String)">
            <summary>
            Removes the specified item from current thread MDC.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.MDC.Clear">
            <summary>
            Clears the content of current thread MDC.
            </summary>
        </member>
        <member name="T:NLog.NDC">
            <summary>
            Nested Diagnostics Context - a thread-local structure that keeps a stack
            of strings and provides methods to output them in layouts
            Mostly for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.NDC.Push(System.String)">
            <summary>
            Pushes the specified text on current thread NDC.
            </summary>
            <param name="text">The text to be pushed.</param>
            <returns>An instance of the object that implements IDisposable that returns the stack to the previous level when IDisposable.Dispose() is called. To be used with C# using() statement.</returns>
        </member>
        <member name="M:NLog.NDC.Pop">
            <summary>
            Pops the top message off the NDC stack.
            </summary>
            <returns>The top message which is no longer on the stack.</returns>
        </member>
        <member name="M:NLog.NDC.GetTopMessage">
            <summary>
            Gets the top NDC message but doesn't remove it.
            </summary>
            <returns>The top message. </returns>
        </member>
        <member name="M:NLog.NDC.Clear">
            <summary>
            Clears current thread NDC stack.
            </summary>
        </member>
        <member name="M:NLog.NDC.GetAllMessages(System.String)">
            <summary>
            Gets all messages on the stack separated by the specified separator.
            </summary>
            <param name="separator">The separator.</param>
            <returns>Messages on the stack concatenated using the specified separator.</returns>
        </member>
        <member name="M:NLog.NDC.GetBottomMessages(System.Int32,System.String)">
            <summary>
            Calculates the string representing <c>count</c> bottommost messages using the specified separator.
            </summary>
            <param name="count">Number of bottom messages to be returned</param>
            <param name="separator">The separator</param>
            <returns>A string representing <c>count</c> bottommost messages using the specified separator.</returns>
        </member>
        <member name="M:NLog.NDC.GetTopMessages(System.Int32,System.String)">
            <summary>
            Calculates the string representing <c>count</c> topmost messages using the specified separator.
            </summary>
            <param name="count">Number of topmost messages to be returned</param>
            <param name="separator">The separator</param>
            <returns>A string representing <c>count</c> topmost messages using the specified separator.</returns>
        </member>
        <member name="T:NLog.TargetAttribute">
            <summary>
            Marks class as a logging target and assigns a name to it.
            </summary>
        </member>
        <member name="M:NLog.TargetAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the TargetAttribute class and sets the name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:NLog.TargetAttribute.Name">
            <summary>
            The name of the logging target.
            </summary>
        </member>
        <member name="P:NLog.TargetAttribute.IgnoresLayout">
            <summary>
            Determines whether the target ignores layout specification.
            </summary>
        </member>
        <member name="P:NLog.TargetAttribute.IsWrapper">
            <summary>
            Marks the target as 'wrapper' target (used to generate the target summary documentation page);
            </summary>
        </member>
        <member name="P:NLog.TargetAttribute.IsCompound">
            <summary>
            Marks the target as 'compound' target (used to generate the target summary documentation page);
            </summary>
        </member>
        <member name="T:NLog.TargetCollection">
            <summary>
            A collection of elements of type Target
            </summary>
        </member>
        <member name="M:NLog.TargetCollection.#ctor">
            <summary>
            Initializes a new empty instance of the TargetCollection class.
            </summary>
        </member>
        <member name="M:NLog.TargetCollection.#ctor(NLog.Target[])">
            <summary>
            Initializes a new instance of the TargetCollection class, containing elements
            copied from an array.
            </summary>
            <param name="items">
            The array whose elements are to be added to the new TargetCollection.
            </param>
        </member>
        <member name="M:NLog.TargetCollection.#ctor(NLog.TargetCollection)">
            <summary>
            Initializes a new instance of the TargetCollection class, containing elements
            copied from another instance of TargetCollection
            </summary>
            <param name="items">
            The TargetCollection whose elements are to be added to the new TargetCollection.
            </param>
        </member>
        <member name="M:NLog.TargetCollection.AddRange(NLog.Target[])">
            <summary>
            Adds the elements of an array to the end of this TargetCollection.
            </summary>
            <param name="items">
            The array whose elements are to be added to the end of this TargetCollection.
            </param>
        </member>
        <member name="M:NLog.TargetCollection.AddRange(NLog.TargetCollection)">
            <summary>
            Adds the elements of another TargetCollection to the end of this TargetCollection.
            </summary>
            <param name="items">
            The TargetCollection whose elements are to be added to the end of this TargetCollection.
            </param>
        </member>
        <member name="M:NLog.TargetCollection.Add(NLog.Target)">
            <summary>
            Adds an instance of type Target to the end of this TargetCollection.
            </summary>
            <param name="value">
            The Target to be added to the end of this TargetCollection.
            </param>
        </member>
        <member name="M:NLog.TargetCollection.Contains(NLog.Target)">
            <summary>
            Determines whether a specfic Target value is in this TargetCollection.
            </summary>
            <param name="value">
            The Target value to locate in this TargetCollection.
            </param>
            <returns>
            true if value is found in this TargetCollection;
            false otherwise.
            </returns>
        </member>
        <member name="M:NLog.TargetCollection.IndexOf(NLog.Target)">
            <summary>
            Return the zero-based index of the first occurrence of a specific value
            in this TargetCollection
            </summary>
            <param name="value">
            The Target value to locate in the TargetCollection.
            </param>
            <returns>
            The zero-based index of the first occurrence of the _ELEMENT value if found;
            -1 otherwise.
            </returns>
        </member>
        <member name="M:NLog.TargetCollection.Insert(System.Int32,NLog.Target)">
            <summary>
            Inserts an element into the TargetCollection at the specified index
            </summary>
            <param name="index">
            The index at which the Target is to be inserted.
            </param>
            <param name="value">
            The Target to insert.
            </param>
        </member>
        <member name="M:NLog.TargetCollection.Remove(NLog.Target)">
            <summary>
            Removes the first occurrence of a specific Target from this TargetCollection.
            </summary>
            <param name="value">
            The Target value to remove from this TargetCollection.
            </param>
        </member>
        <member name="M:NLog.TargetCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the elements of this TargetCollection.
            </summary>
            <returns>
            An object that implements System.Collections.IEnumerator.
            </returns>        
        </member>
        <member name="P:NLog.TargetCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Target at the given index in this TargetCollection.
            </summary>
        </member>
        <member name="T:NLog.TargetCollection.Enumerator">
            <summary>
            Type-specific enumeration class, used by TargetCollection.GetEnumerator.
            </summary>
        </member>
        <member name="M:NLog.TargetCollection.Enumerator.#ctor(NLog.TargetCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:NLog.TargetCollection.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLog.TargetCollection.Enumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLog.TargetCollection.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLog.TargetFactory">
            <summary>
            A factory of logging targets. Creates new targets based on their names.
            </summary>
        </member>
        <member name="M:NLog.TargetFactory.Clear">
            <summary>
            Removes all target information from the factory.
            </summary>
        </member>
        <member name="M:NLog.TargetFactory.Reset">
            <summary>
            Removes all targets and reloads them from NLog assembly and default extension assemblies.
            </summary>
        </member>
        <member name="M:NLog.TargetFactory.AddTargetsFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Scans the specified assembly for types marked with <see cref="T:NLog.TargetAttribute"/> and adds
            them to the factory. Optionally it prepends the specified text to the target names to avoid
            naming collisions.
            </summary>
            <param name="theAssembly">The assembly to be scanned for targets.</param>
            <param name="prefix">The prefix to be prepended to target names.</param>
        </member>
        <member name="M:NLog.TargetFactory.AddDefaultTargets">
            <summary>
            Adds default targets from the NLog.dll assembly.
            </summary>
        </member>
        <member name="M:NLog.TargetFactory.AddTarget(System.String,System.Type)">
            <summary>
            Registers the specified target type to the factory under a specified name.
            </summary>
            <param name="targetName">The name of the target (e.g. <code>File</code> or <code>Console</code>)</param>
            <param name="targetType">The type of the new target</param>
            <remarks>
            The name specified in the targetName parameter can then be used
            to create target.
            </remarks>
        </member>
        <member name="M:NLog.TargetFactory.CreateTarget(System.String)">
            <summary>
            Creates the target object based on its target name.
            </summary>
            <param name="name">The name of the target (e.g. <code>File</code> or <code>Console</code>)</param>
            <returns>A new instance of the Target object.</returns>
        </member>
        <member name="P:NLog.TargetFactory.TargetTypes">
            <summary>
            Collection of target types added to the factory.
            </summary>
        </member>
    </members>
</doc>
