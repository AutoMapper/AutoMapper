<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Profiler</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Profiler.DataCollection">
      <summary>The DataCollection class enables you to programmatically control the amount of data collected during profiling in the .vsp file. To programmatically control data collection, use methods and property of the DataCollection class in your managed code.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Profiler.DataCollection.CommentMarkAtProfile(System.Int64,System.Int32,System.String!System.Runtime.CompilerServices.IsConst)">
      <summary>The CommentMarkAtProfile method inserts a timestamp value, a numeric mark and a comment string in the .vsp file. The timestamp value can be used to synchronize external events. Profiling for the thread containing the CommentMarkAtProfile function must be ON for the mark and comment to be inserted.</summary>
      <returns>The return value, MarkOperationResult, is an enum.</returns>
      <param name="timestamp">A 64-bit integer representing a timestamp value. </param>
      <param name="markId">The numeric marker to insert. The marker must greater than or equal to 0 (zero).</param>
      <param name="markText">A pointer to the text string to insert. The string must be less than 256 characters including the NULL terminator.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Profiler.DataCollection.CommentMarkProfile(System.Int32,System.String!System.Runtime.CompilerServices.IsConst)">
      <summary>The CommentMarkProfile method inserts a numeric marker and a text string in the .vsp file. Profiling for the thread containing the CommentMarkProfile function must be ON for the mark and comment to be inserted.</summary>
      <returns>The return value, MarkOperationResult, is an enum.</returns>
      <param name="markId">The numeric marker to insert. The marker must greater than or equal to 0 (zero).</param>
      <param name="markText">A pointer to the text string to insert. The string must be less than 256 characters including the NULL terminator.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Profiler.DataCollection.CurrentId">
      <summary>The CurrentId property returns the pseudo-token for the thread id or process id, in a call to NameProfile, StartProfile, StopProfile, SuspendProfile, and ResumeProfile. Use this property to cause the method to operate on the current thread or process, rather than a specifically indicated one.</summary>
      <returns>An unsigned integer value for the process or thread identifier.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Profiler.DataCollection.MarkProfile(System.Int32)">
      <summary>The MarkProfile method inserts a profile mark in the .vsp file. Profiling for the thread containing the MarkProfile function must be ON for the mark to be inserted.</summary>
      <returns>The return value, MarkOperationResult, is an enum.</returns>
      <param name="markId">The marker to insert. The marker must be greater than or equal to 0 (zero).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Profiler.DataCollection.NameProfile(System.String!System.Runtime.CompilerServices.IsConst,Microsoft.VisualStudio.Profiler.ProfileLevel,System.UInt32)">
      <summary>The NameProfile method assigns a string to the specified process or thread. </summary>
      <returns>The return value, NameOperationResult, is an enum.</returns>
      <param name="profileName">The name of the profiling element. </param>
      <param name="profileLevel">Identifies the execution level of the identifier specified in elementId.</param>
      <param name="elementId">Profiling level identifier. Use the process or thread identifier that is generated by the system.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Profiler.DataCollection.ResumeProfile(Microsoft.VisualStudio.Profiler.ProfileLevel,System.UInt32)">
      <summary>The ResumeProfile method decrements the Suspend/Resume counter for the specified profiling level.</summary>
      <returns>The return value, ProfileOperationResult, is an enum.</returns>
      <param name="profileLevel">Identifies the execution level of the identifier specified in elementId.</param>
      <param name="elementId">The process or thread identifier generated by the system.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Profiler.DataCollection.StartProfile(Microsoft.VisualStudio.Profiler.ProfileLevel,System.UInt32)">
      <summary>The StartProfile method sets the counter to 1 (on) for the specified profiling level.</summary>
      <returns>The return value, ProfileOperationResult, is an enum.</returns>
      <param name="profileLevel">Identifies the execution level of the identifier specified in elementId.</param>
      <param name="elementId">The process or thread identifier generated by the system.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Profiler.DataCollection.StopProfile(Microsoft.VisualStudio.Profiler.ProfileLevel,System.UInt32)">
      <summary>The StopProfile method sets the counter to 0 (off) for the specified profiling level.</summary>
      <returns>The return value, ProfileOperationResult, is an enum.</returns>
      <param name="profileLevel">Identifies the execution level of the identifier specified in elementId.</param>
      <param name="elementId">The process or thread identifier generated by the system.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Profiler.DataCollection.SuspendProfile(Microsoft.VisualStudio.Profiler.ProfileLevel,System.UInt32)">
      <summary>The SuspendProfile method increments the Suspend/Resume counter for the specified profiling level.</summary>
      <returns>The return value, ProfileOperationResult, is an enum.</returns>
      <param name="profileLevel">Identifies the execution level of the identifier specified in elementId.</param>
      <param name="elementId">The process or thread identifier generated by the system.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Profiler.MarkOperationResult">
      <summary>CommentMarkAtProfile, CommentMarkProfile, and MarkProfile return success or failure using the MarkOperationResult enum.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.MarkOperationResult.ErrorMarkerReserved">
      <summary>The parameter is less than or equal to 0. These values are reserved. The mark and comment are not recorded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.MarkOperationResult.ErrorModeNever">
      <summary>The profiling mode was set to NEVER when the function was called. The mark and comment are not recorded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.MarkOperationResult.ErrorModeOff">
      <summary>The global profiling level was set to OFF when the function was called. The mark and comment are not recorded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.MarkOperationResult.ErrorNoSupport">
      <summary>No mark support in this context. The mark and comment are not recorded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.MarkOperationResult.ErrorOutOfMemory">
      <summary>Memory was not available to record the event. The mark and comment are not recorded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.MarkOperationResult.ErrorTextTooLong">
      <summary>The string exceeds the maximum of 256 characters. The comment string is truncated and the mark and comment are recorded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.MarkOperationResult.OK">
      <summary>The call was successful.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Profiler.NameOperationResult">
      <summary>NameProfile method returns NameOperationResult enum to indicate success or failure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.NameOperationResult.ErrorIdDoesNotExist">
      <summary>The profiling element specified does not exist.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.NameOperationResult.ErrorInvalidName">
      <summary>The name is invalid. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.NameOperationResult.ErrorLevelDoesNotExist">
      <summary>The profile level specified does not exist.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.NameOperationResult.ErrorNoSupport">
      <summary>The specified operation is not supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.NameOperationResult.ErrorOutOfMemory">
      <summary>Memory was not available to record the event.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.NameOperationResult.ErrorRedefinition">
      <summary>A name was already assigned to the profile element. The name in this function is ignored.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.NameOperationResult.ErrorTextTruncated">
      <summary>The name text exceeded 32 characters including the null character and was therefore truncated.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.NameOperationResult.OK">
      <summary>Name was registered successfully.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Profiler.ProfileLevel">
      <summary>ProfileLevel enum is used indicate one of the three levels to which performance data collection can be applied.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.ProfileLevel.Global">
      <summary>Global level setting affects all processes and threads in the profiling run.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.ProfileLevel.Process">
      <summary>Process level setting affect all threads which are part of specified process.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.ProfileLevel.Thread">
      <summary>Thread profiling Level setting affects the specified thread.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Profiler.ProfileOperationResult">
      <summary>ResumeProfile, StartProfile, StopProfile, and SuspendProfile return success or failure using the ProfileOperationResult enum.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.ProfileOperationResult.ErrorIdDoesNotExist">
      <summary>The profiling element does not exist.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.ProfileOperationResult.ErrorLevelDoesNotExist">
      <summary>The profiling level specified does not exist.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.ProfileOperationResult.ErrorModeNever">
      <summary>The profiling mode was set to NEVER when the function was called.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.ProfileOperationResult.ErrorNotYetImplemented">
      <summary>The profiling function call, profiling level, or combination of call and level is not yet implemented.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Profiler.ProfileOperationResult.OK">
      <summary>The call was successful.</summary>
    </member>
  </members>
</doc>