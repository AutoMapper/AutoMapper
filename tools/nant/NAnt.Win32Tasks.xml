<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NAnt.Win32Tasks</name>
    </assembly>
    <members>
        <member name="T:NAnt.Win32.Functions.CygpathFunctions">
            <summary>
            Groups a set of functions that convert Windows native filenames to 
            Cygwin POSIX-style pathnames and vice versa.
            </summary>
            <remarks>
            It can be used when a Cygwin program needs to pass a file name to a 
            native Windows program, or expects to get a file name from a native 
            Windows program.
            </remarks>
        </member>
        <member name="M:NAnt.Win32.Functions.CygpathFunctions.#ctor(NAnt.Core.Project,NAnt.Core.PropertyDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Win32.Functions.CygpathFunctions"/>
            class with the specified <see cref="T:NAnt.Core.Project"/> and properties.
            </summary>
            <param name="project">The <see cref="T:NAnt.Core.Project"/> in which the class is used.</param>
            <param name="properties">The set of properties to use for macro expansion.</param>
        </member>
        <member name="M:NAnt.Win32.Functions.CygpathFunctions.GetDosPath(System.String)">
            <summary>
            Gets the DOS (short) form of the specified path.
            </summary>
            <param name="path">The path to convert.</param>
            <returns>
            The DOS (short) form of the specified path.
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception"><c>cygpath</c> could not be started.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> could not be converted to a short form.</exception>
        </member>
        <member name="M:NAnt.Win32.Functions.CygpathFunctions.GetUnixPath(System.String)">
            <summary>
            Gets the Unix form of the specified path.
            </summary>
            <param name="path">The path to convert.</param>
            <returns>
            The Unix form of the specified path.
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception"><c>cygpath</c> could not be started.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> could not be converted to a Unix form.</exception>
        </member>
        <member name="M:NAnt.Win32.Functions.CygpathFunctions.GetWindowsPath(System.String)">
            <summary>
            Gets the Windows form of the specified path.
            </summary>
            <param name="path">The path to convert.</param>
            <returns>
            The Windows form of the specified path.
            </returns>
            <exception cref="T:System.ComponentModel.Win32Exception"><c>cygpath</c> could not be started.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> could not be converted to a Windows form.</exception>
        </member>
        <member name="M:NAnt.Win32.Functions.CygpathFunctions.RunCygpathString(NAnt.Core.Types.Argument[])">
            <summary>
            Runs cygpath with the specified arguments and returns the result 
            as a <see cref="T:System.String"/>.
            </summary>
            <param name="args">The arguments to pass to cygpath.</param>
            <returns>
            The result of running cygpath with the specified arguments.
            </returns>
        </member>
        <member name="M:NAnt.Win32.Functions.CygpathFunctions.GetTask(System.IO.Stream)">
            <summary>
            Factory method to return a new instance of ExecTask
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:NAnt.Win32.Tasks.AxImpTask">
            <summary>
            Generates a Windows Forms Control that wraps ActiveX Controls defined 
            in an OCX.
            </summary>
            <example>
              <code>
                <![CDATA[
            <aximp ocx="MyControl.ocx" output="MyFormsControl.dll" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Win32.Tasks.AxImpTask.ExecuteTask">
            <summary>
            Import the ActiveX control.
            </summary>
        </member>
        <member name="M:NAnt.Win32.Tasks.AxImpTask.NeedsCompiling">
            <summary>
            Determines whether the assembly needs to be created again.
            </summary>
            <returns>
            <see langword="true" /> if the assembly needs to be created again; 
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:NAnt.Win32.Tasks.AxImpTask.OcxFile">
            <summary>
            Filename of the .ocx file.
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.AxImpTask.OutputFile">
            <summary>
            Filename of the generated assembly.
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.AxImpTask.PublicKeyFile">
            <summary>
            Specifies the file containing the public key to use to sign the 
            resulting assembly.
            </summary>
            <value>
            The file containing the public key to use to sign the resulting
            assembly.
            </value>
        </member>
        <member name="P:NAnt.Win32.Tasks.AxImpTask.KeyFile">
            <summary>
            Specifies the publisher's official public/private key pair with which 
            the resulting assembly should be signed with a strong name.
            </summary>
            <value>
            The keyfile to use to sign the resulting assembly with a strong name.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryimportertlbimpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.AxImpTask.KeyContainer">
            <summary>
            Specifies the key container in which the public/private key pair 
            should be found that should be used to sign the resulting assembly
            with a strong name.
            </summary>
            <value>
            The key container containing a public/private key pair that should
            be used to sign the resulting assembly.
            </value>
        </member>
        <member name="P:NAnt.Win32.Tasks.AxImpTask.DelaySign">
            <summary>
            Specifies to sign the resulting control using delayed signing.
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.AxImpTask.GenerateSource">
            <summary>
            Determines whether C# source code for the Windows Form wrapper should 
            be generated. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.AxImpTask.RcwFile">
            <summary>
            Assembly to use for Runtime Callable Wrapper rather than generating 
            new one [.NET 1.1 or higher].
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.AxImpTask.SupportsRcw">
            <summary>
            Indicates whether <c>aximp</c> supports using an existing Runtime
            Callable Wrapper for a given target framework. The default is 
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.AxImpTask.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="T:NAnt.Win32.Tasks.LocateSdkTask">
            <summary>
            Reads the most recent Windows SDK InstallationFolder key into a NAnt property
            </summary>
            <example>
              <code>
                <![CDATA[
            <locatesdk prefix="dotNetFX" minsdk="v6.0" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Win32.Tasks.LocateSdkTask.ExecuteTask">
            <summary>
            locate the most recent WinSDK installed
            </summary>
        </member>
        <member name="M:NAnt.Win32.Tasks.LocateSdkTask.StringToVersion(System.String)">
            <summary>
            Converts a version expressed as a string into a Version object 
            </summary>
            <param name="sdkVersion">
            A <see cref="T:System.String"/> containing the version to convert.
            </param>
            <returns>
            A <see cref="T:System.Version"/> object representing the version string.
            </returns>
        </member>
        <member name="P:NAnt.Win32.Tasks.LocateSdkTask.PropertyName">
            <summary>
                <para>
                The property to set to the value stored in the InstalledFolder key of the located WinSDK version.
                </para>
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.LocateSdkTask.MinWinSdkVersion">
            <summary>
                <para>
                The minimum acceptable Windows SDK version.
                </para>
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.LocateSdkTask.MaxWinSdkVersion">
            <summary>
                <para>
                The maximum acceptable Windows SDK version.
                </para>
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.LocateSdkTask.MinNetFxVersion">
            <summary>
                <para>
                The minimum acceptable .NET sdk version.
                </para>
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.LocateSdkTask.MaxNetFxVersion">
            <summary>
                <para>
                The maximum acceptable .NET sdk version.
                </para>
            </summary>
        </member>
        <member name="T:NAnt.Win32.Tasks.ReadRegistryTask">
            <summary>
            Reads a value or set of values from the Windows Registry into one or 
            more NAnt properties.
            </summary>
            <example>
              <para>Read a single value from the registry.</para>
              <code>
                <![CDATA[
            <readregistry property="sdkRoot" key="SOFTWARE\Microsoft\.NETFramework\sdkInstallRoot" hive="LocalMachine" />
                ]]>
              </code>
              <para>Read all the registry values in a key.</para>
              <code>
                <![CDATA[
            <readregistry prefix="dotNetFX" key="SOFTWARE\Microsoft\.NETFramework\sdkInstallRoot" hive="LocalMachine" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Win32.Tasks.ReadRegistryTask.ExecuteTask">
            <summary>
            read the specified registry value
            </summary>
        </member>
        <member name="M:NAnt.Win32.Tasks.ReadRegistryTask.LookupRegKey(System.String,Microsoft.Win32.RegistryHive[])">
            <summary>
            Returns the hive for a given key.
            </summary>
            <param name="key"></param>
            <param name="registries"></param>
            <returns>
            The hive for a given key.
            </returns>
        </member>
        <member name="M:NAnt.Win32.Tasks.ReadRegistryTask.GetHiveKey(Microsoft.Win32.RegistryHive)">
            <summary>
            Returns the key for a given registry hive.
            </summary>
            <param name="hive">The registry hive to return the key for.</param>
            <returns>
            The key for a given registry hive.
            </returns>
        </member>
        <member name="P:NAnt.Win32.Tasks.ReadRegistryTask.PropertyName">
            <summary>
                <para>The property to set to the specified registry key value.</para>
                <para>If this attribute is used then a single value will be read.</para>
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.ReadRegistryTask.PropertyPrefix">
            <summary>
                <para>The prefix to use for the specified registry key values.</para>
                <para>If this attribute is used then all registry values will be read and stored as properties with this prefix.</para>
            </summary>
            <example>
                <para>Registry values a, b, c will be turned into prefixa, prefixb, prefixc named properties</para>
            </example>
        </member>
        <member name="P:NAnt.Win32.Tasks.ReadRegistryTask.RegistryKey">
            <summary>
            The registry key to read, including the path.
            </summary>
            <example>
            SOFTWARE\Microsoft\.NETFramework\sdkInstallRoot
            </example>
        </member>
        <member name="P:NAnt.Win32.Tasks.ReadRegistryTask.RegistryHiveName">
            <summary>
            Space separated list of registry hives to search for <see cref="P:NAnt.Win32.Tasks.ReadRegistryTask.RegistryKey"/>.
            For a list of possible values, see <see cref="T:Microsoft.Win32.RegistryHive"/>. The 
            default is <see cref="F:Microsoft.Win32.RegistryHive.LocalMachine"/>.
            </summary>
            <remarks>
            <seealso cref="T:Microsoft.Win32.RegistryHive"/>
            </remarks>
        </member>
        <member name="T:NAnt.Win32.Tasks.RegAsmTask">
            <summary>
            Registers an assembly, or set of assemblies for use from COM clients.
            </summary>
            <remarks>
              <para>
              Refer to the <see href="ms-help://MS.VSCC/MS.MSDNVS/cptools/html/cpgrfassemblyregistrationtoolregasmexe.htm">Regasm</see> 
              documentation for more information on the regasm tool.
              </para>
            </remarks>
            <example>
              <para>
              Register types in a single assembly.
              </para>
              <code>
                <![CDATA[
            <regasm assembly="myAssembly.dll" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Register types of an assembly and generate a type library containing
              definitions of accessible types defined within the assembly.
              </para>
              <code>
                <![CDATA[
            <regasm assembly="myAssembly.dll" typelib="myAssembly.tlb" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Register types of set of assemblies at once, while specifying a set
              of reference assemblies.
              </para>
              <code>
                <![CDATA[
            <regasm codebase="true">
                <assemblies>
                    <include name="OutlookAddin.dll" />
                    <include name="OfficeCoreAddin.dll" />
                </assemblies>
                <references>
                    <include name="CommonTypes.dll" />
                </references>
            </regasm>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Win32.Tasks.RegAsmTask.PrepareProcess(System.Diagnostics.Process)">
            <summary>
            Updates the <see cref="T:System.Diagnostics.ProcessStartInfo"/> of the specified 
            <see cref="T:System.Diagnostics.Process"/>.
            </summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> of which the <see cref="T:System.Diagnostics.ProcessStartInfo"/> should be updated.</param>
        </member>
        <member name="M:NAnt.Win32.Tasks.RegAsmTask.ExecuteTask">
            <summary>
            Registers or unregisters a single assembly, or a group of assemblies.
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.RegAsmTask.AssemblyFile">
            <summary>
            The name of the file to register. This is provided as an alternate 
            to using the task's <see cref="P:NAnt.Win32.Tasks.RegAsmTask.Assemblies"/>.
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.RegAsmTask.RegistryFile">
            <summary>
            Registry file to export to instead of entering the types directly 
            into the registry.
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.RegAsmTask.CodeBase">
            <summary>
            Set the code base registry setting.
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.RegAsmTask.Registered">
            <summary>
            Only refer to already registered type libraries.
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.RegAsmTask.TypeLib">
            <summary>
            Export the assemblies to the specified type library and register it.
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.RegAsmTask.Unregister">
            <summary>
            Unregister the assembly. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.RegAsmTask.Assemblies">
            <summary>
            The set of assemblies to register, or unregister.
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.RegAsmTask.References">
            <summary>
            The set of assembly references.
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.RegAsmTask.BaseDirectory">
            <summary>
            Gets the working directory for the application.
            </summary>
            <value>
            The working directory for the application.
            </value>
        </member>
        <member name="P:NAnt.Win32.Tasks.RegAsmTask.ProgramArguments">
            <summary>
            Gets the command line arguments for the external program.
            </summary>
            <value>
            The command line arguments for the external program.
            </value>
        </member>
        <member name="P:NAnt.Win32.Tasks.RegAsmTask.ProgramFileName">
            <summary>
            Gets the filename of the external program to start.
            </summary>
            <value>
            The filename of the external program.
            </value>
            <remarks>
            Override in derived classes to explicitly set the location of the 
            external tool.
            </remarks>
        </member>
        <member name="T:NAnt.Win32.Tasks.TlbExpTask">
            <summary>
            Exports a .NET assembly to a type library that can be used from unmanaged 
            code (wraps Microsoft's <c>tlbexp.exe</c>).
            </summary>
            <remarks>
              <para>
              <see href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryexportertlbexpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</see>
              </para>
            </remarks>
            <example>
              <para>Export <c>DotNetAssembly.dll</c> to <c>LegacyCOM.dll</c>.</para>
              <code>
                <![CDATA[
            <tlbexp assembly="DotNetAssembly.dll" output="LegacyCOM.dll" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Win32.Tasks.TlbExpTask.ExecuteTask">
            <summary>
            Exports the type library.
            </summary>
        </member>
        <member name="M:NAnt.Win32.Tasks.TlbExpTask.NeedsCompiling">
            <summary>
            Determines whether the assembly needs to be exported to a type 
            library again.
            </summary>
            <returns>
            <see langword="true" /> if the assembly needs to be exported to a 
            type library; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbExpTask.AssemblyFile">
            <summary>
            Specifies the assembly for which to export a type library.
            </summary>
            <value>
            The assembly for which to export a type library.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryexportertlbexpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbExpTask.OutputFile">
            <summary>
            Specifies the name of the type library file to generate.
            </summary>
            <value>
            The name of the type library file to generate.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryexportertlbexpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbExpTask.NamesFile">
            <summary>
            Specifies the file used to determine capitalization of names in a 
            type library.
            </summary>
            <value>
            The file used to determine capitalization of names in a type library.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryexportertlbexpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbExpTask.ProgramArguments">
            <summary>
            Gets the command line arguments for the external program.
            </summary>
            <value>
            The command line arguments for the external program.
            </value>
        </member>
        <member name="T:NAnt.Win32.Tasks.TlbImpTask">
            <summary>
            Imports a type library to a .NET assembly (wraps Microsoft's <c>tlbimp.exe</c>).
            </summary>
            <remarks>
            <para>
            This task lets you easily create interop assemblies.  By default, it will 
            not reimport if the underlying COM TypeLib or reference has not changed.
            </para>
            <para>
            <see href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryimportertlbimpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</see>
            </para>
            </remarks>
            <example>
              <para>Import <c>LegacyCOM.dll</c> to <c>DotNetAssembly.dll</c>.</para>
              <code>
                <![CDATA[
            <tlbimp typelib="LegacyCOM.dll" output="DotNetAssembly.dll" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Generate an assembly named &quot;Interop.MSVidCtlLib.dll&quot; for the
              MS Video Control 1.0 Type Library, transforming any [out, retval]
              parameters of methods on dispinterfaces in the type library into 
              return values in the managed library.
              </para>
              <code>
                <![CDATA[
            <tlbimp typelib="msvidctl.dll" output="Interop.MSVidCtlLib.dll" transform="dispret">
                <references basedir="Interop">
                    <include name="Interop.TunerLib.dll" />
                </references>
            </tlbimp>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Win32.Tasks.TlbImpTask.ExecuteTask">
            <summary>
            Imports the type library to a .NET assembly.
            </summary>
        </member>
        <member name="M:NAnt.Win32.Tasks.TlbImpTask.ExtractTypeLibPath(System.String)">
            <summary>
            Returns the path of the type library, removing the identifier of 
            the type library from the specified string.
            </summary>
            <param name="path">The path from which to extract the path of the type library.</param>
            <returns>
            The path of the type library without the type library identifier.
            </returns>
            <remarks>
            An example of a path which includes the identifier of the type 
            library (in this case &quot;2&quot;) is
            <c>C:\WINDOWS\system32\msvidctl.dll\2</c>.
            </remarks>
        </member>
        <member name="M:NAnt.Win32.Tasks.TlbImpTask.NeedsCompiling">
            <summary>
            Determines whether the type library needs to be imported again.
            </summary>
            <returns>
            <see langword="true" /> if the type library needs to be imported; 
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.OutputFile">
            <summary>
            Specifies the name of the output file.
            </summary>
            <value>
            The name of the output file.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryimportertlbimpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.Namespace">
            <summary>
            Specifies the namespace in which to produce the assembly.
            </summary>
            <value>
            The namespace in which to produce the assembly.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryimportertlbimpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.AsmVersion">
            <summary>
            Specifies the version number of the assembly to produce.
            </summary>
            <remarks>
            <value>
            The version number of the assembly to produce.
            </value>
            <para>
            The version number should be in the format major.minor.build.revision.
            </para>
            <para>
            <a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryimportertlbimpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a>
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.DelaySign">
            <summary>
            Specifies whether the resulting assembly should be signed with a 
            strong name using delayed signing. The default is <see langword="false" />.
            </summary>
            <value>
            <see langword="true" /> if the resulting assembly should be signed 
            with a strong name using delayed signing; otherwise, <see langword="false" />.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryimportertlbimpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.Primary">
            <summary>
            Specifies whether a primary interop assembly should be produced for 
            the specified type library. The default is <see langword="false" />.
            </summary>
            <value>
            <see langword="true" /> if a primary interop assembly should be 
            produced; otherwise, <see langword="false" />.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryimportertlbimpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.PublicKeyFile">
            <summary>
            Specifies the file containing the public key to use to sign the 
            resulting assembly.
            </summary>
            <value>
            The file containing the public key to use to sign the resulting
            assembly.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryimportertlbimpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.KeyFile">
            <summary>
            Specifies the publisher's official public/private key pair with which 
            the resulting assembly should be signed with a strong name.
            </summary>
            <value>
            The keyfile to use to sign the resulting assembly with a strong name.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryimportertlbimpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.KeyContainer">
            <summary>
            Specifies the key container in which the public/private key pair 
            should be found that should be used to sign the resulting assembly
            with a strong name.
            </summary>
            <value>
            The key container containing a public/private key pair that should
            be used to sign the resulting assembly.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryimportertlbimpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.References">
            <summary>
            Specifies the assembly files to use to resolve references to types 
            defined outside the current type library. 
            </summary>
            <value>
            The assembly files to use to resolve references to types defined 
            outside the current type library.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryimportertlbimpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.StrictRef">
            <summary>
            Specifies whether a type library should not be imported if all 
            references within the current assembly or the reference assemblies 
            cannot be resolved. The default is <see langword="false" />.
            </summary>
            <value>
            <see langword="true" /> if a type library should not be imported if 
            all references cannot be resolved; otherwise, <see langword="false" />.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryimportertlbimpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.SysArray">
            <summary>
            Specifies whether to import a COM style SafeArray as a managed 
            <see cref="T:System.Array"/> class type. The default is <see langword="false"/>.
            </summary>
            <value>
            <see langword="true"/> if a COM style SafeArray should be imported 
            as a managed <see cref="T:System.Array"/> class type; otherwise, 
            <see langword="false"/>.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryimportertlbimpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.Transform">
            <summary>
            Specifies how to transform the metadata [.NET 1.1 or higher].
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.TypeLib">
            <summary>
            Specifies the source type library that gets passed to the type 
            library importer.
            </summary>
            <value>
            The source type library that gets passed to the type library 
            importer.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryimportertlbimpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.Unsafe">
            <summary>
            Specifies whether interfaces should be produced without .NET Framework 
            security checks. The default is <see langword="false" />.
            </summary>
            <value>
            <see langword="true" /> if interfaces without .NET Framework security 
            checks should be produced; otherwise, <see langword="false" />.
            </value>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/cptools/html/cpgrftypelibraryimportertlbimpexe.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.SupportsTransform">
            <summary>
            Indicates whether <c>tlbimp</c> supports transforming metadata for
            a given target framework. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Win32.Tasks.TlbImpTask.ProgramArguments">
            <summary>
            Gets the command line arguments for the external program.
            </summary>
            <value>
            The command line arguments for the external program.
            </value>
        </member>
    </members>
</doc>
