using System.Linq;
using System.Linq.Expressions;

namespace AutoMapper.Mappers
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;

    public class ConvertMapper : IObjectMapExpression
    {
        private readonly IReadOnlyDictionary<TypePair, LambdaExpression> _converters = new ReadOnlyDictionary<TypePair, LambdaExpression>(new Dictionary<TypePair, LambdaExpression>
        {
            // bool
            { new TypePair(typeof(bool),     typeof(bool)), (Expression<Func<bool,bool>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(byte),     typeof(bool)), (Expression<Func<byte,bool>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(char),     typeof(bool)), (Expression<Func<char,bool>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(DateTime), typeof(bool)), (Expression<Func<DateTime,bool>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(decimal),  typeof(bool)), (Expression<Func<decimal,bool>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(double),   typeof(bool)), (Expression<Func<double,bool>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(short),    typeof(bool)), (Expression<Func<short,bool>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(int),      typeof(bool)), (Expression<Func<int,bool>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(long),     typeof(bool)), (Expression<Func<long ,bool>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(sbyte),    typeof(bool)), (Expression<Func<sbyte,bool>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(float),    typeof(bool)), (Expression<Func<float,bool>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(string),   typeof(bool)), (Expression<Func<string,bool>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(ushort),   typeof(bool)), (Expression<Func<ushort,bool>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(uint),     typeof(bool)), (Expression<Func<uint  ,bool>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(ulong),    typeof(bool)), (Expression<Func<ulong,bool>>)(foo => Convert.ToBoolean(foo)) },
            // byte
            { new TypePair(typeof(bool),     typeof(byte)), (Expression<Func<bool,byte>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(byte),     typeof(byte)), (Expression<Func<byte,byte>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(char),     typeof(byte)), (Expression<Func<char,byte>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(DateTime), typeof(byte)), (Expression<Func<DateTime,byte>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(decimal),  typeof(byte)), (Expression<Func<decimal,byte>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(double),   typeof(byte)), (Expression<Func<double,byte>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(short),    typeof(byte)), (Expression<Func<short,byte>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(int),      typeof(byte)), (Expression<Func<int,byte>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(long),     typeof(byte)), (Expression<Func<long ,byte>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(sbyte),    typeof(byte)), (Expression<Func<sbyte,byte>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(float),    typeof(byte)), (Expression<Func<float,byte>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(string),   typeof(byte)), (Expression<Func<string,byte>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(ushort),   typeof(byte)), (Expression<Func<ushort,byte>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(uint),     typeof(byte)), (Expression<Func<uint  ,byte>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(ulong),    typeof(byte)), (Expression<Func<ulong,byte>>)(foo => Convert.ToByte(foo)) },
            // char
            { new TypePair(typeof(bool),     typeof(char)), (Expression<Func<bool,char>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(byte),     typeof(char)), (Expression<Func<byte,char>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(char),     typeof(char)), (Expression<Func<char,char>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(DateTime), typeof(char)), (Expression<Func<DateTime,char>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(decimal),  typeof(char)), (Expression<Func<decimal,char>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(double),   typeof(char)), (Expression<Func<double,char>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(short),    typeof(char)), (Expression<Func<short,char>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(int),      typeof(char)), (Expression<Func<int,char>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(long),     typeof(char)), (Expression<Func<long ,char>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(sbyte),    typeof(char)), (Expression<Func<sbyte,char>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(float),    typeof(char)), (Expression<Func<float,char>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(string),   typeof(char)), (Expression<Func<string,char>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(ushort),   typeof(char)), (Expression<Func<ushort,char>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(uint),     typeof(char)), (Expression<Func<uint  ,char>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(ulong),    typeof(char)), (Expression<Func<ulong,char>>)(foo => Convert.ToChar(foo)) },
            // DateTime
            { new TypePair(typeof(bool),     typeof(DateTime)), (Expression<Func<bool,DateTime>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(byte),     typeof(DateTime)), (Expression<Func<byte,DateTime>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(char),     typeof(DateTime)), (Expression<Func<char,DateTime>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(DateTime), typeof(DateTime)), (Expression<Func<DateTime,DateTime>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(decimal),  typeof(DateTime)), (Expression<Func<decimal,DateTime>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(double),   typeof(DateTime)), (Expression<Func<double,DateTime>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(short),    typeof(DateTime)), (Expression<Func<short,DateTime>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(int),      typeof(DateTime)), (Expression<Func<int,DateTime>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(long),     typeof(DateTime)), (Expression<Func<long ,DateTime>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(sbyte),    typeof(DateTime)), (Expression<Func<sbyte,DateTime>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(float),    typeof(DateTime)), (Expression<Func<float,DateTime>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(string),   typeof(DateTime)), (Expression<Func<string,DateTime>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(ushort),   typeof(DateTime)), (Expression<Func<ushort,DateTime>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(uint),     typeof(DateTime)), (Expression<Func<uint  ,DateTime>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(ulong),    typeof(DateTime)), (Expression<Func<ulong,DateTime>>)(foo => Convert.ToDateTime(foo)) },
            // DateTime
            { new TypePair(typeof(bool),     typeof(decimal)), (Expression<Func<bool,decimal>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(byte),     typeof(decimal)), (Expression<Func<byte,decimal>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(char),     typeof(decimal)), (Expression<Func<char,decimal>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(DateTime), typeof(decimal)), (Expression<Func<DateTime,decimal>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(decimal),  typeof(decimal)), (Expression<Func<decimal,decimal>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(double),   typeof(decimal)), (Expression<Func<double,decimal>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(short),    typeof(decimal)), (Expression<Func<short,decimal>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(int),      typeof(decimal)), (Expression<Func<int,decimal>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(long),     typeof(decimal)), (Expression<Func<long ,decimal>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(sbyte),    typeof(decimal)), (Expression<Func<sbyte,decimal>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(float),    typeof(decimal)), (Expression<Func<float,decimal>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(string),   typeof(decimal)), (Expression<Func<string,decimal>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(ushort),   typeof(decimal)), (Expression<Func<ushort,decimal>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(uint),     typeof(decimal)), (Expression<Func<uint  ,decimal>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(ulong),    typeof(decimal)), (Expression<Func<ulong,decimal>>)(foo => Convert.ToDecimal(foo)) },
            // Double
            { new TypePair(typeof(bool),     typeof(double)), (Expression<Func<bool,double>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(byte),     typeof(double)), (Expression<Func<byte,double>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(char),     typeof(double)), (Expression<Func<char,double>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(DateTime), typeof(double)), (Expression<Func<DateTime,double>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(decimal),  typeof(double)), (Expression<Func<decimal,double>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(double),   typeof(double)), (Expression<Func<double,double>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(short),    typeof(double)), (Expression<Func<short,double>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(int),      typeof(double)), (Expression<Func<int,double>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(long),     typeof(double)), (Expression<Func<long ,double>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(sbyte),    typeof(double)), (Expression<Func<sbyte,double>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(float),    typeof(double)), (Expression<Func<float,double>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(string),   typeof(double)), (Expression<Func<string,double>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(ushort),   typeof(double)), (Expression<Func<ushort,double>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(uint),     typeof(double)), (Expression<Func<uint  ,double>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(ulong),    typeof(double)), (Expression<Func<ulong,double>>)(foo => Convert.ToDouble(foo)) },
            // Int16
            { new TypePair(typeof(bool),     typeof(short)), (Expression<Func<bool,short>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(byte),     typeof(short)), (Expression<Func<byte,short>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(char),     typeof(short)), (Expression<Func<char,short>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(DateTime), typeof(short)), (Expression<Func<DateTime,short>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(decimal),  typeof(short)), (Expression<Func<decimal,short>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(double),   typeof(short)), (Expression<Func<double,short>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(short),    typeof(short)), (Expression<Func<short,short>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(int),      typeof(short)), (Expression<Func<int,short>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(long),     typeof(short)), (Expression<Func<long ,short>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(sbyte),    typeof(short)), (Expression<Func<sbyte,short>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(float),    typeof(short)), (Expression<Func<float,short>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(string),   typeof(short)), (Expression<Func<string,short>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(ushort),   typeof(short)), (Expression<Func<ushort,short>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(uint),     typeof(short)), (Expression<Func<uint  ,short>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(ulong),    typeof(short)), (Expression<Func<ulong,short>>)(foo => Convert.ToInt16(foo)) },
            // Int32
            { new TypePair(typeof(bool),     typeof(int)), (Expression<Func<bool,int>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(byte),     typeof(int)), (Expression<Func<byte,int>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(char),     typeof(int)), (Expression<Func<char,int>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(DateTime), typeof(int)), (Expression<Func<DateTime,int>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(decimal),  typeof(int)), (Expression<Func<decimal,int>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(double),   typeof(int)), (Expression<Func<double,int>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(short),    typeof(int)), (Expression<Func<short,int>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(int),      typeof(int)), (Expression<Func<int,int>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(long),     typeof(int)), (Expression<Func<long ,int>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(sbyte),    typeof(int)), (Expression<Func<sbyte,int>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(float),    typeof(int)), (Expression<Func<float,int>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(string),   typeof(int)), (Expression<Func<string,int>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(ushort),   typeof(int)), (Expression<Func<ushort,int>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(uint),     typeof(int)), (Expression<Func<uint  ,int>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(ulong),    typeof(int)), (Expression<Func<ulong,int>>)(foo => Convert.ToInt32(foo)) },
            // Int64
            { new TypePair(typeof(bool),     typeof(long)), (Expression<Func<bool,long>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(byte),     typeof(long)), (Expression<Func<byte,long>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(char),     typeof(long)), (Expression<Func<char,long>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(DateTime), typeof(long)), (Expression<Func<DateTime,long>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(decimal),  typeof(long)), (Expression<Func<decimal,long>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(double),   typeof(long)), (Expression<Func<double,long>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(short),    typeof(long)), (Expression<Func<short,long>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(int),      typeof(long)), (Expression<Func<int,long>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(long),     typeof(long)), (Expression<Func<long ,long>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(sbyte),    typeof(long)), (Expression<Func<sbyte,long>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(float),    typeof(long)), (Expression<Func<float,long>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(string),   typeof(long)), (Expression<Func<string,long>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(ushort),   typeof(long)), (Expression<Func<ushort,long>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(uint),     typeof(long)), (Expression<Func<uint  ,long>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(ulong),    typeof(long)), (Expression<Func<ulong,long>>)(foo => Convert.ToInt64(foo)) },
            // sbyte
            { new TypePair(typeof(bool),     typeof(sbyte)), (Expression<Func<bool,sbyte>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(byte),     typeof(sbyte)), (Expression<Func<byte,sbyte>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(char),     typeof(sbyte)), (Expression<Func<char,sbyte>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(DateTime), typeof(sbyte)), (Expression<Func<DateTime,sbyte>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(decimal),  typeof(sbyte)), (Expression<Func<decimal,sbyte>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(double),   typeof(sbyte)), (Expression<Func<double,sbyte>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(short),    typeof(sbyte)), (Expression<Func<short,sbyte>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(int),      typeof(sbyte)), (Expression<Func<int,sbyte>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(long),     typeof(sbyte)), (Expression<Func<long ,sbyte>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(sbyte),    typeof(sbyte)), (Expression<Func<sbyte,sbyte>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(float),    typeof(sbyte)), (Expression<Func<float,sbyte>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(string),   typeof(sbyte)), (Expression<Func<string,sbyte>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(ushort),   typeof(sbyte)), (Expression<Func<ushort,sbyte>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(uint),     typeof(sbyte)), (Expression<Func<uint  ,sbyte>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(ulong),    typeof(sbyte)), (Expression<Func<ulong,sbyte>>)(foo => Convert.ToSByte(foo)) },
            // float
            { new TypePair(typeof(bool),     typeof(float)), (Expression<Func<bool,float>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(byte),     typeof(float)), (Expression<Func<byte,float>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(char),     typeof(float)), (Expression<Func<char,float>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(DateTime), typeof(float)), (Expression<Func<DateTime,float>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(decimal),  typeof(float)), (Expression<Func<decimal,float>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(double),   typeof(float)), (Expression<Func<double,float>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(short),    typeof(float)), (Expression<Func<short,float>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(int),      typeof(float)), (Expression<Func<int,float>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(long),     typeof(float)), (Expression<Func<long ,float>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(sbyte),    typeof(float)), (Expression<Func<sbyte,float>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(float),    typeof(float)), (Expression<Func<float,float>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(string),   typeof(float)), (Expression<Func<string,float>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(ushort),   typeof(float)), (Expression<Func<ushort,float>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(uint),     typeof(float)), (Expression<Func<uint  ,float>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(ulong),    typeof(float)), (Expression<Func<ulong,float>>)(foo => Convert.ToSingle(foo)) },
            // string
            { new TypePair(typeof(bool),     typeof(string)), (Expression<Func<bool,string>>)(foo => Convert.ToString(foo)) },
            { new TypePair(typeof(byte),     typeof(string)), (Expression<Func<byte,string>>)(foo => Convert.ToString(foo)) },
            { new TypePair(typeof(char),     typeof(string)), (Expression<Func<char,string>>)(foo => Convert.ToString(foo)) },
            { new TypePair(typeof(DateTime), typeof(string)), (Expression<Func<DateTime,string>>)(foo => Convert.ToString(foo)) },
            { new TypePair(typeof(decimal),  typeof(string)), (Expression<Func<decimal,string>>)(foo => Convert.ToString(foo)) },
            { new TypePair(typeof(double),   typeof(string)), (Expression<Func<double,string>>)(foo => Convert.ToString(foo)) },
            { new TypePair(typeof(short),    typeof(string)), (Expression<Func<short,string>>)(foo => Convert.ToString(foo)) },
            { new TypePair(typeof(int),      typeof(string)), (Expression<Func<int,string>>)(foo => Convert.ToString(foo)) },
            { new TypePair(typeof(long),     typeof(string)), (Expression<Func<long ,string>>)(foo => Convert.ToString(foo)) },
            { new TypePair(typeof(sbyte),    typeof(string)), (Expression<Func<sbyte,string>>)(foo => Convert.ToString(foo)) },
            { new TypePair(typeof(float),    typeof(string)), (Expression<Func<float,string>>)(foo => Convert.ToString(foo)) },
            { new TypePair(typeof(string),   typeof(string)), (Expression<Func<string,string>>)(foo => Convert.ToString(foo)) },
            { new TypePair(typeof(ushort),   typeof(string)), (Expression<Func<ushort,string>>)(foo => Convert.ToString(foo)) },
            { new TypePair(typeof(uint),     typeof(string)), (Expression<Func<uint  ,string>>)(foo => Convert.ToString(foo)) },
            { new TypePair(typeof(ulong),    typeof(string)), (Expression<Func<ulong,string>>)(foo => Convert.ToString(foo)) },
            // ushort
            { new TypePair(typeof(bool),     typeof(ushort)), (Expression<Func<bool,ushort>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(byte),     typeof(ushort)), (Expression<Func<byte,ushort>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(char),     typeof(ushort)), (Expression<Func<char,ushort>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(DateTime), typeof(ushort)), (Expression<Func<DateTime,ushort>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(decimal),  typeof(ushort)), (Expression<Func<decimal,ushort>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(double),   typeof(ushort)), (Expression<Func<double,ushort>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(short),    typeof(ushort)), (Expression<Func<short,ushort>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(int),      typeof(ushort)), (Expression<Func<int,ushort>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(long),     typeof(ushort)), (Expression<Func<long ,ushort>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(sbyte),    typeof(ushort)), (Expression<Func<sbyte,ushort>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(float),    typeof(ushort)), (Expression<Func<float,ushort>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(string),   typeof(ushort)), (Expression<Func<string,ushort>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(ushort),   typeof(ushort)), (Expression<Func<ushort,ushort>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(uint),     typeof(ushort)), (Expression<Func<uint  ,ushort>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(ulong),    typeof(ushort)), (Expression<Func<ulong,ushort>>)(foo => Convert.ToUInt16(foo)) },
            // uint
            { new TypePair(typeof(bool),     typeof(uint)), (Expression<Func<bool,uint>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(byte),     typeof(uint)), (Expression<Func<byte,uint>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(char),     typeof(uint)), (Expression<Func<char,uint>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(DateTime), typeof(uint)), (Expression<Func<DateTime,uint>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(decimal),  typeof(uint)), (Expression<Func<decimal,uint>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(double),   typeof(uint)), (Expression<Func<double,uint>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(short),    typeof(uint)), (Expression<Func<short,uint>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(int),      typeof(uint)), (Expression<Func<int,uint>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(long),     typeof(uint)), (Expression<Func<long ,uint>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(sbyte),    typeof(uint)), (Expression<Func<sbyte,uint>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(float),    typeof(uint)), (Expression<Func<float,uint>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(string),   typeof(uint)), (Expression<Func<string,uint>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(ushort),   typeof(uint)), (Expression<Func<ushort,uint>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(uint),     typeof(uint)), (Expression<Func<uint  ,uint>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(ulong),    typeof(uint)), (Expression<Func<ulong,uint>>)(foo => Convert.ToUInt32(foo)) },
            // ulong
            { new TypePair(typeof(bool),     typeof(ulong)), (Expression<Func<bool,ulong>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(byte),     typeof(ulong)), (Expression<Func<byte,ulong>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(char),     typeof(ulong)), (Expression<Func<char,ulong>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(DateTime), typeof(ulong)), (Expression<Func<DateTime,ulong>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(decimal),  typeof(ulong)), (Expression<Func<decimal,ulong>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(double),   typeof(ulong)), (Expression<Func<double,ulong>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(short),    typeof(ulong)), (Expression<Func<short,ulong>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(int),      typeof(ulong)), (Expression<Func<int,ulong>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(long),     typeof(ulong)), (Expression<Func<long ,ulong>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(sbyte),    typeof(ulong)), (Expression<Func<sbyte,ulong>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(float),    typeof(ulong)), (Expression<Func<float,ulong>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(string),   typeof(ulong)), (Expression<Func<string,ulong>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(ushort),   typeof(ulong)), (Expression<Func<ushort,ulong>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(uint),     typeof(ulong)), (Expression<Func<uint  ,ulong>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(ulong),    typeof(ulong)), (Expression<Func<ulong,ulong>>)(foo => Convert.ToUInt64(foo)) },
            // bool?
            { new TypePair(typeof(bool),     typeof(bool?)), (Expression<Func<bool,bool?>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(byte),     typeof(bool?)), (Expression<Func<byte,bool?>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(char),     typeof(bool?)), (Expression<Func<char,bool?>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(DateTime), typeof(bool?)), (Expression<Func<DateTime,bool?>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(decimal),  typeof(bool?)), (Expression<Func<decimal,bool?>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(double),   typeof(bool?)), (Expression<Func<double,bool?>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(short),    typeof(bool?)), (Expression<Func<short,bool?>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(int),      typeof(bool?)), (Expression<Func<int,bool?>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(long),     typeof(bool?)), (Expression<Func<long ,bool?>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(sbyte),    typeof(bool?)), (Expression<Func<sbyte,bool?>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(float),    typeof(bool?)), (Expression<Func<float,bool?>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(string),   typeof(bool?)), (Expression<Func<string,bool?>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(ushort),   typeof(bool?)), (Expression<Func<ushort,bool?>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(uint),     typeof(bool?)), (Expression<Func<uint  ,bool?>>)(foo => Convert.ToBoolean(foo)) },
            { new TypePair(typeof(ulong),    typeof(bool?)), (Expression<Func<ulong,bool?>>)(foo => Convert.ToBoolean(foo)) },
            // byte?
            { new TypePair(typeof(bool),     typeof(byte?)), (Expression<Func<bool,byte?>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(byte),     typeof(byte?)), (Expression<Func<byte,byte?>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(char),     typeof(byte?)), (Expression<Func<char,byte?>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(DateTime), typeof(byte?)), (Expression<Func<DateTime,byte?>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(decimal),  typeof(byte?)), (Expression<Func<decimal,byte?>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(double),   typeof(byte?)), (Expression<Func<double,byte?>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(short),    typeof(byte?)), (Expression<Func<short,byte?>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(int),      typeof(byte?)), (Expression<Func<int,byte?>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(long),     typeof(byte?)), (Expression<Func<long ,byte?>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(sbyte),    typeof(byte?)), (Expression<Func<sbyte,byte?>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(float),    typeof(byte?)), (Expression<Func<float,byte?>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(string),   typeof(byte?)), (Expression<Func<string,byte?>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(ushort),   typeof(byte?)), (Expression<Func<ushort,byte?>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(uint),     typeof(byte?)), (Expression<Func<uint  ,byte?>>)(foo => Convert.ToByte(foo)) },
            { new TypePair(typeof(ulong),    typeof(byte?)), (Expression<Func<ulong,byte?>>)(foo => Convert.ToByte(foo)) },
            // char?
            { new TypePair(typeof(bool),     typeof(char?)), (Expression<Func<bool,char?>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(byte),     typeof(char?)), (Expression<Func<byte,char?>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(char),     typeof(char?)), (Expression<Func<char,char?>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(DateTime), typeof(char?)), (Expression<Func<DateTime,char?>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(decimal),  typeof(char?)), (Expression<Func<decimal,char?>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(double),   typeof(char?)), (Expression<Func<double,char?>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(short),    typeof(char?)), (Expression<Func<short,char?>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(int),      typeof(char?)), (Expression<Func<int,char?>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(long),     typeof(char?)), (Expression<Func<long ,char?>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(sbyte),    typeof(char?)), (Expression<Func<sbyte,char?>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(float),    typeof(char?)), (Expression<Func<float,char?>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(string),   typeof(char?)), (Expression<Func<string,char?>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(ushort),   typeof(char?)), (Expression<Func<ushort,char?>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(uint),     typeof(char?)), (Expression<Func<uint  ,char?>>)(foo => Convert.ToChar(foo)) },
            { new TypePair(typeof(ulong),    typeof(char?)), (Expression<Func<ulong,char?>>)(foo => Convert.ToChar(foo)) },
            // DateTime?
            { new TypePair(typeof(bool),     typeof(DateTime?)), (Expression<Func<bool,DateTime?>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(byte),     typeof(DateTime?)), (Expression<Func<byte,DateTime?>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(char),     typeof(DateTime?)), (Expression<Func<char,DateTime?>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(DateTime), typeof(DateTime?)), (Expression<Func<DateTime,DateTime?>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(decimal),  typeof(DateTime?)), (Expression<Func<decimal,DateTime?>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(double),   typeof(DateTime?)), (Expression<Func<double,DateTime?>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(short),    typeof(DateTime?)), (Expression<Func<short,DateTime?>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(int),      typeof(DateTime?)), (Expression<Func<int,DateTime?>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(long),     typeof(DateTime?)), (Expression<Func<long ,DateTime?>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(sbyte),    typeof(DateTime?)), (Expression<Func<sbyte,DateTime?>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(float),    typeof(DateTime?)), (Expression<Func<float,DateTime?>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(string),   typeof(DateTime?)), (Expression<Func<string,DateTime?>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(ushort),   typeof(DateTime?)), (Expression<Func<ushort,DateTime?>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(uint),     typeof(DateTime?)), (Expression<Func<uint  ,DateTime?>>)(foo => Convert.ToDateTime(foo)) },
            { new TypePair(typeof(ulong),    typeof(DateTime?)), (Expression<Func<ulong,DateTime?>>)(foo => Convert.ToDateTime(foo)) },
            // decimal?
            { new TypePair(typeof(bool),     typeof(decimal?)), (Expression<Func<bool,decimal?>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(byte),     typeof(decimal?)), (Expression<Func<byte,decimal?>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(char),     typeof(decimal?)), (Expression<Func<char,decimal?>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(DateTime), typeof(decimal?)), (Expression<Func<DateTime,decimal?>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(decimal),  typeof(decimal?)), (Expression<Func<decimal,decimal?>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(double),   typeof(decimal?)), (Expression<Func<double,decimal?>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(short),    typeof(decimal?)), (Expression<Func<short,decimal?>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(int),      typeof(decimal?)), (Expression<Func<int,decimal?>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(long),     typeof(decimal?)), (Expression<Func<long ,decimal?>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(sbyte),    typeof(decimal?)), (Expression<Func<sbyte,decimal?>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(float),    typeof(decimal?)), (Expression<Func<float,decimal?>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(string),   typeof(decimal?)), (Expression<Func<string,decimal?>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(ushort),   typeof(decimal?)), (Expression<Func<ushort,decimal?>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(uint),     typeof(decimal?)), (Expression<Func<uint  ,decimal?>>)(foo => Convert.ToDecimal(foo)) },
            { new TypePair(typeof(ulong),    typeof(decimal?)), (Expression<Func<ulong,decimal?>>)(foo => Convert.ToDecimal(foo)) },
            // Double?
            { new TypePair(typeof(bool),     typeof(double?)), (Expression<Func<bool,double?>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(byte),     typeof(double?)), (Expression<Func<byte,double?>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(char),     typeof(double?)), (Expression<Func<char,double?>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(DateTime), typeof(double?)), (Expression<Func<DateTime,double?>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(decimal),  typeof(double?)), (Expression<Func<decimal,double?>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(double),   typeof(double?)), (Expression<Func<double,double?>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(short),    typeof(double?)), (Expression<Func<short,double?>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(int),      typeof(double?)), (Expression<Func<int,double?>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(long),     typeof(double?)), (Expression<Func<long ,double?>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(sbyte),    typeof(double?)), (Expression<Func<sbyte,double?>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(float),    typeof(double?)), (Expression<Func<float,double?>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(string),   typeof(double?)), (Expression<Func<string,double?>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(ushort),   typeof(double?)), (Expression<Func<ushort,double?>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(uint),     typeof(double?)), (Expression<Func<uint  ,double?>>)(foo => Convert.ToDouble(foo)) },
            { new TypePair(typeof(ulong),    typeof(double?)), (Expression<Func<ulong,double?>>)(foo => Convert.ToDouble(foo)) },
            // Int16?
            { new TypePair(typeof(bool),     typeof(short?)), (Expression<Func<bool,short?>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(byte),     typeof(short?)), (Expression<Func<byte,short?>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(char),     typeof(short?)), (Expression<Func<char,short?>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(DateTime), typeof(short?)), (Expression<Func<DateTime,short?>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(decimal),  typeof(short?)), (Expression<Func<decimal,short?>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(double),   typeof(short?)), (Expression<Func<double,short?>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(short),    typeof(short?)), (Expression<Func<short,short?>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(int),      typeof(short?)), (Expression<Func<int,short?>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(long),     typeof(short?)), (Expression<Func<long ,short?>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(sbyte),    typeof(short?)), (Expression<Func<sbyte,short?>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(float),    typeof(short?)), (Expression<Func<float,short?>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(string),   typeof(short?)), (Expression<Func<string,short?>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(ushort),   typeof(short?)), (Expression<Func<ushort,short?>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(uint),     typeof(short?)), (Expression<Func<uint  ,short?>>)(foo => Convert.ToInt16(foo)) },
            { new TypePair(typeof(ulong),    typeof(short?)), (Expression<Func<ulong,short?>>)(foo => Convert.ToInt16(foo)) },
            // Int32?
            { new TypePair(typeof(bool),     typeof(int?)), (Expression<Func<bool,int?>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(byte),     typeof(int?)), (Expression<Func<byte,int?>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(char),     typeof(int?)), (Expression<Func<char,int?>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(DateTime), typeof(int?)), (Expression<Func<DateTime,int?>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(decimal),  typeof(int?)), (Expression<Func<decimal,int?>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(double),   typeof(int?)), (Expression<Func<double,int?>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(short),    typeof(int?)), (Expression<Func<short,int?>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(int),      typeof(int?)), (Expression<Func<int,int?>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(long),     typeof(int?)), (Expression<Func<long ,int?>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(sbyte),    typeof(int?)), (Expression<Func<sbyte,int?>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(float),    typeof(int?)), (Expression<Func<float,int?>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(string),   typeof(int?)), (Expression<Func<string,int?>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(ushort),   typeof(int?)), (Expression<Func<ushort,int?>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(uint),     typeof(int?)), (Expression<Func<uint  ,int?>>)(foo => Convert.ToInt32(foo)) },
            { new TypePair(typeof(ulong),    typeof(int?)), (Expression<Func<ulong,int?>>)(foo => Convert.ToInt32(foo)) },
            // Int64?
            { new TypePair(typeof(bool),     typeof(long?)), (Expression<Func<bool,long?>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(byte),     typeof(long?)), (Expression<Func<byte,long?>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(char),     typeof(long?)), (Expression<Func<char,long?>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(DateTime), typeof(long?)), (Expression<Func<DateTime,long?>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(decimal),  typeof(long?)), (Expression<Func<decimal,long?>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(double),   typeof(long?)), (Expression<Func<double,long?>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(short),    typeof(long?)), (Expression<Func<short,long?>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(int),      typeof(long?)), (Expression<Func<int,long?>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(long),     typeof(long?)), (Expression<Func<long ,long?>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(sbyte),    typeof(long?)), (Expression<Func<sbyte,long?>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(float),    typeof(long?)), (Expression<Func<float,long?>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(string),   typeof(long?)), (Expression<Func<string,long?>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(ushort),   typeof(long?)), (Expression<Func<ushort,long?>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(uint),     typeof(long?)), (Expression<Func<uint  ,long?>>)(foo => Convert.ToInt64(foo)) },
            { new TypePair(typeof(ulong),    typeof(long?)), (Expression<Func<ulong,long?>>)(foo => Convert.ToInt64(foo)) },
            // sbyte?
            { new TypePair(typeof(bool),     typeof(sbyte?)), (Expression<Func<bool,sbyte?>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(byte),     typeof(sbyte?)), (Expression<Func<byte,sbyte?>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(char),     typeof(sbyte?)), (Expression<Func<char,sbyte?>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(DateTime), typeof(sbyte?)), (Expression<Func<DateTime,sbyte?>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(decimal),  typeof(sbyte?)), (Expression<Func<decimal,sbyte?>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(double),   typeof(sbyte?)), (Expression<Func<double,sbyte?>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(short),    typeof(sbyte?)), (Expression<Func<short,sbyte?>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(int),      typeof(sbyte?)), (Expression<Func<int,sbyte?>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(long),     typeof(sbyte?)), (Expression<Func<long ,sbyte?>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(sbyte),    typeof(sbyte?)), (Expression<Func<sbyte,sbyte?>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(float),    typeof(sbyte?)), (Expression<Func<float,sbyte?>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(string),   typeof(sbyte?)), (Expression<Func<string,sbyte?>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(ushort),   typeof(sbyte?)), (Expression<Func<ushort,sbyte?>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(uint),     typeof(sbyte?)), (Expression<Func<uint  ,sbyte?>>)(foo => Convert.ToSByte(foo)) },
            { new TypePair(typeof(ulong),    typeof(sbyte?)), (Expression<Func<ulong,sbyte?>>)(foo => Convert.ToSByte(foo)) },
            // float?
            { new TypePair(typeof(bool),     typeof(float?)), (Expression<Func<bool,float?>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(byte),     typeof(float?)), (Expression<Func<byte,float?>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(char),     typeof(float?)), (Expression<Func<char,float?>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(DateTime), typeof(float?)), (Expression<Func<DateTime,float?>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(decimal),  typeof(float?)), (Expression<Func<decimal,float?>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(double),   typeof(float?)), (Expression<Func<double,float?>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(short),    typeof(float?)), (Expression<Func<short,float?>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(int),      typeof(float?)), (Expression<Func<int,float?>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(long),     typeof(float?)), (Expression<Func<long ,float?>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(sbyte),    typeof(float?)), (Expression<Func<sbyte,float?>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(float),    typeof(float?)), (Expression<Func<float,float?>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(string),   typeof(float?)), (Expression<Func<string,float?>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(ushort),   typeof(float?)), (Expression<Func<ushort,float?>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(uint),     typeof(float?)), (Expression<Func<uint  ,float?>>)(foo => Convert.ToSingle(foo)) },
            { new TypePair(typeof(ulong),    typeof(float?)), (Expression<Func<ulong,float?>>)(foo => Convert.ToSingle(foo)) },
            // ushort?
            { new TypePair(typeof(bool),     typeof(ushort?)), (Expression<Func<bool,ushort?>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(byte),     typeof(ushort?)), (Expression<Func<byte,ushort?>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(char),     typeof(ushort?)), (Expression<Func<char,ushort?>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(DateTime), typeof(ushort?)), (Expression<Func<DateTime,ushort?>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(decimal),  typeof(ushort?)), (Expression<Func<decimal,ushort?>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(double),   typeof(ushort?)), (Expression<Func<double,ushort?>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(short),    typeof(ushort?)), (Expression<Func<short,ushort?>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(int),      typeof(ushort?)), (Expression<Func<int,ushort?>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(long),     typeof(ushort?)), (Expression<Func<long ,ushort?>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(sbyte),    typeof(ushort?)), (Expression<Func<sbyte,ushort?>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(float),    typeof(ushort?)), (Expression<Func<float,ushort?>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(string),   typeof(ushort?)), (Expression<Func<string,ushort?>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(ushort),   typeof(ushort?)), (Expression<Func<ushort,ushort?>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(uint),     typeof(ushort?)), (Expression<Func<uint  ,ushort?>>)(foo => Convert.ToUInt16(foo)) },
            { new TypePair(typeof(ulong),    typeof(ushort?)), (Expression<Func<ulong,ushort?>>)(foo => Convert.ToUInt16(foo)) },
            // uint?
            { new TypePair(typeof(bool),     typeof(uint?)), (Expression<Func<bool,uint?>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(byte),     typeof(uint?)), (Expression<Func<byte,uint?>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(char),     typeof(uint?)), (Expression<Func<char,uint?>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(DateTime), typeof(uint?)), (Expression<Func<DateTime,uint?>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(decimal),  typeof(uint?)), (Expression<Func<decimal,uint?>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(double),   typeof(uint?)), (Expression<Func<double,uint?>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(short),    typeof(uint?)), (Expression<Func<short,uint?>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(int),      typeof(uint?)), (Expression<Func<int,uint?>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(long),     typeof(uint?)), (Expression<Func<long ,uint?>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(sbyte),    typeof(uint?)), (Expression<Func<sbyte,uint?>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(float),    typeof(uint?)), (Expression<Func<float,uint?>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(string),   typeof(uint?)), (Expression<Func<string,uint?>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(ushort),   typeof(uint?)), (Expression<Func<ushort,uint?>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(uint),     typeof(uint?)), (Expression<Func<uint  ,uint?>>)(foo => Convert.ToUInt32(foo)) },
            { new TypePair(typeof(ulong),    typeof(uint?)), (Expression<Func<ulong,uint?>>)(foo => Convert.ToUInt32(foo)) },
            // ulong?
            { new TypePair(typeof(bool),     typeof(ulong?)), (Expression<Func<bool,ulong?>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(byte),     typeof(ulong?)), (Expression<Func<byte,ulong?>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(char),     typeof(ulong?)), (Expression<Func<char,ulong?>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(DateTime), typeof(ulong?)), (Expression<Func<DateTime,ulong?>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(decimal),  typeof(ulong?)), (Expression<Func<decimal,ulong?>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(double),   typeof(ulong?)), (Expression<Func<double,ulong?>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(short),    typeof(ulong?)), (Expression<Func<short,ulong?>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(int),      typeof(ulong?)), (Expression<Func<int,ulong?>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(long),     typeof(ulong?)), (Expression<Func<long ,ulong?>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(sbyte),    typeof(ulong?)), (Expression<Func<sbyte,ulong?>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(float),    typeof(ulong?)), (Expression<Func<float,ulong?>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(string),   typeof(ulong?)), (Expression<Func<string,ulong?>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(ushort),   typeof(ulong?)), (Expression<Func<ushort,ulong?>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(uint),     typeof(ulong?)), (Expression<Func<uint  ,ulong?>>)(foo => Convert.ToUInt64(foo)) },
            { new TypePair(typeof(ulong),    typeof(ulong?)), (Expression<Func<ulong,ulong?>>)(foo => Convert.ToUInt64(foo)) },
        });


        private readonly IReadOnlyDictionary<TypePair, Delegate> _converterFuncs;

        public ConvertMapper()
        {
            _converterFuncs = _converters.ToDictionary(kp => kp.Key, kp => kp.Value.Compile());
        }

        public object Map(ResolutionContext context) =>
            context.SourceValue == null
            ? context.Mapper.CreateObject(context)
            : _converterFuncs[context.Types].DynamicInvoke(context.SourceValue);

        public bool IsMatch(TypePair types) => _converters.ContainsKey(types);
        public Expression MapExpression(TypeMapRegistry typeMapRegistry, IConfigurationProvider configurationProvider, PropertyMap propertyMap, Expression sourceExpression, Expression destExpression, Expression contextExpression)
        {
            var typeMap = new TypePair(sourceExpression.Type, destExpression.Type);
            return _converters[typeMap].ReplaceParameters(sourceExpression);
        }
    }
}
